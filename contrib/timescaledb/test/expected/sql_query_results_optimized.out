SET timescaledb.disable_optimizations= 'off';
\ir include/sql_query_results.sql
CREATE TABLE PUBLIC.hyper_1 (
  time TIMESTAMP NOT NULL,
  series_0 DOUBLE PRECISION NULL,
  series_1 DOUBLE PRECISION NULL,
  series_2 DOUBLE PRECISION NULL
);
CREATE INDEX "time_plain" ON PUBLIC.hyper_1 (time DESC, series_0);
SELECT * FROM create_hypertable('"public"."hyper_1"'::regclass, 'time'::name, number_partitions => 1, create_default_indexes=>false);
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO hyper_1 SELECT to_timestamp(ser), ser, ser+10000, sqrt(ser::numeric) FROM generate_series(0,10000) ser;
INSERT INTO hyper_1 SELECT to_timestamp(ser), ser, ser+10000, sqrt(ser::numeric) FROM generate_series(10001,20000) ser;
CREATE TABLE PUBLIC.hyper_1_tz (
  time TIMESTAMPTZ NOT NULL,
  series_0 DOUBLE PRECISION NULL,
  series_1 DOUBLE PRECISION NULL,
  series_2 DOUBLE PRECISION NULL
);
CREATE INDEX "time_plain_tz" ON PUBLIC.hyper_1_tz (time DESC, series_0);
SELECT * FROM create_hypertable('"public"."hyper_1_tz"'::regclass, 'time'::name, number_partitions => 1, create_default_indexes=>false);
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO hyper_1_tz SELECT to_timestamp(ser), ser, ser+10000, sqrt(ser::numeric) FROM generate_series(0,10000) ser;
INSERT INTO hyper_1_tz SELECT to_timestamp(ser), ser, ser+10000, sqrt(ser::numeric) FROM generate_series(10001,20000) ser;
CREATE TABLE PUBLIC.hyper_1_int (
  time int NOT NULL,
  series_0 DOUBLE PRECISION NULL,
  series_1 DOUBLE PRECISION NULL,
  series_2 DOUBLE PRECISION NULL
);
CREATE INDEX "time_plain_int" ON PUBLIC.hyper_1_int (time DESC, series_0);
SELECT * FROM create_hypertable('"public"."hyper_1_int"'::regclass, 'time'::name, number_partitions => 1, chunk_time_interval=>10000, create_default_indexes=>FALSE);
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO hyper_1_int SELECT ser, ser, ser+10000, sqrt(ser::numeric) FROM generate_series(0,10000) ser;
INSERT INTO hyper_1_int SELECT ser, ser, ser+10000, sqrt(ser::numeric) FROM generate_series(10001,20000) ser;
CREATE TABLE PUBLIC.hyper_1_date (
  time date NOT NULL,
  series_0 DOUBLE PRECISION NULL,
  series_1 DOUBLE PRECISION NULL,
  series_2 DOUBLE PRECISION NULL
);
CREATE INDEX "time_plain_date" ON PUBLIC.hyper_1_date (time DESC, series_0);
SELECT * FROM create_hypertable('"public"."hyper_1_date"'::regclass, 'time'::name, number_partitions => 1, chunk_time_interval=>86400000000, create_default_indexes=>FALSE);
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO hyper_1_date SELECT to_timestamp(ser)::date, ser, ser+10000, sqrt(ser::numeric) FROM generate_series(0,10000) ser;
INSERT INTO hyper_1_date SELECT to_timestamp(ser)::date, ser, ser+10000, sqrt(ser::numeric) FROM generate_series(10001,20000) ser;
--below needed to create enough unique dates to trigger an index scan
INSERT INTO hyper_1_date SELECT to_timestamp(ser*100)::date, ser, ser+10000, sqrt(ser::numeric) FROM generate_series(10001,20000) ser;
CREATE TABLE PUBLIC.plain_table (
  time TIMESTAMPTZ NOT NULL,
  series_0 DOUBLE PRECISION NULL,
  series_1 DOUBLE PRECISION NULL,
  series_2 DOUBLE PRECISION NULL
);
CREATE INDEX "time_plain_plain_table" ON PUBLIC.plain_table (time DESC, series_0);
INSERT INTO plain_table SELECT to_timestamp(ser), ser, ser+10000, sqrt(ser::numeric) FROM generate_series(0,10000) ser;
INSERT INTO plain_table SELECT to_timestamp(ser), ser, ser+10000, sqrt(ser::numeric) FROM generate_series(10001,20000) ser;
SET client_min_messages = 'error';
--avoid warning polluting output
ANALYZE;
RESET client_min_messages;
--non-aggregates use MergeAppend in both optimized and non-optimized
EXPLAIN (costs off) SELECT * FROM hyper_1 ORDER BY "time" DESC limit 2;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Limit
   ->  Merge Append
         Sort Key: hyper_1."time" DESC
         ->  Index Scan using time_plain on hyper_1
         ->  Index Scan using _hyper_1_1_chunk_time_plain on _hyper_1_1_chunk
(5 rows)

SELECT * FROM hyper_1 ORDER BY "time" DESC limit 2;
           time           | series_0 | series_1 |     series_2     
--------------------------+----------+----------+------------------
 Wed Dec 31 21:33:20 1969 |    20000 |    30000 |  141.42135623731
 Wed Dec 31 21:33:19 1969 |    19999 |    29999 | 141.417820659208
(2 rows)

--aggregates use MergeAppend only in optimized
EXPLAIN (costs off) SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2) FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (date_trunc('minute'::text, hyper_1."time"))
         ->  Result
               ->  Merge Append
                     Sort Key: (date_trunc('minute'::text, hyper_1."time")) DESC
                     ->  Index Scan using time_plain on hyper_1
                     ->  Index Scan using _hyper_1_1_chunk_time_plain on _hyper_1_1_chunk
(8 rows)

EXPLAIN (costs off) SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_date GROUP BY t ORDER BY t DESC limit 2;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (date_trunc('minute'::text, (hyper_1_date."time")::timestamp with time zone))
         ->  Result
               ->  Merge Append
                     Sort Key: (date_trunc('minute'::text, (hyper_1_date."time")::timestamp with time zone)) DESC
                     ->  Index Scan using time_plain_date on hyper_1_date
                     ->  Index Scan using _hyper_4_6_chunk_time_plain_date on _hyper_4_6_chunk
                     ->  Index Scan using _hyper_4_7_chunk_time_plain_date on _hyper_4_7_chunk
                     ->  Index Scan using _hyper_4_8_chunk_time_plain_date on _hyper_4_8_chunk
                     ->  Index Scan using _hyper_4_9_chunk_time_plain_date on _hyper_4_9_chunk
                     ->  Index Scan using _hyper_4_10_chunk_time_plain_date on _hyper_4_10_chunk
                     ->  Index Scan using _hyper_4_11_chunk_time_plain_date on _hyper_4_11_chunk
                     ->  Index Scan using _hyper_4_12_chunk_time_plain_date on _hyper_4_12_chunk
                     ->  Index Scan using _hyper_4_13_chunk_time_plain_date on _hyper_4_13_chunk
                     ->  Index Scan using _hyper_4_14_chunk_time_plain_date on _hyper_4_14_chunk
                     ->  Index Scan using _hyper_4_15_chunk_time_plain_date on _hyper_4_15_chunk
                     ->  Index Scan using _hyper_4_16_chunk_time_plain_date on _hyper_4_16_chunk
                     ->  Index Scan using _hyper_4_17_chunk_time_plain_date on _hyper_4_17_chunk
                     ->  Index Scan using _hyper_4_18_chunk_time_plain_date on _hyper_4_18_chunk
(20 rows)

--the minute and second results should be diff
SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2) FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg   |  min  |       avg        
--------------------------+---------+-------+------------------
 Wed Dec 31 21:33:00 1969 |   19990 | 29980 | 141.385994856058
 Wed Dec 31 21:32:00 1969 | 19949.5 | 29920 | 141.242685621416
(2 rows)

SELECT date_trunc('second', time) t, avg(series_0), min(series_1), avg(series_2) FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |  avg  |  min  |       avg        
--------------------------+-------+-------+------------------
 Wed Dec 31 21:33:20 1969 | 20000 | 30000 |  141.42135623731
 Wed Dec 31 21:33:19 1969 | 19999 | 29999 | 141.417820659208
(2 rows)

--test that when index on time used by constraint, still works correctly
EXPLAIN (costs off)
SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1
WHERE time < to_timestamp(900)
GROUP BY t
ORDER BY t DESC
LIMIT 2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (date_trunc('minute'::text, hyper_1."time"))
         ->  Custom Scan (ConstraintAwareAppend)
               Hypertable: hyper_1
               Chunks left after exclusion: 1
               ->  Merge Append
                     Sort Key: (date_trunc('minute'::text, _hyper_1_1_chunk."time")) DESC
                     ->  Index Scan using _hyper_1_1_chunk_time_plain on _hyper_1_1_chunk
                           Index Cond: ("time" < 'Wed Dec 31 16:15:00 1969 PST'::timestamp with time zone)
(10 rows)

SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1
WHERE time < to_timestamp(900)
GROUP BY t
ORDER BY t DESC
LIMIT 2;
            t             |  avg  |  min  |       avg        
--------------------------+-------+-------+------------------
 Wed Dec 31 16:14:00 1969 | 869.5 | 10840 | 29.4858228711055
 Wed Dec 31 16:13:00 1969 | 809.5 | 10780 | 28.4500853206775
(2 rows)

--test that still works with an expression index on data_trunc.
DROP INDEX "time_plain";
CREATE INDEX "time_trunc" ON PUBLIC.hyper_1 (date_trunc('minute', time));
SET client_min_messages = 'error';
--avoid warning polluting output
ANALYZE;
RESET client_min_messages;
EXPLAIN (costs off) SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2) FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (date_trunc('minute'::text, hyper_1."time"))
         ->  Result
               ->  Merge Append
                     Sort Key: (date_trunc('minute'::text, hyper_1."time")) DESC
                     ->  Index Scan Backward using time_trunc on hyper_1
                     ->  Index Scan Backward using _hyper_1_1_chunk_time_trunc on _hyper_1_1_chunk
(8 rows)

SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2) FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg   |  min  |       avg        
--------------------------+---------+-------+------------------
 Wed Dec 31 21:33:00 1969 |   19990 | 29980 | 141.385994856058
 Wed Dec 31 21:32:00 1969 | 19949.5 | 29920 | 141.242685621416
(2 rows)

--test that works with both indexes
CREATE INDEX "time_plain" ON PUBLIC.hyper_1 (time DESC, series_0);
SET client_min_messages = 'error';
--avoid warning polluting output
ANALYZE;
RESET client_min_messages;
EXPLAIN (costs off) SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2) FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (date_trunc('minute'::text, hyper_1."time"))
         ->  Result
               ->  Merge Append
                     Sort Key: (date_trunc('minute'::text, hyper_1."time")) DESC
                     ->  Index Scan Backward using time_trunc on hyper_1
                     ->  Index Scan Backward using _hyper_1_1_chunk_time_trunc on _hyper_1_1_chunk
(8 rows)

SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2) FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg   |  min  |       avg        
--------------------------+---------+-------+------------------
 Wed Dec 31 21:33:00 1969 |   19990 | 29980 | 141.385994856058
 Wed Dec 31 21:32:00 1969 | 19949.5 | 29920 | 141.242685621416
(2 rows)

EXPLAIN (costs off) SELECT time_bucket('1 minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (time_bucket('@ 1 min'::interval, hyper_1."time"))
         ->  Result
               ->  Merge Append
                     Sort Key: (time_bucket('@ 1 min'::interval, hyper_1."time")) DESC
                     ->  Index Scan using time_plain on hyper_1
                     ->  Index Scan using _hyper_1_1_chunk_time_plain on _hyper_1_1_chunk
(8 rows)

SELECT time_bucket('1 minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg   |  min  |       avg        
--------------------------+---------+-------+------------------
 Wed Dec 31 21:33:00 1969 |   19990 | 29980 | 141.385994856058
 Wed Dec 31 21:32:00 1969 | 19949.5 | 29920 | 141.242685621416
(2 rows)

EXPLAIN (costs off) SELECT time_bucket('1 minute', time, INTERVAL '30 seconds') t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: ((time_bucket('@ 1 min'::interval, (hyper_1."time" - '@ 30 secs'::interval)) + '@ 30 secs'::interval))
         ->  Result
               ->  Merge Append
                     Sort Key: ((time_bucket('@ 1 min'::interval, (hyper_1."time" - '@ 30 secs'::interval)) + '@ 30 secs'::interval)) DESC
                     ->  Index Scan using time_plain on hyper_1
                     ->  Index Scan using _hyper_1_1_chunk_time_plain on _hyper_1_1_chunk
(8 rows)

SELECT time_bucket('1 minute', time, INTERVAL '30 seconds') t, trunc(avg(series_0)::numeric, 8) as avg_trunc1, min(series_1), trunc(avg(series_2)::numeric, 8) as avg_trunc2
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg_trunc1   |  min  |  avg_trunc2  
--------------------------+----------------+-------+--------------
 Wed Dec 31 21:32:30 1969 | 19975.00000000 | 29950 | 141.33293065
 Wed Dec 31 21:31:30 1969 | 19919.50000000 | 29890 | 141.13644545
(2 rows)

EXPLAIN (costs off) SELECT time_bucket('1 minute', time - INTERVAL '30 seconds') t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (time_bucket('@ 1 min'::interval, (hyper_1."time" - '@ 30 secs'::interval)))
         ->  Result
               ->  Merge Append
                     Sort Key: (time_bucket('@ 1 min'::interval, (hyper_1."time" - '@ 30 secs'::interval))) DESC
                     ->  Index Scan using time_plain on hyper_1
                     ->  Index Scan using _hyper_1_1_chunk_time_plain on _hyper_1_1_chunk
(8 rows)

SELECT time_bucket('1 minute', time - INTERVAL '30 seconds') t, trunc(avg(series_0)::numeric, 8) as avg_trunc1, min(series_1), trunc(avg(series_2)::numeric, 8) as avg_trunc2
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg_trunc1   |  min  |  avg_trunc2  
--------------------------+----------------+-------+--------------
 Wed Dec 31 21:32:00 1969 | 19975.00000000 | 29950 | 141.33293065
 Wed Dec 31 21:31:00 1969 | 19919.50000000 | 29890 | 141.13644545
(2 rows)

EXPLAIN (costs off) SELECT time_bucket('1 minute', time - INTERVAL '30 seconds') + INTERVAL '30 seconds' t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: ((time_bucket('@ 1 min'::interval, (hyper_1."time" - '@ 30 secs'::interval)) + '@ 30 secs'::interval))
         ->  Result
               ->  Merge Append
                     Sort Key: ((time_bucket('@ 1 min'::interval, (hyper_1."time" - '@ 30 secs'::interval)) + '@ 30 secs'::interval)) DESC
                     ->  Index Scan using time_plain on hyper_1
                     ->  Index Scan using _hyper_1_1_chunk_time_plain on _hyper_1_1_chunk
(8 rows)

SELECT time_bucket('1 minute', time - INTERVAL '30 seconds') + INTERVAL '30 seconds' t, trunc(avg(series_0)::numeric, 8) as avg_trunc1, min(series_1), trunc(avg(series_2)::numeric, 8) as avg_trunc2
FROM hyper_1 GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg_trunc1   |  min  |  avg_trunc2  
--------------------------+----------------+-------+--------------
 Wed Dec 31 21:32:30 1969 | 19975.00000000 | 29950 | 141.33293065
 Wed Dec 31 21:31:30 1969 | 19919.50000000 | 29890 | 141.13644545
(2 rows)

EXPLAIN (costs off) SELECT time_bucket('1 minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_tz GROUP BY t ORDER BY t DESC limit 2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (time_bucket('@ 1 min'::interval, hyper_1_tz."time"))
         ->  Result
               ->  Merge Append
                     Sort Key: (time_bucket('@ 1 min'::interval, hyper_1_tz."time")) DESC
                     ->  Index Scan using time_plain_tz on hyper_1_tz
                     ->  Index Scan using _hyper_2_2_chunk_time_plain_tz on _hyper_2_2_chunk
(8 rows)

SELECT time_bucket('1 minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_tz GROUP BY t ORDER BY t DESC limit 2;
              t               |   avg   |  min  |       avg        
------------------------------+---------+-------+------------------
 Wed Dec 31 21:33:00 1969 PST |   19990 | 29980 | 141.385994856058
 Wed Dec 31 21:32:00 1969 PST | 19949.5 | 29920 | 141.242685621416
(2 rows)

EXPLAIN (costs off) SELECT time_bucket('1 minute', time::timestamp) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_tz GROUP BY t ORDER BY t DESC limit 2;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (time_bucket('@ 1 min'::interval, (hyper_1_tz."time")::timestamp without time zone))
         ->  Result
               ->  Merge Append
                     Sort Key: (time_bucket('@ 1 min'::interval, (hyper_1_tz."time")::timestamp without time zone)) DESC
                     ->  Index Scan using time_plain_tz on hyper_1_tz
                     ->  Index Scan using _hyper_2_2_chunk_time_plain_tz on _hyper_2_2_chunk
(8 rows)

SELECT time_bucket('1 minute', time::timestamp) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_tz GROUP BY t ORDER BY t DESC limit 2;
            t             |   avg   |  min  |       avg        
--------------------------+---------+-------+------------------
 Wed Dec 31 21:33:00 1969 |   19990 | 29980 | 141.385994856058
 Wed Dec 31 21:32:00 1969 | 19949.5 | 29920 | 141.242685621416
(2 rows)

EXPLAIN (costs off) SELECT time_bucket(10, time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_int GROUP BY t ORDER BY t DESC limit 2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (((hyper_1_int."time" / 10) * 10))
         ->  Result
               ->  Merge Append
                     Sort Key: (((hyper_1_int."time" / 10) * 10)) DESC
                     ->  Index Scan using time_plain_int on hyper_1_int
                     ->  Index Scan using _hyper_3_3_chunk_time_plain_int on _hyper_3_3_chunk
                     ->  Index Scan using _hyper_3_4_chunk_time_plain_int on _hyper_3_4_chunk
                     ->  Index Scan using _hyper_3_5_chunk_time_plain_int on _hyper_3_5_chunk
(10 rows)

SELECT time_bucket(10, time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_int GROUP BY t ORDER BY t DESC limit 2;
   t   |   avg   |  min  |       avg        
-------+---------+-------+------------------
 20000 |   20000 | 30000 |  141.42135623731
 19990 | 19994.5 | 29990 | 141.401909099017
(2 rows)

EXPLAIN (costs off) SELECT time_bucket(10, time, 2) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_int GROUP BY t ORDER BY t DESC limit 2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: (((((hyper_1_int."time" - 2) / 10) * 10) + 2))
         ->  Result
               ->  Merge Append
                     Sort Key: (((((hyper_1_int."time" - 2) / 10) * 10) + 2)) DESC
                     ->  Index Scan using time_plain_int on hyper_1_int
                     ->  Index Scan using _hyper_3_3_chunk_time_plain_int on _hyper_3_3_chunk
                     ->  Index Scan using _hyper_3_4_chunk_time_plain_int on _hyper_3_4_chunk
                     ->  Index Scan using _hyper_3_5_chunk_time_plain_int on _hyper_3_5_chunk
(10 rows)

SELECT time_bucket(10, time) t, avg(series_0), min(series_1), avg(series_2)
FROM hyper_1_int GROUP BY t ORDER BY t DESC limit 2;
   t   |   avg   |  min  |       avg        
-------+---------+-------+------------------
 20000 |   20000 | 30000 |  141.42135623731
 19990 | 19994.5 | 29990 | 141.401909099017
(2 rows)

--plain tables shouldnt be optimized by default
EXPLAIN (costs off)
SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM plain_table
WHERE time < to_timestamp(900)
GROUP BY t
ORDER BY t DESC
LIMIT 2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: (date_trunc('minute'::text, "time")) DESC
         ->  HashAggregate
               Group Key: date_trunc('minute'::text, "time")
               ->  Bitmap Heap Scan on plain_table
                     Recheck Cond: ("time" < 'Wed Dec 31 16:15:00 1969 PST'::timestamp with time zone)
                     ->  Bitmap Index Scan on time_plain_plain_table
                           Index Cond: ("time" < 'Wed Dec 31 16:15:00 1969 PST'::timestamp with time zone)
(9 rows)

SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2)
FROM plain_table
WHERE time < to_timestamp(900)
GROUP BY t
ORDER BY t DESC
LIMIT 2;
              t               |  avg  |  min  |       avg        
------------------------------+-------+-------+------------------
 Wed Dec 31 16:14:00 1969 PST | 869.5 | 10840 | 29.4858228711055
 Wed Dec 31 16:13:00 1969 PST | 809.5 | 10780 | 28.4500853206775
(2 rows)

--can turn on plain table optimizations
BEGIN;
    SET LOCAL timescaledb.optimize_non_hypertables = 'on';
    EXPLAIN (costs off)
    SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2)
    FROM plain_table
    WHERE time < to_timestamp(900)
    GROUP BY t
    ORDER BY t DESC
    LIMIT 2;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: date_trunc('minute'::text, "time")
         ->  Index Scan using time_plain_plain_table on plain_table
               Index Cond: ("time" < 'Wed Dec 31 16:15:00 1969 PST'::timestamp with time zone)
(5 rows)

    SELECT date_trunc('minute', time) t, avg(series_0), min(series_1), avg(series_2)
    FROM plain_table
    WHERE time < to_timestamp(900)
    GROUP BY t
    ORDER BY t DESC
    LIMIT 2;
              t               |  avg  |  min  |       avg        
------------------------------+-------+-------+------------------
 Wed Dec 31 16:14:00 1969 PST | 869.5 | 10840 | 29.4858228711055
 Wed Dec 31 16:13:00 1969 PST | 809.5 | 10780 | 28.4500853206775
(2 rows)

ROLLBACK;
