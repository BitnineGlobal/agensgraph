\c single :ROLE_SUPERUSER
create schema test_schema AUTHORIZATION :ROLE_DEFAULT_PERM_USER;
create schema chunk_schema AUTHORIZATION :ROLE_DEFAULT_PERM_USER_2;
SET ROLE :ROLE_DEFAULT_PERM_USER;
create table test_schema.test_table(time BIGINT, temp float8, device_id text, device_type text, location text, id int, id2 int);
\set ON_ERROR_STOP 0
-- get_create_command should fail since hypertable isn't made yet
SELECT * FROM _timescaledb_internal.get_create_command('test_table');
ERROR:  hypertable "test_table" not found
\set ON_ERROR_STOP 1
\dt "test_schema".*
                  List of relations
   Schema    |    Name    | Type  |       Owner       
-------------+------------+-------+-------------------
 test_schema | test_table | table | default_perm_user
(1 row)

create table test_schema.test_table_no_not_null(time BIGINT, device_id text);
\set ON_ERROR_STOP 0
-- Permission denied with unprivileged role
SET ROLE :ROLE_DEFAULT_PERM_USER_2;
select * from create_hypertable('test_schema.test_table_no_not_null', 'time', 'device_id', 2, chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'));
ERROR:  permission denied for schema test_schema at character 33
-- CREATE on schema is not enough
SET ROLE :ROLE_DEFAULT_PERM_USER;
GRANT ALL ON SCHEMA test_schema TO :ROLE_DEFAULT_PERM_USER_2;
SET ROLE :ROLE_DEFAULT_PERM_USER_2;
select * from create_hypertable('test_schema.test_table_no_not_null', 'time', 'device_id', 2, chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'));
ERROR:  permission denied for relation "test_table_no_not_null"
\set ON_ERROR_STOP 1
-- Should work with when granted table owner role
RESET ROLE;
GRANT :ROLE_DEFAULT_PERM_USER TO :ROLE_DEFAULT_PERM_USER_2;
SET ROLE :ROLE_DEFAULT_PERM_USER_2;
select * from create_hypertable('test_schema.test_table_no_not_null', 'time', 'device_id', 2, chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'));
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

\set ON_ERROR_STOP 0
insert into test_schema.test_table_no_not_null (device_id) VALUES('foo');
ERROR:  NULL value in column "time" violates not-null constraint
\set ON_ERROR_STOP 1
insert into test_schema.test_table_no_not_null (time, device_id) VALUES(1, 'foo');
RESET ROLE;
SET ROLE :ROLE_DEFAULT_PERM_USER;
\set ON_ERROR_STOP 0
-- No permissions on associated schema should fail
select * from create_hypertable('test_schema.test_table', 'time', 'device_id', 2, chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'), associated_schema_name => 'chunk_schema');
ERROR:  permissions denied: cannot create chunks in schema "chunk_schema"
\set ON_ERROR_STOP 1
-- Granting permissions on chunk_schema should make things work
RESET ROLE;
GRANT CREATE ON SCHEMA chunk_schema TO :ROLE_DEFAULT_PERM_USER;
SET ROLE :ROLE_DEFAULT_PERM_USER;
select * from create_hypertable('test_schema.test_table', 'time', 'device_id', 2, chunk_time_interval=>_timescaledb_internal.interval_to_usec('1 month'), associated_schema_name => 'chunk_schema');
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

-- Check that the insert block trigger exists (cannot show name or definition since they contain OID)
SELECT "Function" FROM test.show_triggers('test_schema.test_table', show_internal => true);
               Function               
--------------------------------------
 _timescaledb_internal.insert_blocker
(1 row)

SELECT * FROM _timescaledb_internal.get_create_command('test_table');
                                                                 get_create_command                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------
 SELECT create_hypertable('test_schema.test_table', '"time"', 'device_id', 2, chunk_time_interval => 2592000000000, create_default_indexes=>FALSE);
(1 row)

--test adding one more closed dimension
select add_dimension('test_schema.test_table', 'location', 4);
 add_dimension 
---------------
 
(1 row)

select * from _timescaledb_catalog.hypertable where table_name = 'test_table';
 id | schema_name | table_name | associated_schema_name | associated_table_prefix | num_dimensions | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
----+-------------+------------+------------------------+-------------------------+----------------+--------------------------+--------------------------+-------------------
  2 | test_schema | test_table | chunk_schema           | _hyper_2                |              3 | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

select * from _timescaledb_catalog.dimension;
 id | hypertable_id | column_name | column_type | aligned | num_slices | partitioning_func_schema | partitioning_func  | interval_length 
----+---------------+-------------+-------------+---------+------------+--------------------------+--------------------+-----------------
  1 |             1 | time        | bigint      | t       |            |                          |                    |   2592000000000
  2 |             1 | device_id   | text        | f       |          2 | _timescaledb_internal    | get_partition_hash |                
  3 |             2 | time        | bigint      | t       |            |                          |                    |   2592000000000
  4 |             2 | device_id   | text        | f       |          2 | _timescaledb_internal    | get_partition_hash |                
  5 |             2 | location    | text        | f       |          4 | _timescaledb_internal    | get_partition_hash |                
(5 rows)

--test that we can change the number of partitions and that 1 is allowed
SELECT set_number_partitions('test_schema.test_table', 1, 'location');
 set_number_partitions 
-----------------------
 
(1 row)

select * from _timescaledb_catalog.dimension WHERE column_name = 'location';
 id | hypertable_id | column_name | column_type | aligned | num_slices | partitioning_func_schema | partitioning_func  | interval_length 
----+---------------+-------------+-------------+---------+------------+--------------------------+--------------------+-----------------
  5 |             2 | location    | text        | f       |          1 | _timescaledb_internal    | get_partition_hash |                
(1 row)

SELECT set_number_partitions('test_schema.test_table', 2, 'location');
 set_number_partitions 
-----------------------
 
(1 row)

select * from _timescaledb_catalog.dimension WHERE column_name = 'location';
 id | hypertable_id | column_name | column_type | aligned | num_slices | partitioning_func_schema | partitioning_func  | interval_length 
----+---------------+-------------+-------------+---------+------------+--------------------------+--------------------+-----------------
  5 |             2 | location    | text        | f       |          2 | _timescaledb_internal    | get_partition_hash |                
(1 row)

\set ON_ERROR_STOP 0
--must give an explicit dimension when there are multiple space dimensions
SELECT set_number_partitions('test_schema.test_table', 3);
ERROR:  hypertable "test_table" has multiple space dimensions
--too few
SELECT set_number_partitions('test_schema.test_table', 0, 'location');
ERROR:  invalid number of partitions: must be between 1 and 32767
-- Too many
SELECT set_number_partitions('test_schema.test_table', 32768, 'location');
ERROR:  invalid number of partitions: must be between 1 and 32767
-- get_create_command only works on tables w/ 1 or 2 dimensions
SELECT * FROM _timescaledb_internal.get_create_command('test_table');
ERROR:  get_create_command only supports hypertables with up to 2 dimensions
\set ON_ERROR_STOP 1
--test adding one more open dimension
select add_dimension('test_schema.test_table', 'id', chunk_time_interval => 1000);
NOTICE:  adding not-null constraint to column "id"
 add_dimension 
---------------
 
(1 row)

select * from _timescaledb_catalog.hypertable where table_name = 'test_table';
 id | schema_name | table_name | associated_schema_name | associated_table_prefix | num_dimensions | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
----+-------------+------------+------------------------+-------------------------+----------------+--------------------------+--------------------------+-------------------
  2 | test_schema | test_table | chunk_schema           | _hyper_2                |              4 | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

select * from _timescaledb_catalog.dimension;
 id | hypertable_id | column_name | column_type | aligned | num_slices | partitioning_func_schema | partitioning_func  | interval_length 
----+---------------+-------------+-------------+---------+------------+--------------------------+--------------------+-----------------
  1 |             1 | time        | bigint      | t       |            |                          |                    |   2592000000000
  2 |             1 | device_id   | text        | f       |          2 | _timescaledb_internal    | get_partition_hash |                
  3 |             2 | time        | bigint      | t       |            |                          |                    |   2592000000000
  4 |             2 | device_id   | text        | f       |          2 | _timescaledb_internal    | get_partition_hash |                
  5 |             2 | location    | text        | f       |          2 | _timescaledb_internal    | get_partition_hash |                
  6 |             2 | id          | integer     | t       |            |                          |                    |            1000
(6 rows)

-- Test add_dimension: can use interval types for TIMESTAMPTZ columns
CREATE TABLE dim_test_time(time TIMESTAMPTZ, time2 TIMESTAMPTZ, time3 BIGINT, temp float8, device int, location int);
SELECT create_hypertable('dim_test_time', 'time');
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT add_dimension('dim_test_time', 'time2', chunk_time_interval => INTERVAL '1 day');
NOTICE:  adding not-null constraint to column "time2"
 add_dimension 
---------------
 
(1 row)

-- Test add_dimension: only integral should work on BIGINT columns
\set ON_ERROR_STOP 0
SELECT add_dimension('dim_test_time', 'time3', chunk_time_interval => INTERVAL '1 day');
ERROR:  invalid interval: must be an integer type for integer dimensions
-- string is not a valid type
SELECT add_dimension('dim_test_time', 'time3', chunk_time_interval => 'foo'::TEXT);
ERROR:  invalid interval: must be an interval or integer type
\set ON_ERROR_STOP 1
SELECT add_dimension('dim_test_time', 'time3', chunk_time_interval => 500);
NOTICE:  adding not-null constraint to column "time3"
 add_dimension 
---------------
 
(1 row)

-- Test add_dimension: integrals should work on TIMESTAMPTZ columns
CREATE TABLE dim_test_time2(time TIMESTAMPTZ, time2 TIMESTAMPTZ, temp float8, device int, location int);
SELECT create_hypertable('dim_test_time2', 'time');
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT add_dimension('dim_test_time2', 'time2', chunk_time_interval => 500);
WARNING:  unexpected interval: smaller than one second
NOTICE:  adding not-null constraint to column "time2"
 add_dimension 
---------------
 
(1 row)

--adding a dimension twice should not fail with 'if_not_exists'
SELECT add_dimension('dim_test_time2', 'time2', chunk_time_interval => 500, if_not_exists => true);
NOTICE:  column "time2" is already a dimension, skipping
 add_dimension 
---------------
 
(1 row)

\set ON_ERROR_STOP 0
--adding on a non-hypertable
CREATE TABLE not_hypertable(time TIMESTAMPTZ, temp float8, device int, location int);
SELECT add_dimension('not_hypertable', 'time', chunk_time_interval => 500);
ERROR:  table "not_hypertable" is not a hypertable
--adding a non-exist column
SELECT add_dimension('test_schema.test_table', 'nope', 2);
ERROR:  column "nope" does not exist
--adding the same dimension twice should fail
select add_dimension('test_schema.test_table', 'location', 2);
ERROR:  column "location" is already a dimension
--adding dimension with both number_partitions and chunk_time_interval should fail
select add_dimension('test_schema.test_table', 'id2', number_partitions => 2, chunk_time_interval => 1000);
ERROR:  cannot specify both the number of partitions and an interval
--adding a new dimension on a non-empty table should also fail
insert into test_schema.test_table values (123456789, 23.8, 'blue', 'type1', 'nyc', 1, 1);
select add_dimension('test_schema.test_table', 'device_type', 2);
ERROR:  hypertable "test_table" is not empty
-- should fail on non-empty table with 'if_not_exists' in case the dimension does not exists
select add_dimension('test_schema.test_table', 'device_type', 2, if_not_exists => true);
ERROR:  hypertable "test_table" is not empty
\set ON_ERROR_STOP 1
-- should not fail on non-empty table with 'if_not_exists' in case the dimension exists
select add_dimension('test_schema.test_table', 'location', 2, if_not_exists => true);
NOTICE:  column "location" is already a dimension, skipping
 add_dimension 
---------------
 
(1 row)

--show chunks in the associated schema
\dt "chunk_schema".*
                      List of relations
    Schema    |       Name       | Type  |       Owner       
--------------+------------------+-------+-------------------
 chunk_schema | _hyper_2_2_chunk | table | default_perm_user
(1 row)

--test partitioning in only time dimension
create table test_schema.test_1dim(time timestamp, temp float);
select create_hypertable('test_schema.test_1dim', 'time');
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

SELECT * FROM _timescaledb_internal.get_create_command('test_1dim');
                                                        get_create_command                                                        
----------------------------------------------------------------------------------------------------------------------------------
 SELECT create_hypertable('test_schema.test_1dim', '"time"', chunk_time_interval => 604800000000, create_default_indexes=>FALSE);
(1 row)

\dt "test_schema".*
                        List of relations
   Schema    |          Name          | Type  |       Owner       
-------------+------------------------+-------+-------------------
 test_schema | test_1dim              | table | default_perm_user
 test_schema | test_table             | table | default_perm_user
 test_schema | test_table_no_not_null | table | default_perm_user
(3 rows)

select create_hypertable('test_schema.test_1dim', 'time', if_not_exists => true);
NOTICE:  table "test_1dim" is already a hypertable, skipping
 create_hypertable 
-------------------
 
(1 row)

-- Should error when creating again without if_not_exists set to true
\set ON_ERROR_STOP 0
select create_hypertable('test_schema.test_1dim', 'time');
ERROR:  table "test_1dim" is already a hypertable
\set ON_ERROR_STOP 1
-- if_not_exist should also work with data in the hypertable
insert into test_schema.test_1dim VALUES ('2004-10-19 10:23:54+02', 1.0);
select create_hypertable('test_schema.test_1dim', 'time', if_not_exists => true);
NOTICE:  table "test_1dim" is already a hypertable, skipping
 create_hypertable 
-------------------
 
(1 row)

-- Should error when creating again without if_not_exists set to true
\set ON_ERROR_STOP 0
select create_hypertable('test_schema.test_1dim', 'time');
ERROR:  table "test_1dim" is already a hypertable
\set ON_ERROR_STOP 1
--test data migration
create table test_schema.test_migrate(time timestamp, temp float);
insert into test_schema.test_migrate VALUES ('2004-10-19 10:23:54+02', 1.0), ('2004-12-19 10:23:54+02', 2.0);
select * from only test_schema.test_migrate;
           time           | temp 
--------------------------+------
 Tue Oct 19 10:23:54 2004 |    1
 Sun Dec 19 10:23:54 2004 |    2
(2 rows)

\set ON_ERROR_STOP 0
--should fail without migrate_data => true
select create_hypertable('test_schema.test_migrate', 'time');
ERROR:  table "test_migrate" is not empty
\set ON_ERROR_STOP 1
select create_hypertable('test_schema.test_migrate', 'time', migrate_data => true);
NOTICE:  adding not-null constraint to column "time"
NOTICE:  migrating data to chunks
 create_hypertable 
-------------------
 
(1 row)

--there should be two new chunks
select * from _timescaledb_catalog.hypertable where table_name = 'test_migrate';
 id | schema_name |  table_name  | associated_schema_name | associated_table_prefix | num_dimensions | chunk_sizing_func_schema |  chunk_sizing_func_name  | chunk_target_size 
----+-------------+--------------+------------------------+-------------------------+----------------+--------------------------+--------------------------+-------------------
  6 | test_schema | test_migrate | _timescaledb_internal  | _hyper_6                |              1 | _timescaledb_internal    | calculate_chunk_interval |                 0
(1 row)

select * from _timescaledb_catalog.chunk;
 id | hypertable_id |      schema_name      |    table_name    
----+---------------+-----------------------+------------------
  1 |             1 | _timescaledb_internal | _hyper_1_1_chunk
  2 |             2 | chunk_schema          | _hyper_2_2_chunk
  3 |             5 | _timescaledb_internal | _hyper_5_3_chunk
  4 |             6 | _timescaledb_internal | _hyper_6_4_chunk
  5 |             6 | _timescaledb_internal | _hyper_6_5_chunk
(5 rows)

select * from test_schema.test_migrate;
           time           | temp 
--------------------------+------
 Tue Oct 19 10:23:54 2004 |    1
 Sun Dec 19 10:23:54 2004 |    2
(2 rows)

--main table should now be empty
select * from only test_schema.test_migrate;
 time | temp 
------+------
(0 rows)

select * from only _timescaledb_internal._hyper_6_4_chunk;
           time           | temp 
--------------------------+------
 Tue Oct 19 10:23:54 2004 |    1
(1 row)

select * from only _timescaledb_internal._hyper_6_5_chunk;
           time           | temp 
--------------------------+------
 Sun Dec 19 10:23:54 2004 |    2
(1 row)

create table test_schema.test_migrate_empty(time timestamp, temp float);
select create_hypertable('test_schema.test_migrate_empty', 'time', migrate_data => true);
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

CREATE TYPE test_type AS (time timestamp, temp float);
CREATE TABLE test_table_of_type OF test_type;
SELECT create_hypertable('test_table_of_type', 'time');
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO test_table_of_type VALUES ('2004-10-19 10:23:54+02', 1.0), ('2004-12-19 10:23:54+02', 2.0);
\set ON_ERROR_STOP 0
DROP TYPE test_type;
ERROR:  cannot drop type test_type because other objects depend on it
\set ON_ERROR_STOP 1
DROP TYPE test_type CASCADE;
NOTICE:  drop cascades to 3 other objects
CREATE TABLE test_table_of_type (time timestamp, temp float);
SELECT create_hypertable('test_table_of_type', 'time');
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

INSERT INTO test_table_of_type VALUES ('2004-10-19 10:23:54+02', 1.0), ('2004-12-19 10:23:54+02', 2.0);
CREATE TYPE test_type AS (time timestamp, temp float);
ALTER TABLE test_table_of_type OF test_type;
\set ON_ERROR_STOP 0
DROP TYPE test_type;
ERROR:  cannot drop type test_type because other objects depend on it
\set ON_ERROR_STOP 1
BEGIN;
DROP TYPE test_type CASCADE;
NOTICE:  drop cascades to 3 other objects
ROLLBACK;
ALTER TABLE test_table_of_type NOT OF;
DROP TYPE test_type;
-- Reset GRANTS
\c single :ROLE_SUPERUSER
REVOKE :ROLE_DEFAULT_PERM_USER FROM :ROLE_DEFAULT_PERM_USER_2;
-- Test custom partitioning functions
CREATE OR REPLACE FUNCTION partfunc_not_immutable(source anyelement)
    RETURNS INTEGER LANGUAGE PLPGSQL AS
$BODY$
BEGIN
    RETURN _timescaledb_internal.get_partition_hash(source);
END
$BODY$;
CREATE OR REPLACE FUNCTION partfunc_bad_return_type(source anyelement)
    RETURNS BIGINT LANGUAGE PLPGSQL IMMUTABLE AS
$BODY$
BEGIN
    RETURN _timescaledb_internal.get_partition_hash(source);
END
$BODY$;
CREATE OR REPLACE FUNCTION partfunc_bad_arg_type(source text)
    RETURNS INTEGER LANGUAGE PLPGSQL IMMUTABLE AS
$BODY$
BEGIN
    RETURN _timescaledb_internal.get_partition_hash(source);
END
$BODY$;
CREATE OR REPLACE FUNCTION partfunc_bad_multi_arg(source anyelement, extra_arg integer)
    RETURNS INTEGER LANGUAGE PLPGSQL IMMUTABLE AS
$BODY$
BEGIN
    RETURN _timescaledb_internal.get_partition_hash(source);
END
$BODY$;
CREATE OR REPLACE FUNCTION partfunc_valid(source anyelement)
    RETURNS INTEGER LANGUAGE PLPGSQL IMMUTABLE AS
$BODY$
BEGIN
    RETURN _timescaledb_internal.get_partition_hash(source);
END
$BODY$;
create table test_schema.test_partfunc(time timestamptz, temp float, device int);
-- Test that create_hypertable fails due to invalid partitioning function
\set ON_ERROR_STOP 0
select create_hypertable('test_schema.test_partfunc', 'time', 'device', 2, partitioning_func => 'partfunc_not_immutable');
ERROR:  invalid partitioning function
select create_hypertable('test_schema.test_partfunc', 'time', 'device', 2, partitioning_func => 'partfunc_bad_return_type');
ERROR:  invalid partitioning function
select create_hypertable('test_schema.test_partfunc', 'time', 'device', 2, partitioning_func => 'partfunc_bad_arg_type');
ERROR:  invalid partitioning function
select create_hypertable('test_schema.test_partfunc', 'time', 'device', 2, partitioning_func => 'partfunc_bad_multi_arg');
ERROR:  invalid partitioning function
\set ON_ERROR_STOP 1
-- Test that add_dimension fails due to invalid partitioning function
select create_hypertable('test_schema.test_partfunc', 'time');
NOTICE:  adding not-null constraint to column "time"
 create_hypertable 
-------------------
 
(1 row)

\set ON_ERROR_STOP 0
select add_dimension('test_schema.test_partfunc', 'device', 2, partitioning_func => 'partfunc_not_immutable');
ERROR:  invalid partitioning function
select add_dimension('test_schema.test_partfunc', 'device', 2, partitioning_func => 'partfunc_bad_return_type');
ERROR:  invalid partitioning function
select add_dimension('test_schema.test_partfunc', 'device', 2, partitioning_func => 'partfunc_bad_arg_type');
ERROR:  invalid partitioning function
select add_dimension('test_schema.test_partfunc', 'device', 2, partitioning_func => 'partfunc_bad_multi_arg');
ERROR:  invalid partitioning function
\set ON_ERROR_STOP 1
-- A valid function should work:
select add_dimension('test_schema.test_partfunc', 'device', 2, partitioning_func => 'partfunc_valid');
 add_dimension 
---------------
 
(1 row)

