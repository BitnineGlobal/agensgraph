diff --git a/src/test/regress/expected/aggregates.out b/src/test/regress/expected/aggregates.out
index fa1f5e7..ae63c9f 100644
--- a/src/test/regress/expected/aggregates.out
+++ b/src/test/regress/expected/aggregates.out
@@ -1323,21 +1323,21 @@ select string_agg(a,',') from (values(null),(null)) g(a);
 (1 row)
 
 -- check some implicit casting cases, as per bug #5564
-select string_agg(distinct f1, ',' order by f1) from varchar_tbl;  -- ok
+select string_agg(distinct f1, ',' order by f1) from VARCHAR_TBL;  -- ok
  string_agg 
 ------------
  a,ab,abcd
 (1 row)
 
-select string_agg(distinct f1::text, ',' order by f1) from varchar_tbl;  -- not ok
+select string_agg(distinct f1::text, ',' order by f1) from VARCHAR_TBL;  -- not ok
 ERROR:  in an aggregate with DISTINCT, ORDER BY expressions must appear in argument list
-LINE 1: select string_agg(distinct f1::text, ',' order by f1) from v...
+LINE 1: select string_agg(distinct f1::text, ',' order by f1) from V...
                                                           ^
-select string_agg(distinct f1, ',' order by f1::text) from varchar_tbl;  -- not ok
+select string_agg(distinct f1, ',' order by f1::text) from VARCHAR_TBL;  -- not ok
 ERROR:  in an aggregate with DISTINCT, ORDER BY expressions must appear in argument list
-LINE 1: select string_agg(distinct f1, ',' order by f1::text) from v...
+LINE 1: select string_agg(distinct f1, ',' order by f1::text) from V...
                                                     ^
-select string_agg(distinct f1::text, ',' order by f1::text) from varchar_tbl;  -- ok
+select string_agg(distinct f1::text, ',' order by f1::text) from VARCHAR_TBL;  -- ok
  string_agg 
 ------------
  a,ab,abcd
diff --git a/src/test/regress/expected/alter_table.out b/src/test/regress/expected/alter_table.out
index f931236..a135f6b 100644
--- a/src/test/regress/expected/alter_table.out
+++ b/src/test/regress/expected/alter_table.out
@@ -362,7 +362,7 @@ CREATE FUNCTION boo(int) RETURNS int IMMUTABLE STRICT LANGUAGE plpgsql AS $$ BEG
 INSERT INTO tmp7 VALUES (8, 18);
 ALTER TABLE tmp7 ADD CONSTRAINT identity CHECK (b = boo(b));
 NOTICE:  boo: 18
-ALTER TABLE tmp3 ADD CONSTRAINT IDENTITY check (b = boo(b)) NOT VALID;
+ALTER TABLE tmp3 ADD CONSTRAINT identity check (b = boo(b)) NOT VALID;
 NOTICE:  merging constraint "identity" with inherited definition
 ALTER TABLE tmp3 VALIDATE CONSTRAINT identity;
 NOTICE:  boo: 16
@@ -463,97 +463,97 @@ Inherits: nv_parent
 -- Foreign key adding test with mixed types
 -- Note: these tables are TEMP to avoid name conflicts when this test
 -- is run in parallel with foreign_key.sql.
-CREATE TEMP TABLE PKTABLE (ptest1 int PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
-CREATE TEMP TABLE FKTABLE (ftest1 inet);
+CREATE TEMP TABLE pktable (ptest1 int PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
+CREATE TEMP TABLE fktable (ftest1 inet);
 -- This next should fail, because int=inet does not exist
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: inet and integer.
 -- This should also fail for the same reason, but here we
 -- give the column name
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable(ptest1);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable(ptest1);
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: inet and integer.
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 -- This should succeed, even though they are different types,
 -- because int=int8 exists and is a member of the integer opfamily
-CREATE TEMP TABLE FKTABLE (ftest1 int8);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
+CREATE TEMP TABLE fktable (ftest1 int8);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(43) is not present in table "pktable".
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 -- This should fail, because we'd have to cast numeric to int which is
 -- not an implicit coercion (or use numeric=numeric, but that's not part
 -- of the integer opfamily)
-CREATE TEMP TABLE FKTABLE (ftest1 numeric);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
+CREATE TEMP TABLE fktable (ftest1 numeric);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: numeric and integer.
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- On the other hand, this should work because int implicitly promotes to
 -- numeric, and we allow promotion on the FK side
-CREATE TEMP TABLE PKTABLE (ptest1 numeric PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
-CREATE TEMP TABLE FKTABLE (ftest1 int);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
+CREATE TEMP TABLE pktable (ptest1 numeric PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
+CREATE TEMP TABLE fktable (ftest1 int);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(43) is not present in table "pktable".
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
-CREATE TEMP TABLE PKTABLE (ptest1 int, ptest2 inet,
+DROP TABLE fktable;
+DROP TABLE pktable;
+CREATE TEMP TABLE pktable (ptest1 int, ptest2 inet,
                            PRIMARY KEY(ptest1, ptest2));
 -- This should fail, because we just chose really odd types
-CREATE TEMP TABLE FKTABLE (ftest1 cidr, ftest2 timestamp);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1, ftest2) references pktable;
+CREATE TEMP TABLE fktable (ftest1 cidr, ftest2 timestamp);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1, ftest2) references pktable;
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: cidr and integer.
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 -- Again, so should this...
-CREATE TEMP TABLE FKTABLE (ftest1 cidr, ftest2 timestamp);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1, ftest2)
+CREATE TEMP TABLE fktable (ftest1 cidr, ftest2 timestamp);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1, ftest2)
      references pktable(ptest1, ptest2);
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: cidr and integer.
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 -- This fails because we mixed up the column ordering
-CREATE TEMP TABLE FKTABLE (ftest1 int, ftest2 inet);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1, ftest2)
+CREATE TEMP TABLE fktable (ftest1 int, ftest2 inet);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1, ftest2)
      references pktable(ptest2, ptest1);
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest2" are of incompatible types: integer and inet.
 -- As does this...
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest2, ftest1)
+ALTER TABLE fktable ADD FOREIGN KEY(ftest2, ftest1)
      references pktable(ptest1, ptest2);
 ERROR:  foreign key constraint "fktable_ftest2_fkey" cannot be implemented
 DETAIL:  Key columns "ftest2" and "ptest1" are of incompatible types: inet and integer.
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- Test that ALTER CONSTRAINT updates trigger deferrability properly
-CREATE TEMP TABLE PKTABLE (ptest1 int primary key);
-CREATE TEMP TABLE FKTABLE (ftest1 int);
-ALTER TABLE FKTABLE ADD CONSTRAINT fknd FOREIGN KEY(ftest1) REFERENCES pktable
+CREATE TEMP TABLE pktable (ptest1 int primary key);
+CREATE TEMP TABLE fktable (ftest1 int);
+ALTER TABLE fktable ADD CONSTRAINT fknd FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdd FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ADD CONSTRAINT fkdd FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdi FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ADD CONSTRAINT fkdi FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY IMMEDIATE;
-ALTER TABLE FKTABLE ADD CONSTRAINT fknd2 FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ADD CONSTRAINT fknd2 FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED;
-ALTER TABLE FKTABLE ALTER CONSTRAINT fknd2 NOT DEFERRABLE;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdd2 FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ALTER CONSTRAINT fknd2 NOT DEFERRABLE;
+ALTER TABLE fktable ADD CONSTRAINT fkdd2 FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE;
-ALTER TABLE FKTABLE ALTER CONSTRAINT fkdd2 DEFERRABLE INITIALLY DEFERRED;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdi2 FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ALTER CONSTRAINT fkdd2 DEFERRABLE INITIALLY DEFERRED;
+ALTER TABLE fktable ADD CONSTRAINT fkdi2 FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE;
-ALTER TABLE FKTABLE ALTER CONSTRAINT fkdi2 DEFERRABLE INITIALLY IMMEDIATE;
+ALTER TABLE fktable ALTER CONSTRAINT fkdi2 DEFERRABLE INITIALLY IMMEDIATE;
 SELECT conname, tgfoid::regproc, tgtype, tgdeferrable, tginitdeferred
 FROM pg_trigger JOIN pg_constraint con ON con.oid = tgconstraint
 WHERE tgrelid = 'pktable'::regclass
@@ -1397,7 +1397,7 @@ create table dropColumn (a int, b int, e int);
 create table dropColumnChild (c int) inherits (dropColumn);
 create table dropColumnAnother (d int) inherits (dropColumnChild);
 -- these two should fail
-alter table dropColumnchild drop column a;
+alter table dropColumnChild drop column a;
 ERROR:  cannot drop inherited column "a"
 alter table only dropColumnChild drop column b;
 ERROR:  cannot drop inherited column "b"
@@ -1529,10 +1529,10 @@ ERROR:  column "name" of relation "gc1" does not exist
 -- should work and drop the attribute in all tables
 alter table p2 drop column height;
 -- IF EXISTS test
-create table dropColumnExists ();
-alter table dropColumnExists drop column non_existing; --fail
+create table dropcolumnexists ();
+alter table dropcolumnexists drop column non_existing; --fail
 ERROR:  column "non_existing" of relation "dropcolumnexists" does not exist
-alter table dropColumnExists drop column if exists non_existing; --succeed
+alter table dropcolumnexists drop column if exists non_existing; --succeed
 NOTICE:  column "non_existing" of relation "dropcolumnexists" does not exist, skipping
 select relname, attname, attinhcount, attislocal
 from pg_class join pg_attribute on (pg_class.oid = pg_attribute.attrelid)
diff --git a/src/test/regress/expected/arrays.out b/src/test/regress/expected/arrays.out
index 8c50505..9b5f922 100644
--- a/src/test/regress/expected/arrays.out
+++ b/src/test/regress/expected/arrays.out
@@ -255,13 +255,13 @@ UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';  -- fail, no good with null
 ERROR:  array slice subscript must provide both boundaries
 DETAIL:  When assigning to a slice of an empty array value, slice boundaries must be fully specified.
 -- check with fixed-length-array type, such as point
-SELECT f1[0:1] FROM POINT_TBL;
+SELECT f1[0:1] FROM point_tbl;
 ERROR:  slices of fixed-length arrays not implemented
-SELECT f1[0:] FROM POINT_TBL;
+SELECT f1[0:] FROM point_tbl;
 ERROR:  slices of fixed-length arrays not implemented
-SELECT f1[:1] FROM POINT_TBL;
+SELECT f1[:1] FROM point_tbl;
 ERROR:  slices of fixed-length arrays not implemented
-SELECT f1[:] FROM POINT_TBL;
+SELECT f1[:] FROM point_tbl;
 ERROR:  slices of fixed-length arrays not implemented
 --
 -- test array extension
diff --git a/src/test/regress/expected/bit.out b/src/test/regress/expected/bit.out
index 9c7d202..40ee317 100644
--- a/src/test/regress/expected/bit.out
+++ b/src/test/regress/expected/bit.out
@@ -4,17 +4,17 @@
 --
 -- Build tables for testing
 --
-CREATE TABLE BIT_TABLE(b BIT(11));
-INSERT INTO BIT_TABLE VALUES (B'10'); -- too short
+CREATE TABLE bit_table(b BIT(11));
+INSERT INTO bit_table VALUES (B'10'); -- too short
 ERROR:  bit string length 2 does not match type bit(11)
-INSERT INTO BIT_TABLE VALUES (B'00000000000');
-INSERT INTO BIT_TABLE VALUES (B'11011000000');
-INSERT INTO BIT_TABLE VALUES (B'01010101010');
-INSERT INTO BIT_TABLE VALUES (B'101011111010'); -- too long
+INSERT INTO bit_table VALUES (B'00000000000');
+INSERT INTO bit_table VALUES (B'11011000000');
+INSERT INTO bit_table VALUES (B'01010101010');
+INSERT INTO bit_table VALUES (B'101011111010'); -- too long
 ERROR:  bit string length 12 does not match type bit(11)
---INSERT INTO BIT_TABLE VALUES ('X554');
---INSERT INTO BIT_TABLE VALUES ('X555');
-SELECT * FROM BIT_TABLE;
+--INSERT INTO bit_table VALUES ('X554');
+--INSERT INTO bit_table VALUES ('X555');
+SELECT * FROM bit_table;
       b      
 -------------
  00000000000
@@ -22,16 +22,16 @@ SELECT * FROM BIT_TABLE;
  01010101010
 (3 rows)
 
-CREATE TABLE VARBIT_TABLE(v BIT VARYING(11));
-INSERT INTO VARBIT_TABLE VALUES (B'');
-INSERT INTO VARBIT_TABLE VALUES (B'0');
-INSERT INTO VARBIT_TABLE VALUES (B'010101');
-INSERT INTO VARBIT_TABLE VALUES (B'01010101010');
-INSERT INTO VARBIT_TABLE VALUES (B'101011111010'); -- too long
+CREATE TABLE varbit_table(v BIT VARYING(11));
+INSERT INTO varbit_table VALUES (B'');
+INSERT INTO varbit_table VALUES (B'0');
+INSERT INTO varbit_table VALUES (B'010101');
+INSERT INTO varbit_table VALUES (B'01010101010');
+INSERT INTO varbit_table VALUES (B'101011111010'); -- too long
 ERROR:  bit string too long for type bit varying(11)
---INSERT INTO VARBIT_TABLE VALUES ('X554');
---INSERT INTO VARBIT_TABLE VALUES ('X555');
-SELECT * FROM VARBIT_TABLE;
+--INSERT INTO varbit_table VALUES ('X554');
+--INSERT INTO varbit_table VALUES ('X555');
+SELECT * FROM varbit_table;
       v      
 -------------
  
@@ -42,7 +42,7 @@ SELECT * FROM VARBIT_TABLE;
 
 -- Concatenation
 SELECT v, b, (v || b) AS concat
-       FROM BIT_TABLE, VARBIT_TABLE
+       FROM bit_table, varbit_table
        ORDER BY 3;
       v      |      b      |         concat         
 -------------+-------------+------------------------
@@ -62,7 +62,7 @@ SELECT v, b, (v || b) AS concat
 
 -- Length
 SELECT b, length(b) AS lb
-       FROM BIT_TABLE;
+       FROM bit_table;
       b      | lb 
 -------------+----
  00000000000 | 11
@@ -71,7 +71,7 @@ SELECT b, length(b) AS lb
 (3 rows)
 
 SELECT v, length(v) AS lv
-       FROM VARBIT_TABLE;
+       FROM varbit_table;
       v      | lv 
 -------------+----
              |  0
@@ -85,7 +85,7 @@ SELECT b,
        SUBSTRING(b FROM 2 FOR 4) AS sub_2_4,
        SUBSTRING(b FROM 7 FOR 13) AS sub_7_13,
        SUBSTRING(b FROM 6) AS sub_6
-       FROM BIT_TABLE;
+       FROM bit_table;
       b      | sub_2_4 | sub_7_13 | sub_6  
 -------------+---------+----------+--------
  00000000000 | 0000    | 00000    | 000000
@@ -97,7 +97,7 @@ SELECT v,
        SUBSTRING(v FROM 2 FOR 4) AS sub_2_4,
        SUBSTRING(v FROM 7 FOR 13) AS sub_7_13,
        SUBSTRING(v FROM 6) AS sub_6
-       FROM VARBIT_TABLE;
+       FROM varbit_table;
       v      | sub_2_4 | sub_7_13 | sub_6  
 -------------+---------+----------+--------
              |         |          | 
diff --git a/src/test/regress/expected/case.out b/src/test/regress/expected/case.out
index 09d5516..d14bf59 100644
--- a/src/test/regress/expected/case.out
+++ b/src/test/regress/expected/case.out
@@ -87,7 +87,7 @@ SELECT CASE 1 WHEN 0 THEN 1/0 WHEN 1 THEN 1 ELSE 2/0 END;
 
 -- However we do not currently suppress folding of potentially
 -- reachable subexpressions
-SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM case_tbl;
+SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM CASE_TBL;
 ERROR:  division by zero
 -- Test for cases involving untyped literals in test expression
 SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END;
@@ -215,7 +215,7 @@ SELECT *
  4 |   | 2 | -4
 (2 rows)
 
-SELECT '' AS Five, NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
+SELECT '' AS five, NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
   NULLIF(b.i, 4) AS "NULLIF(b.i,4)"
   FROM CASE_TBL a, CASE2_TBL b;
  five | NULLIF(a.i,b.i) | NULLIF(b.i,4) 
diff --git a/src/test/regress/expected/circle.out b/src/test/regress/expected/circle.out
index 9ba4a04..af6e0d9 100644
--- a/src/test/regress/expected/circle.out
+++ b/src/test/regress/expected/circle.out
@@ -1,27 +1,27 @@
 --
 -- CIRCLE
 --
-CREATE TABLE CIRCLE_TBL (f1 circle);
-INSERT INTO CIRCLE_TBL VALUES ('<(5,1),3>');
-INSERT INTO CIRCLE_TBL VALUES ('<(1,2),100>');
-INSERT INTO CIRCLE_TBL VALUES ('1,3,5');
-INSERT INTO CIRCLE_TBL VALUES ('((1,2),3)');
-INSERT INTO CIRCLE_TBL VALUES ('<(100,200),10>');
-INSERT INTO CIRCLE_TBL VALUES ('<(100,1),115>');
+CREATE TABLE circle_tbl (f1 circle);
+INSERT INTO circle_tbl VALUES ('<(5,1),3>');
+INSERT INTO circle_tbl VALUES ('<(1,2),100>');
+INSERT INTO circle_tbl VALUES ('1,3,5');
+INSERT INTO circle_tbl VALUES ('((1,2),3)');
+INSERT INTO circle_tbl VALUES ('<(100,200),10>');
+INSERT INTO circle_tbl VALUES ('<(100,1),115>');
 -- bad values
-INSERT INTO CIRCLE_TBL VALUES ('<(-100,0),-100>');
+INSERT INTO circle_tbl VALUES ('<(-100,0),-100>');
 ERROR:  invalid input syntax for type circle: "<(-100,0),-100>"
-LINE 1: INSERT INTO CIRCLE_TBL VALUES ('<(-100,0),-100>');
+LINE 1: INSERT INTO circle_tbl VALUES ('<(-100,0),-100>');
                                        ^
-INSERT INTO CIRCLE_TBL VALUES ('1abc,3,5');
+INSERT INTO circle_tbl VALUES ('1abc,3,5');
 ERROR:  invalid input syntax for type circle: "1abc,3,5"
-LINE 1: INSERT INTO CIRCLE_TBL VALUES ('1abc,3,5');
+LINE 1: INSERT INTO circle_tbl VALUES ('1abc,3,5');
                                        ^
-INSERT INTO CIRCLE_TBL VALUES ('(3,(1,2),3)');
+INSERT INTO circle_tbl VALUES ('(3,(1,2),3)');
 ERROR:  invalid input syntax for type circle: "(3,(1,2),3)"
-LINE 1: INSERT INTO CIRCLE_TBL VALUES ('(3,(1,2),3)');
+LINE 1: INSERT INTO circle_tbl VALUES ('(3,(1,2),3)');
                                        ^
-SELECT * FROM CIRCLE_TBL;
+SELECT * FROM circle_tbl;
        f1       
 ----------------
  <(5,1),3>
@@ -33,7 +33,7 @@ SELECT * FROM CIRCLE_TBL;
 (6 rows)
 
 SELECT '' AS six, center(f1) AS center
-  FROM CIRCLE_TBL;
+  FROM circle_tbl;
  six |  center   
 -----+-----------
      | (5,1)
@@ -45,7 +45,7 @@ SELECT '' AS six, center(f1) AS center
 (6 rows)
 
 SELECT '' AS six, radius(f1) AS radius
-  FROM CIRCLE_TBL;
+  FROM circle_tbl;
  six | radius 
 -----+--------
      |      3
@@ -57,7 +57,7 @@ SELECT '' AS six, radius(f1) AS radius
 (6 rows)
 
 SELECT '' AS six, diameter(f1) AS diameter
-  FROM CIRCLE_TBL;
+  FROM circle_tbl;
  six | diameter 
 -----+----------
      |        6
@@ -68,14 +68,14 @@ SELECT '' AS six, diameter(f1) AS diameter
      |      230
 (6 rows)
 
-SELECT '' AS two, f1 FROM CIRCLE_TBL WHERE radius(f1) < 5;
+SELECT '' AS two, f1 FROM circle_tbl WHERE radius(f1) < 5;
  two |    f1     
 -----+-----------
      | <(5,1),3>
      | <(1,2),3>
 (2 rows)
 
-SELECT '' AS four, f1 FROM CIRCLE_TBL WHERE diameter(f1) >= 10;
+SELECT '' AS four, f1 FROM circle_tbl WHERE diameter(f1) >= 10;
  four |       f1       
 ------+----------------
       | <(1,2),100>
@@ -85,7 +85,7 @@ SELECT '' AS four, f1 FROM CIRCLE_TBL WHERE diameter(f1) >= 10;
 (4 rows)
 
 SELECT '' as five, c1.f1 AS one, c2.f1 AS two, (c1.f1 <-> c2.f1) AS distance
-  FROM CIRCLE_TBL c1, CIRCLE_TBL c2
+  FROM circle_tbl c1, circle_tbl c2
   WHERE (c1.f1 < c2.f1) AND ((c1.f1 <-> c2.f1) > 0)
   ORDER BY distance, area(c1.f1), area(c2.f1);
  five |      one       |      two       |     distance     
diff --git a/src/test/regress/expected/create_index.out b/src/test/regress/expected/create_index.out
index 5bb3ea8..49f961f 100644
--- a/src/test/regress/expected/create_index.out
+++ b/src/test/regress/expected/create_index.out
@@ -57,7 +57,7 @@ CREATE INDEX onek2_stu1_prtl ON onek2 USING btree(stringu1 name_ops)
 CREATE INDEX grect2ind ON fast_emp4000 USING gist (home_base);
 CREATE INDEX gpolygonind ON polygon_tbl USING gist (f1);
 CREATE INDEX gcircleind ON circle_tbl USING gist (f1);
-INSERT INTO POINT_TBL(f1) VALUES (NULL);
+INSERT INTO point_tbl(f1) VALUES (NULL);
 CREATE INDEX gpointind ON point_tbl USING gist (f1);
 CREATE TEMP TABLE gpolygon_tbl AS
     SELECT polygon(home_base) AS f1 FROM slow_emp4000;
@@ -2329,7 +2329,7 @@ CREATE INDEX gin_relopts_test ON array_index_op_test USING gin (i)
 --------+---------+------------+---------
  i      | integer | i          | plain
 gin, for table "public.array_index_op_test"
-Options: fastupdate=on, gin_pending_list_limit=128
+Options: FASTUPDATE=on, GIN_PENDING_LIST_LIMIT=128
 
 --
 -- HASH
diff --git a/src/test/regress/expected/create_operator.out b/src/test/regress/expected/create_operator.out
index 3a216c2..5267adf 100644
--- a/src/test/regress/expected/create_operator.out
+++ b/src/test/regress/expected/create_operator.out
@@ -41,7 +41,7 @@ LINE 1: CREATE OPERATOR => (
 BEGIN TRANSACTION;
 CREATE ROLE regress_rol_op1;
 CREATE SCHEMA schema_op1;
-GRANT USAGE ON SCHEMA schema_op1 TO PUBLIC;
+GRANT USAGE ON SCHEMA schema_op1 TO public;
 REVOKE USAGE ON SCHEMA schema_op1 FROM regress_rol_op1;
 SET ROLE regress_rol_op1;
 CREATE OPERATOR schema_op1.#*# (
@@ -109,7 +109,7 @@ RETURNS int8 AS $$
     SELECT NULL::int8;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE USAGE ON TYPE type_op3 FROM regress_rol_op3;
-REVOKE USAGE ON TYPE type_op3 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
+REVOKE USAGE ON TYPE type_op3 FROM public;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via public
 SET ROLE regress_rol_op3;
 CREATE OPERATOR #*# (
    leftarg = type_op3,
@@ -127,7 +127,7 @@ RETURNS int8 AS $$
     SELECT NULL::int8;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE USAGE ON TYPE type_op4 FROM regress_rol_op4;
-REVOKE USAGE ON TYPE type_op4 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
+REVOKE USAGE ON TYPE type_op4 FROM public;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via public
 SET ROLE regress_rol_op4;
 CREATE OPERATOR #*# (
    leftarg = int8,
@@ -145,7 +145,7 @@ RETURNS int8 AS $$
     SELECT NULL::int8;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM regress_rol_op5;
-REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM PUBLIC;-- Need to do this so that regress_rol_op3 is not allowed EXECUTE via PUBLIC
+REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM public;-- Need to do this so that regress_rol_op3 is not allowed EXECUTE via public
 SET ROLE regress_rol_op5;
 CREATE OPERATOR #*# (
    leftarg = int8,
@@ -163,7 +163,7 @@ RETURNS type_op6 AS $$
     SELECT NULL::type_op6;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE USAGE ON TYPE type_op6 FROM regress_rol_op6;
-REVOKE USAGE ON TYPE type_op6 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
+REVOKE USAGE ON TYPE type_op6 FROM public;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via public
 SET ROLE regress_rol_op6;
 CREATE OPERATOR #*# (
    leftarg = int8,
diff --git a/src/test/regress/expected/create_view.out b/src/test/regress/expected/create_view.out
index b1c3cff..fc79713 100644
--- a/src/test/regress/expected/create_view.out
+++ b/src/test/regress/expected/create_view.out
@@ -220,7 +220,7 @@ CREATE   VIEW  pubview AS SELECT * FROM tbl1 WHERE tbl1.a
 BETWEEN (SELECT d FROM tbl2 WHERE c = 1) AND (SELECT e FROM tbl3 WHERE f = 2)
 AND EXISTS (SELECT g FROM tbl4 LEFT JOIN tbl3 ON tbl4.h = tbl3.f);
 SELECT count(*) FROM pg_class where relname = 'pubview'
-AND relnamespace IN (SELECT OID FROM pg_namespace WHERE nspname = 'testviewschm2');
+AND relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname = 'testviewschm2');
  count 
 -------
      1
@@ -233,7 +233,7 @@ AND EXISTS (SELECT g FROM tbl4 LEFT JOIN tbl3 ON tbl4.h = tbl3.f)
 AND NOT EXISTS (SELECT g FROM tbl4 LEFT JOIN tmptbl ON tbl4.h = tmptbl.j);
 NOTICE:  view "mytempview" will be a temporary view
 SELECT count(*) FROM pg_class where relname LIKE 'mytempview'
-And relnamespace IN (SELECT OID FROM pg_namespace WHERE nspname LIKE 'pg_temp%');
+And relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname LIKE 'pg_temp%');
  count 
 -------
      1
diff --git a/src/test/regress/expected/date.out b/src/test/regress/expected/date.out
index 418b146..2cd5dca 100644
--- a/src/test/regress/expected/date.out
+++ b/src/test/regress/expected/date.out
@@ -998,7 +998,7 @@ SELECT EXTRACT(CENTURY FROM DATE '2001-01-01');    -- 21
         21
 (1 row)
 
-SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS True;     -- true
+SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS true;     -- true
  true 
 ------
  t
@@ -1099,7 +1099,7 @@ SELECT EXTRACT(DECADE FROM DATE '0012-12-31 BC'); --  -2
 -- some other types:
 --
 -- on a timestamp.
-SELECT EXTRACT(CENTURY FROM NOW())>=21 AS True;       -- true
+SELECT EXTRACT(CENTURY FROM NOW())>=21 AS true;       -- true
  true 
 ------
  t
diff --git a/src/test/regress/expected/float8.out b/src/test/regress/expected/float8.out
index 20c985e..e22d733 100644
--- a/src/test/regress/expected/float8.out
+++ b/src/test/regress/expected/float8.out
@@ -1,12 +1,12 @@
 --
 -- FLOAT8
 --
-CREATE TABLE FLOAT8_TBL(f1 float8);
-INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('1004.30  ');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e+200');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e-200');
+CREATE TABLE float8_tbl(f1 float8);
+INSERT INTO float8_tbl(f1) VALUES ('    0.0   ');
+INSERT INTO float8_tbl(f1) VALUES ('1004.30  ');
+INSERT INTO float8_tbl(f1) VALUES ('   -34.84');
+INSERT INTO float8_tbl(f1) VALUES ('1.2345678901234e+200');
+INSERT INTO float8_tbl(f1) VALUES ('1.2345678901234e-200');
 -- test for underflow and overflow handling
 SELECT '10e400'::float8;
 ERROR:  "10e400" is out of range for type double precision
@@ -25,37 +25,37 @@ ERROR:  "-10e-400" is out of range for type double precision
 LINE 1: SELECT '-10e-400'::float8;
                ^
 -- bad input
-INSERT INTO FLOAT8_TBL(f1) VALUES ('');
+INSERT INTO float8_tbl(f1) VALUES ('');
 ERROR:  invalid input syntax for type double precision: ""
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
+INSERT INTO float8_tbl(f1) VALUES ('     ');
 ERROR:  invalid input syntax for type double precision: "     "
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('     ');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
+INSERT INTO float8_tbl(f1) VALUES ('xyz');
 ERROR:  invalid input syntax for type double precision: "xyz"
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('xyz');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
+INSERT INTO float8_tbl(f1) VALUES ('5.0.0');
 ERROR:  invalid input syntax for type double precision: "5.0.0"
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('5.0.0');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
+INSERT INTO float8_tbl(f1) VALUES ('5 . 0');
 ERROR:  invalid input syntax for type double precision: "5 . 0"
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('5 . 0');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
+INSERT INTO float8_tbl(f1) VALUES ('5.   0');
 ERROR:  invalid input syntax for type double precision: "5.   0"
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('5.   0');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
+INSERT INTO float8_tbl(f1) VALUES ('    - 3');
 ERROR:  invalid input syntax for type double precision: "    - 3"
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('    - 3');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
+INSERT INTO float8_tbl(f1) VALUES ('123           5');
 ERROR:  invalid input syntax for type double precision: "123           5"
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('123           5');
                                            ^
 -- special inputs
 SELECT 'NaN'::float8;
@@ -125,7 +125,7 @@ SELECT 'nan'::numeric::float8;
     NaN
 (1 row)
 
-SELECT '' AS five, * FROM FLOAT8_TBL;
+SELECT '' AS five, * FROM float8_tbl;
  five |          f1          
 ------+----------------------
       |                    0
@@ -135,7 +135,7 @@ SELECT '' AS five, * FROM FLOAT8_TBL;
       | 1.2345678901234e-200
 (5 rows)
 
-SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3';
+SELECT '' AS four, f.* FROM float8_tbl f WHERE f.f1 <> '1004.3';
  four |          f1          
 ------+----------------------
       |                    0
@@ -144,13 +144,13 @@ SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3';
       | 1.2345678901234e-200
 (4 rows)
 
-SELECT '' AS one, f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3';
+SELECT '' AS one, f.* FROM float8_tbl f WHERE f.f1 = '1004.3';
  one |   f1   
 -----+--------
      | 1004.3
 (1 row)
 
-SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1;
+SELECT '' AS three, f.* FROM float8_tbl f WHERE '1004.3' > f.f1;
  three |          f1          
 -------+----------------------
        |                    0
@@ -158,7 +158,7 @@ SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1;
        | 1.2345678901234e-200
 (3 rows)
 
-SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3';
+SELECT '' AS three, f.* FROM float8_tbl f WHERE  f.f1 < '1004.3';
  three |          f1          
 -------+----------------------
        |                    0
@@ -166,7 +166,7 @@ SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3';
        | 1.2345678901234e-200
 (3 rows)
 
-SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1;
+SELECT '' AS four, f.* FROM float8_tbl f WHERE '1004.3' >= f.f1;
  four |          f1          
 ------+----------------------
       |                    0
@@ -175,7 +175,7 @@ SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1;
       | 1.2345678901234e-200
 (4 rows)
 
-SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3';
+SELECT '' AS four, f.* FROM float8_tbl f WHERE  f.f1 <= '1004.3';
  four |          f1          
 ------+----------------------
       |                    0
@@ -185,7 +185,7 @@ SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3';
 (4 rows)
 
 SELECT '' AS three, f.f1, f.f1 * '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
  three |          f1          |           x           
 -------+----------------------+-----------------------
@@ -195,7 +195,7 @@ SELECT '' AS three, f.f1, f.f1 * '-10' AS x
 (3 rows)
 
 SELECT '' AS three, f.f1, f.f1 + '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
  three |          f1          |          x           
 -------+----------------------+----------------------
@@ -205,7 +205,7 @@ SELECT '' AS three, f.f1, f.f1 + '-10' AS x
 (3 rows)
 
 SELECT '' AS three, f.f1, f.f1 / '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
  three |          f1          |           x           
 -------+----------------------+-----------------------
@@ -215,7 +215,7 @@ SELECT '' AS three, f.f1, f.f1 / '-10' AS x
 (3 rows)
 
 SELECT '' AS three, f.f1, f.f1 - '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
  three |          f1          |          x           
 -------+----------------------+----------------------
@@ -225,7 +225,7 @@ SELECT '' AS three, f.f1, f.f1 - '-10' AS x
 (3 rows)
 
 SELECT '' AS one, f.f1 ^ '2.0' AS square_f1
-   FROM FLOAT8_TBL f where f.f1 = '1004.3';
+   FROM float8_tbl f where f.f1 = '1004.3';
  one | square_f1  
 -----+------------
      | 1008618.49
@@ -233,7 +233,7 @@ SELECT '' AS one, f.f1 ^ '2.0' AS square_f1
 
 -- absolute value
 SELECT '' AS five, f.f1, @f.f1 AS abs_f1
-   FROM FLOAT8_TBL f;
+   FROM float8_tbl f;
  five |          f1          |        abs_f1        
 ------+----------------------+----------------------
       |                    0 |                    0
@@ -245,7 +245,7 @@ SELECT '' AS five, f.f1, @f.f1 AS abs_f1
 
 -- truncate
 SELECT '' AS five, f.f1, trunc(f.f1) AS trunc_f1
-   FROM FLOAT8_TBL f;
+   FROM float8_tbl f;
  five |          f1          |       trunc_f1       
 ------+----------------------+----------------------
       |                    0 |                    0
@@ -257,7 +257,7 @@ SELECT '' AS five, f.f1, trunc(f.f1) AS trunc_f1
 
 -- round
 SELECT '' AS five, f.f1, round(f.f1) AS round_f1
-   FROM FLOAT8_TBL f;
+   FROM float8_tbl f;
  five |          f1          |       round_f1       
 ------+----------------------+----------------------
       |                    0 |                    0
@@ -324,7 +324,7 @@ SELECT |/ float8 '64' AS eight;
 (1 row)
 
 SELECT '' AS three, f.f1, |/f.f1 AS sqrt_f1
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
  three |          f1          |        sqrt_f1        
 -------+----------------------+-----------------------
@@ -342,7 +342,7 @@ SELECT power(float8 '144', float8 '0.5');
 
 -- take exp of ln(f.f1)
 SELECT '' AS three, f.f1, exp(ln(f.f1)) AS exp_ln_f1
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
  three |          f1          |       exp_ln_f1       
 -------+----------------------+-----------------------
@@ -358,7 +358,7 @@ SELECT ||/ float8 '27' AS three;
      3
 (1 row)
 
-SELECT '' AS five, f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f;
+SELECT '' AS five, f.f1, ||/f.f1 AS cbrt_f1 FROM float8_tbl f;
  five |          f1          |       cbrt_f1        
 ------+----------------------+----------------------
       |                    0 |                    0
@@ -368,7 +368,7 @@ SELECT '' AS five, f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f;
       | 1.2345678901234e-200 |  2.3112042409018e-67
 (5 rows)
 
-SELECT '' AS five, * FROM FLOAT8_TBL;
+SELECT '' AS five, * FROM float8_tbl;
  five |          f1          
 ------+----------------------
       |                    0
@@ -378,12 +378,12 @@ SELECT '' AS five, * FROM FLOAT8_TBL;
       | 1.2345678901234e-200
 (5 rows)
 
-UPDATE FLOAT8_TBL
-   SET f1 = FLOAT8_TBL.f1 * '-1'
-   WHERE FLOAT8_TBL.f1 > '0.0';
-SELECT '' AS bad, f.f1 * '1e200' from FLOAT8_TBL f;
+UPDATE float8_tbl
+   SET f1 = float8_tbl.f1 * '-1'
+   WHERE float8_tbl.f1 > '0.0';
+SELECT '' AS bad, f.f1 * '1e200' from float8_tbl f;
 ERROR:  value out of range: overflow
-SELECT '' AS bad, f.f1 ^ '1e200' from FLOAT8_TBL f;
+SELECT '' AS bad, f.f1 ^ '1e200' from float8_tbl f;
 ERROR:  value out of range: overflow
 SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;
  ?column? 
@@ -391,15 +391,15 @@ SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;
         2
 (1 row)
 
-SELECT '' AS bad, ln(f.f1) from FLOAT8_TBL f where f.f1 = '0.0' ;
+SELECT '' AS bad, ln(f.f1) from float8_tbl f where f.f1 = '0.0' ;
 ERROR:  cannot take logarithm of zero
-SELECT '' AS bad, ln(f.f1) from FLOAT8_TBL f where f.f1 < '0.0' ;
+SELECT '' AS bad, ln(f.f1) from float8_tbl f where f.f1 < '0.0' ;
 ERROR:  cannot take logarithm of a negative number
-SELECT '' AS bad, exp(f.f1) from FLOAT8_TBL f;
+SELECT '' AS bad, exp(f.f1) from float8_tbl f;
 ERROR:  value out of range: underflow
-SELECT '' AS bad, f.f1 / '0.0' from FLOAT8_TBL f;
+SELECT '' AS bad, f.f1 / '0.0' from float8_tbl f;
 ERROR:  division by zero
-SELECT '' AS five, * FROM FLOAT8_TBL;
+SELECT '' AS five, * FROM float8_tbl;
  five |          f1           
 ------+-----------------------
       |                     0
@@ -410,31 +410,31 @@ SELECT '' AS five, * FROM FLOAT8_TBL;
 (5 rows)
 
 -- test for over- and underflow
-INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
+INSERT INTO float8_tbl(f1) VALUES ('10e400');
 ERROR:  "10e400" is out of range for type double precision
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('10e400');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
+INSERT INTO float8_tbl(f1) VALUES ('-10e400');
 ERROR:  "-10e400" is out of range for type double precision
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('-10e400');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
+INSERT INTO float8_tbl(f1) VALUES ('10e-400');
 ERROR:  "10e-400" is out of range for type double precision
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('10e-400');
                                            ^
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
+INSERT INTO float8_tbl(f1) VALUES ('-10e-400');
 ERROR:  "-10e-400" is out of range for type double precision
-LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
+LINE 1: INSERT INTO float8_tbl(f1) VALUES ('-10e-400');
                                            ^
 -- maintain external table consistency across platforms
 -- delete all values and reinsert well-behaved ones
-DELETE FROM FLOAT8_TBL;
-INSERT INTO FLOAT8_TBL(f1) VALUES ('0.0');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-34.84');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-1004.30');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e+200');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e-200');
-SELECT '' AS five, * FROM FLOAT8_TBL;
+DELETE FROM float8_tbl;
+INSERT INTO float8_tbl(f1) VALUES ('0.0');
+INSERT INTO float8_tbl(f1) VALUES ('-34.84');
+INSERT INTO float8_tbl(f1) VALUES ('-1004.30');
+INSERT INTO float8_tbl(f1) VALUES ('-1.2345678901234e+200');
+INSERT INTO float8_tbl(f1) VALUES ('-1.2345678901234e-200');
+SELECT '' AS five, * FROM float8_tbl;
  five |          f1           
 ------+-----------------------
       |                     0
diff --git a/src/test/regress/expected/foreign_key.out b/src/test/regress/expected/foreign_key.out
index bff7988..1b577fc 100644
--- a/src/test/regress/expected/foreign_key.out
+++ b/src/test/regress/expected/foreign_key.out
@@ -5,25 +5,25 @@
 --
 -- First test, check and cascade
 --
-CREATE TABLE PKTABLE ( ptest1 int PRIMARY KEY, ptest2 text );
-CREATE TABLE FKTABLE ( ftest1 int REFERENCES PKTABLE MATCH FULL ON DELETE CASCADE ON UPDATE CASCADE, ftest2 int );
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 'Test1');
-INSERT INTO PKTABLE VALUES (2, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 'Test5');
+CREATE TABLE pktable ( ptest1 int PRIMARY KEY, ptest2 text );
+CREATE TABLE fktable ( ftest1 int REFERENCES pktable MATCH FULL ON DELETE CASCADE ON UPDATE CASCADE, ftest2 int );
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 'Test1');
+INSERT INTO pktable VALUES (2, 'Test2');
+INSERT INTO pktable VALUES (3, 'Test3');
+INSERT INTO pktable VALUES (4, 'Test4');
+INSERT INTO pktable VALUES (5, 'Test5');
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2);
-INSERT INTO FKTABLE VALUES (2, 3);
-INSERT INTO FKTABLE VALUES (3, 4);
-INSERT INTO FKTABLE VALUES (NULL, 1);
+INSERT INTO fktable VALUES (1, 2);
+INSERT INTO fktable VALUES (2, 3);
+INSERT INTO fktable VALUES (3, 4);
+INSERT INTO fktable VALUES (NULL, 1);
 -- Insert a failed row into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2);
+INSERT INTO fktable VALUES (100, 2);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(100) is not present in table "pktable".
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
  ftest1 | ftest2 
 --------+--------
       1 |      2
@@ -33,9 +33,9 @@ SELECT * FROM FKTABLE;
 (4 rows)
 
 -- Delete a row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=1;
--- Check FKTABLE for removal of matched row
-SELECT * FROM FKTABLE;
+DELETE FROM pktable WHERE ptest1=1;
+-- Check fktable for removal of matched row
+SELECT * FROM fktable;
  ftest1 | ftest2 
 --------+--------
       2 |      3
@@ -44,9 +44,9 @@ SELECT * FROM FKTABLE;
 (3 rows)
 
 -- Update a row from PK TABLE
-UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
--- Check FKTABLE for update of matched row
-SELECT * FROM FKTABLE;
+UPDATE pktable SET ptest1=1 WHERE ptest1=2;
+-- Check fktable for update of matched row
+SELECT * FROM fktable;
  ftest1 | ftest2 
 --------+--------
       3 |      4
@@ -54,47 +54,47 @@ SELECT * FROM FKTABLE;
       1 |      3
 (3 rows)
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 --
 -- check set NULL and table constraint on multiple columns
 --
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
-CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, CONSTRAINT constrname FOREIGN KEY(ftest1, ftest2)
-                       REFERENCES PKTABLE MATCH FULL ON DELETE SET NULL ON UPDATE SET NULL);
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
+CREATE TABLE fktable ( ftest1 int, ftest2 int, ftest3 int, CONSTRAINT constrname FOREIGN KEY(ftest1, ftest2)
+                       REFERENCES pktable MATCH FULL ON DELETE SET NULL ON UPDATE SET NULL);
 -- Test comments
-COMMENT ON CONSTRAINT constrname_wrong ON FKTABLE IS 'fk constraint comment';
+COMMENT ON CONSTRAINT constrname_wrong ON fktable IS 'fk constraint comment';
 ERROR:  constraint "constrname_wrong" for table "fktable" does not exist
-COMMENT ON CONSTRAINT constrname ON FKTABLE IS 'fk constraint comment';
-COMMENT ON CONSTRAINT constrname ON FKTABLE IS NULL;
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 2, 'Test1');
-INSERT INTO PKTABLE VALUES (1, 3, 'Test1-2');
-INSERT INTO PKTABLE VALUES (2, 4, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 6, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 8, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 10, 'Test5');
+COMMENT ON CONSTRAINT constrname ON fktable IS 'fk constraint comment';
+COMMENT ON CONSTRAINT constrname ON fktable IS NULL;
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 2, 'Test1');
+INSERT INTO pktable VALUES (1, 3, 'Test1-2');
+INSERT INTO pktable VALUES (2, 4, 'Test2');
+INSERT INTO pktable VALUES (3, 6, 'Test3');
+INSERT INTO pktable VALUES (4, 8, 'Test4');
+INSERT INTO pktable VALUES (5, 10, 'Test5');
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2, 4);
-INSERT INTO FKTABLE VALUES (1, 3, 5);
-INSERT INTO FKTABLE VALUES (2, 4, 8);
-INSERT INTO FKTABLE VALUES (3, 6, 12);
-INSERT INTO FKTABLE VALUES (NULL, NULL, 0);
+INSERT INTO fktable VALUES (1, 2, 4);
+INSERT INTO fktable VALUES (1, 3, 5);
+INSERT INTO fktable VALUES (2, 4, 8);
+INSERT INTO fktable VALUES (3, 6, 12);
+INSERT INTO fktable VALUES (NULL, NULL, 0);
 -- Insert failed rows into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2, 4);
+INSERT INTO fktable VALUES (100, 2, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
 DETAIL:  Key (ftest1, ftest2)=(100, 2) is not present in table "pktable".
-INSERT INTO FKTABLE VALUES (2, 2, 4);
+INSERT INTO fktable VALUES (2, 2, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
 DETAIL:  Key (ftest1, ftest2)=(2, 2) is not present in table "pktable".
-INSERT INTO FKTABLE VALUES (NULL, 2, 4);
+INSERT INTO fktable VALUES (NULL, 2, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
 DETAIL:  MATCH FULL does not allow mixing of null and nonnull key values.
-INSERT INTO FKTABLE VALUES (1, NULL, 4);
+INSERT INTO fktable VALUES (1, NULL, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
 DETAIL:  MATCH FULL does not allow mixing of null and nonnull key values.
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      2 |      4
@@ -105,9 +105,9 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- Delete a row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2;
--- Check FKTABLE for removal of matched row
-SELECT * FROM FKTABLE;
+DELETE FROM pktable WHERE ptest1=1 and ptest2=2;
+-- Check fktable for removal of matched row
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      3 |      5
@@ -118,9 +118,9 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- Delete another row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10;
--- Check FKTABLE (should be no change)
-SELECT * FROM FKTABLE;
+DELETE FROM pktable WHERE ptest1=5 and ptest2=10;
+-- Check fktable (should be no change)
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      3 |      5
@@ -131,9 +131,9 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- Update a row from PK TABLE
-UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
--- Check FKTABLE for update of matched row
-SELECT * FROM FKTABLE;
+UPDATE pktable SET ptest1=1 WHERE ptest1=2;
+-- Check fktable for update of matched row
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      3 |      5
@@ -144,9 +144,9 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- Try altering the column type where foreign keys are involved
-ALTER TABLE PKTABLE ALTER COLUMN ptest1 TYPE bigint;
-ALTER TABLE FKTABLE ALTER COLUMN ftest1 TYPE bigint;
-SELECT * FROM PKTABLE;
+ALTER TABLE pktable ALTER COLUMN ptest1 TYPE bigint;
+ALTER TABLE fktable ALTER COLUMN ftest1 TYPE bigint;
+SELECT * FROM pktable;
  ptest1 | ptest2 | ptest3  
 --------+--------+---------
       1 |      3 | Test1-2
@@ -155,7 +155,7 @@ SELECT * FROM PKTABLE;
       1 |      4 | Test2
 (4 rows)
 
-SELECT * FROM FKTABLE;
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      3 |      5
@@ -165,45 +165,45 @@ SELECT * FROM FKTABLE;
         |        |      8
 (5 rows)
 
-DROP TABLE PKTABLE CASCADE;
+DROP TABLE pktable CASCADE;
 NOTICE:  drop cascades to constraint constrname on table fktable
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 --
 -- check set default and table constraint on multiple columns
 --
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
-CREATE TABLE FKTABLE ( ftest1 int DEFAULT -1, ftest2 int DEFAULT -2, ftest3 int, CONSTRAINT constrname2 FOREIGN KEY(ftest1, ftest2)
-                       REFERENCES PKTABLE MATCH FULL ON DELETE SET DEFAULT ON UPDATE SET DEFAULT);
--- Insert a value in PKTABLE for default
-INSERT INTO PKTABLE VALUES (-1, -2, 'The Default!');
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 2, 'Test1');
-INSERT INTO PKTABLE VALUES (1, 3, 'Test1-2');
-INSERT INTO PKTABLE VALUES (2, 4, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 6, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 8, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 10, 'Test5');
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
+CREATE TABLE fktable ( ftest1 int DEFAULT -1, ftest2 int DEFAULT -2, ftest3 int, CONSTRAINT constrname2 FOREIGN KEY(ftest1, ftest2)
+                       REFERENCES pktable MATCH FULL ON DELETE SET DEFAULT ON UPDATE SET DEFAULT);
+-- Insert a value in pktable for default
+INSERT INTO pktable VALUES (-1, -2, 'The Default!');
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 2, 'Test1');
+INSERT INTO pktable VALUES (1, 3, 'Test1-2');
+INSERT INTO pktable VALUES (2, 4, 'Test2');
+INSERT INTO pktable VALUES (3, 6, 'Test3');
+INSERT INTO pktable VALUES (4, 8, 'Test4');
+INSERT INTO pktable VALUES (5, 10, 'Test5');
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2, 4);
-INSERT INTO FKTABLE VALUES (1, 3, 5);
-INSERT INTO FKTABLE VALUES (2, 4, 8);
-INSERT INTO FKTABLE VALUES (3, 6, 12);
-INSERT INTO FKTABLE VALUES (NULL, NULL, 0);
+INSERT INTO fktable VALUES (1, 2, 4);
+INSERT INTO fktable VALUES (1, 3, 5);
+INSERT INTO fktable VALUES (2, 4, 8);
+INSERT INTO fktable VALUES (3, 6, 12);
+INSERT INTO fktable VALUES (NULL, NULL, 0);
 -- Insert failed rows into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2, 4);
+INSERT INTO fktable VALUES (100, 2, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname2"
 DETAIL:  Key (ftest1, ftest2)=(100, 2) is not present in table "pktable".
-INSERT INTO FKTABLE VALUES (2, 2, 4);
+INSERT INTO fktable VALUES (2, 2, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname2"
 DETAIL:  Key (ftest1, ftest2)=(2, 2) is not present in table "pktable".
-INSERT INTO FKTABLE VALUES (NULL, 2, 4);
+INSERT INTO fktable VALUES (NULL, 2, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname2"
 DETAIL:  MATCH FULL does not allow mixing of null and nonnull key values.
-INSERT INTO FKTABLE VALUES (1, NULL, 4);
+INSERT INTO fktable VALUES (1, NULL, 4);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname2"
 DETAIL:  MATCH FULL does not allow mixing of null and nonnull key values.
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      2 |      4
@@ -214,9 +214,9 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- Delete a row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2;
--- Check FKTABLE to check for removal
-SELECT * FROM FKTABLE;
+DELETE FROM pktable WHERE ptest1=1 and ptest2=2;
+-- Check fktable to check for removal
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      3 |      5
@@ -227,9 +227,9 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- Delete another row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10;
--- Check FKTABLE (should be no change)
-SELECT * FROM FKTABLE;
+DELETE FROM pktable WHERE ptest1=5 and ptest2=10;
+-- Check fktable (should be no change)
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      3 |      5
@@ -240,9 +240,9 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- Update a row from PK TABLE
-UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
--- Check FKTABLE for update of matched row
-SELECT * FROM FKTABLE;
+UPDATE pktable SET ptest1=1 WHERE ptest1=2;
+-- Check fktable for update of matched row
+SELECT * FROM fktable;
  ftest1 | ftest2 | ftest3 
 --------+--------+--------
       1 |      3 |      5
@@ -253,35 +253,35 @@ SELECT * FROM FKTABLE;
 (5 rows)
 
 -- this should fail for lack of CASCADE
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 ERROR:  cannot drop table pktable because other objects depend on it
 DETAIL:  constraint constrname2 on table fktable depends on table pktable
 HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-DROP TABLE PKTABLE CASCADE;
+DROP TABLE pktable CASCADE;
 NOTICE:  drop cascades to constraint constrname2 on table fktable
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 --
 -- First test, check with no on delete or on update
 --
-CREATE TABLE PKTABLE ( ptest1 int PRIMARY KEY, ptest2 text );
-CREATE TABLE FKTABLE ( ftest1 int REFERENCES PKTABLE MATCH FULL, ftest2 int );
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 'Test1');
-INSERT INTO PKTABLE VALUES (2, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 'Test5');
+CREATE TABLE pktable ( ptest1 int PRIMARY KEY, ptest2 text );
+CREATE TABLE fktable ( ftest1 int REFERENCES pktable MATCH FULL, ftest2 int );
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 'Test1');
+INSERT INTO pktable VALUES (2, 'Test2');
+INSERT INTO pktable VALUES (3, 'Test3');
+INSERT INTO pktable VALUES (4, 'Test4');
+INSERT INTO pktable VALUES (5, 'Test5');
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2);
-INSERT INTO FKTABLE VALUES (2, 3);
-INSERT INTO FKTABLE VALUES (3, 4);
-INSERT INTO FKTABLE VALUES (NULL, 1);
+INSERT INTO fktable VALUES (1, 2);
+INSERT INTO fktable VALUES (2, 3);
+INSERT INTO fktable VALUES (3, 4);
+INSERT INTO fktable VALUES (NULL, 1);
 -- Insert a failed row into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2);
+INSERT INTO fktable VALUES (100, 2);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(100) is not present in table "pktable".
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
  ftest1 | ftest2 
 --------+--------
       1 |      2
@@ -290,8 +290,8 @@ SELECT * FROM FKTABLE;
         |      1
 (4 rows)
 
--- Check PKTABLE
-SELECT * FROM PKTABLE;
+-- Check pktable
+SELECT * FROM pktable;
  ptest1 | ptest2 
 --------+--------
       1 | Test1
@@ -302,13 +302,13 @@ SELECT * FROM PKTABLE;
 (5 rows)
 
 -- Delete a row from PK TABLE (should fail)
-DELETE FROM PKTABLE WHERE ptest1=1;
+DELETE FROM pktable WHERE ptest1=1;
 ERROR:  update or delete on table "pktable" violates foreign key constraint "fktable_ftest1_fkey" on table "fktable"
 DETAIL:  Key (ptest1)=(1) is still referenced from table "fktable".
 -- Delete a row from PK TABLE (should succeed)
-DELETE FROM PKTABLE WHERE ptest1=5;
--- Check PKTABLE for deletes
-SELECT * FROM PKTABLE;
+DELETE FROM pktable WHERE ptest1=5;
+-- Check pktable for deletes
+SELECT * FROM pktable;
  ptest1 | ptest2 
 --------+--------
       1 | Test1
@@ -318,13 +318,13 @@ SELECT * FROM PKTABLE;
 (4 rows)
 
 -- Update a row from PK TABLE (should fail)
-UPDATE PKTABLE SET ptest1=0 WHERE ptest1=2;
+UPDATE pktable SET ptest1=0 WHERE ptest1=2;
 ERROR:  update or delete on table "pktable" violates foreign key constraint "fktable_ftest1_fkey" on table "fktable"
 DETAIL:  Key (ptest1)=(2) is still referenced from table "fktable".
 -- Update a row from PK TABLE (should succeed)
-UPDATE PKTABLE SET ptest1=0 WHERE ptest1=4;
--- Check PKTABLE for updates
-SELECT * FROM PKTABLE;
+UPDATE pktable SET ptest1=0 WHERE ptest1=4;
+-- Check pktable for updates
+SELECT * FROM pktable;
  ptest1 | ptest2 
 --------+--------
       1 | Test1
@@ -333,30 +333,30 @@ SELECT * FROM PKTABLE;
       0 | Test4
 (4 rows)
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- MATCH SIMPLE
 -- Base test restricting update/delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE);
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable);
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname3"
 DETAIL:  Key (ftest1, ftest2, ftest3)=(1, 2, 7) is not present in table "pktable".
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
       1 |      2 |      3 |      1
@@ -367,19 +367,19 @@ SELECT * from FKTABLE;
 (5 rows)
 
 -- Try to update something that should fail
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 ERROR:  update or delete on table "pktable" violates foreign key constraint "constrname3" on table "fktable"
 DETAIL:  Key (ptest1, ptest2, ptest3)=(1, 2, 3) is still referenced from table "fktable".
 -- Try to update something that should succeed
-UPDATE PKTABLE set ptest1=1 WHERE ptest2=3;
+UPDATE pktable set ptest1=1 WHERE ptest2=3;
 -- Try to delete something that should fail
-DELETE FROM PKTABLE where ptest1=1 and ptest2=2 and ptest3=3;
+DELETE FROM pktable where ptest1=1 and ptest2=2 and ptest3=3;
 ERROR:  update or delete on table "pktable" violates foreign key constraint "constrname3" on table "fktable"
 DETAIL:  Key (ptest1, ptest2, ptest3)=(1, 2, 3) is still referenced from table "fktable".
 -- Try to delete something that should work
-DELETE FROM PKTABLE where ptest1=2;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+DELETE FROM pktable where ptest1=2;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       1 |      2 |      3 | test1
@@ -387,7 +387,7 @@ SELECT * from PKTABLE;
       1 |      3 |      4 | test3
 (3 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
       1 |      2 |      3 |      1
@@ -397,30 +397,30 @@ SELECT * from FKTABLE;
         |      3 |      4 |      5
 (5 rows)
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- cascade update/delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable
 			ON DELETE CASCADE ON UPDATE CASCADE);
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname3"
 DETAIL:  Key (ftest1, ftest2, ftest3)=(1, 2, 7) is not present in table "pktable".
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
       1 |      2 |      3 |      1
@@ -431,11 +431,11 @@ SELECT * from FKTABLE;
 (5 rows)
 
 -- Try to update something that will cascade
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 -- Try to update something that should not cascade
-UPDATE PKTABLE set ptest1=1 WHERE ptest2=3;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+UPDATE pktable set ptest1=1 WHERE ptest2=3;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       2 |      4 |      5 | test4
@@ -444,7 +444,7 @@ SELECT * from PKTABLE;
       1 |      3 |      4 | test3
 (4 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
         |      2 |      3 |      2
@@ -455,9 +455,9 @@ SELECT * from FKTABLE;
 (5 rows)
 
 -- Try to delete something that should cascade
-DELETE FROM PKTABLE where ptest1=1 and ptest2=5 and ptest3=3;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+DELETE FROM pktable where ptest1=1 and ptest2=5 and ptest3=3;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       2 |      4 |      5 | test4
@@ -465,7 +465,7 @@ SELECT * from PKTABLE;
       1 |      3 |      4 | test3
 (3 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
         |      2 |      3 |      2
@@ -475,16 +475,16 @@ SELECT * from FKTABLE;
 (4 rows)
 
 -- Try to delete something that should not have a cascade
-DELETE FROM PKTABLE where ptest1=2;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+DELETE FROM pktable where ptest1=2;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       1 |      3 |      3 | test2
       1 |      3 |      4 | test3
 (2 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
         |      2 |      3 |      2
@@ -493,31 +493,31 @@ SELECT * from FKTABLE;
         |      3 |      4 |      5
 (4 rows)
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- set null update / set default delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int DEFAULT 0, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int DEFAULT 0, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable
 			ON DELETE SET DEFAULT ON UPDATE SET NULL);
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (2, 3, 4, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (2, 3, 4, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname3"
 DETAIL:  Key (ftest1, ftest2, ftest3)=(1, 2, 7) is not present in table "pktable".
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
       1 |      2 |      3 |      1
@@ -529,11 +529,11 @@ SELECT * from FKTABLE;
 (6 rows)
 
 -- Try to update something that will set null
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 -- Try to update something that should not set null
-UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+UPDATE pktable set ptest2=2 WHERE ptest2=3 and ptest1=1;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       2 |      3 |      4 | test3
@@ -542,7 +542,7 @@ SELECT * from PKTABLE;
       1 |      2 |      3 | test2
 (4 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
       2 |      3 |      4 |      1
@@ -554,9 +554,9 @@ SELECT * from FKTABLE;
 (6 rows)
 
 -- Try to delete something that should set default
-DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+DELETE FROM pktable where ptest1=2 and ptest2=3 and ptest3=4;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       2 |      4 |      5 | test4
@@ -564,7 +564,7 @@ SELECT * from PKTABLE;
       1 |      2 |      3 | test2
 (3 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
         |      2 |      3 |      2
@@ -576,16 +576,16 @@ SELECT * from FKTABLE;
 (6 rows)
 
 -- Try to delete something that should not set default
-DELETE FROM PKTABLE where ptest2=5;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+DELETE FROM pktable where ptest2=5;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       2 |      4 |      5 | test4
       1 |      2 |      3 | test2
 (2 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
         |      2 |      3 |      2
@@ -596,33 +596,33 @@ SELECT * from FKTABLE;
       0 |        |        |      1
 (6 rows)
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- set default update / set null delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int DEFAULT 0, ftest2 int DEFAULT -1, ftest3 int DEFAULT -2, ftest4 int, CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int DEFAULT 0, ftest2 int DEFAULT -1, ftest3 int DEFAULT -2, ftest4 int, CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable
 			ON DELETE SET NULL ON UPDATE SET DEFAULT);
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
-INSERT INTO PKTABLE VALUES (2, -1, 5, 'test5');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (2, -1, 5, 'test5');
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (2, 3, 4, 1);
-INSERT INTO FKTABLE VALUES (2, 4, 5, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (2, 3, 4, 1);
+INSERT INTO fktable VALUES (2, 4, 5, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname3"
 DETAIL:  Key (ftest1, ftest2, ftest3)=(1, 2, 7) is not present in table "pktable".
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
       1 |      2 |      3 |      1
@@ -635,16 +635,16 @@ SELECT * from FKTABLE;
 (7 rows)
 
 -- Try to update something that will fail
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname3"
 DETAIL:  Key (ftest1, ftest2, ftest3)=(0, -1, -2) is not present in table "pktable".
 -- Try to update something that will set default
-UPDATE PKTABLE set ptest1=0, ptest2=-1, ptest3=-2 where ptest2=2;
-UPDATE PKTABLE set ptest2=10 where ptest2=4;
+UPDATE pktable set ptest1=0, ptest2=-1, ptest3=-2 where ptest2=2;
+UPDATE pktable set ptest2=10 where ptest2=4;
 -- Try to update something that should not set default
-UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+UPDATE pktable set ptest2=2 WHERE ptest2=3 and ptest1=1;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       2 |      3 |      4 | test3
@@ -654,7 +654,7 @@ SELECT * from PKTABLE;
       1 |      2 |      3 | test2
 (5 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
       2 |      3 |      4 |      1
@@ -667,9 +667,9 @@ SELECT * from FKTABLE;
 (7 rows)
 
 -- Try to delete something that should set null
-DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+DELETE FROM pktable where ptest1=2 and ptest2=3 and ptest3=4;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       2 |     -1 |      5 | test5
@@ -678,7 +678,7 @@ SELECT * from PKTABLE;
       1 |      2 |      3 | test2
 (4 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
         |      2 |      3 |      2
@@ -691,9 +691,9 @@ SELECT * from FKTABLE;
 (7 rows)
 
 -- Try to delete something that should not set null
-DELETE FROM PKTABLE where ptest2=-1 and ptest3=5;
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+DELETE FROM pktable where ptest2=-1 and ptest3=5;
+-- Show pktable and fktable
+SELECT * from pktable;
  ptest1 | ptest2 | ptest3 | ptest4 
 --------+--------+--------+--------
       0 |     -1 |     -2 | test1
@@ -701,7 +701,7 @@ SELECT * from PKTABLE;
       1 |      2 |      3 | test2
 (3 rows)
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
  ftest1 | ftest2 | ftest3 | ftest4 
 --------+--------+--------+--------
         |      2 |      3 |      2
@@ -713,126 +713,126 @@ SELECT * from FKTABLE;
         |        |        |      1
 (7 rows)
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
-CREATE TABLE PKTABLE (ptest1 int PRIMARY KEY);
-CREATE TABLE FKTABLE_FAIL1 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest2) REFERENCES PKTABLE);
+DROP TABLE fktable;
+DROP TABLE pktable;
+CREATE TABLE pktable (ptest1 int PRIMARY KEY);
+CREATE TABLE fktable_fail1 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest2) REFERENCES pktable);
 ERROR:  column "ftest2" referenced in foreign key constraint does not exist
-CREATE TABLE FKTABLE_FAIL2 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest1) REFERENCES PKTABLE(ptest2));
+CREATE TABLE fktable_fail2 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest1) REFERENCES pktable(ptest2));
 ERROR:  column "ptest2" referenced in foreign key constraint does not exist
-DROP TABLE FKTABLE_FAIL1;
+DROP TABLE fktable_fail1;
 ERROR:  table "fktable_fail1" does not exist
-DROP TABLE FKTABLE_FAIL2;
+DROP TABLE fktable_fail2;
 ERROR:  table "fktable_fail2" does not exist
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 -- Test for referencing column number smaller than referenced constraint
-CREATE TABLE PKTABLE (ptest1 int, ptest2 int, UNIQUE(ptest1, ptest2));
-CREATE TABLE FKTABLE_FAIL1 (ftest1 int REFERENCES pktable(ptest1));
+CREATE TABLE pktable (ptest1 int, ptest2 int, UNIQUE(ptest1, ptest2));
+CREATE TABLE fktable_fail1 (ftest1 int REFERENCES pktable(ptest1));
 ERROR:  there is no unique constraint matching given keys for referenced table "pktable"
-DROP TABLE FKTABLE_FAIL1;
+DROP TABLE fktable_fail1;
 ERROR:  table "fktable_fail1" does not exist
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 --
 -- Tests for mismatched types
 --
 -- Basic one column, two table setup
-CREATE TABLE PKTABLE (ptest1 int PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
+CREATE TABLE pktable (ptest1 int PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
 -- This next should fail, because int=inet does not exist
-CREATE TABLE FKTABLE (ftest1 inet REFERENCES pktable);
+CREATE TABLE fktable (ftest1 inet REFERENCES pktable);
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: inet and integer.
 -- This should also fail for the same reason, but here we
 -- give the column name
-CREATE TABLE FKTABLE (ftest1 inet REFERENCES pktable(ptest1));
+CREATE TABLE fktable (ftest1 inet REFERENCES pktable(ptest1));
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: inet and integer.
 -- This should succeed, even though they are different types,
 -- because int=int8 exists and is a member of the integer opfamily
-CREATE TABLE FKTABLE (ftest1 int8 REFERENCES pktable);
+CREATE TABLE fktable (ftest1 int8 REFERENCES pktable);
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(43) is not present in table "pktable".
-UPDATE FKTABLE SET ftest1 = ftest1;	-- should succeed
-UPDATE FKTABLE SET ftest1 = ftest1 + 1;	-- should fail
+UPDATE fktable SET ftest1 = ftest1;	-- should succeed
+UPDATE fktable SET ftest1 = ftest1 + 1;	-- should fail
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(43) is not present in table "pktable".
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 -- This should fail, because we'd have to cast numeric to int which is
 -- not an implicit coercion (or use numeric=numeric, but that's not part
 -- of the integer opfamily)
-CREATE TABLE FKTABLE (ftest1 numeric REFERENCES pktable);
+CREATE TABLE fktable (ftest1 numeric REFERENCES pktable);
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: numeric and integer.
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 -- On the other hand, this should work because int implicitly promotes to
 -- numeric, and we allow promotion on the FK side
-CREATE TABLE PKTABLE (ptest1 numeric PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
-CREATE TABLE FKTABLE (ftest1 int REFERENCES pktable);
+CREATE TABLE pktable (ptest1 numeric PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
+CREATE TABLE fktable (ftest1 int REFERENCES pktable);
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(43) is not present in table "pktable".
-UPDATE FKTABLE SET ftest1 = ftest1;	-- should succeed
-UPDATE FKTABLE SET ftest1 = ftest1 + 1;	-- should fail
+UPDATE fktable SET ftest1 = ftest1;	-- should succeed
+UPDATE fktable SET ftest1 = ftest1 + 1;	-- should fail
 ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
 DETAIL:  Key (ftest1)=(43) is not present in table "pktable".
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- Two columns, two tables
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, PRIMARY KEY(ptest1, ptest2));
+CREATE TABLE pktable (ptest1 int, ptest2 inet, PRIMARY KEY(ptest1, ptest2));
 -- This should fail, because we just chose really odd types
-CREATE TABLE FKTABLE (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable);
+CREATE TABLE fktable (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable);
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: cidr and integer.
 -- Again, so should this...
-CREATE TABLE FKTABLE (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
+CREATE TABLE fktable (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest1" are of incompatible types: cidr and integer.
 -- This fails because we mixed up the column ordering
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable);
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable);
 ERROR:  foreign key constraint "fktable_ftest2_fkey" cannot be implemented
 DETAIL:  Key columns "ftest2" and "ptest1" are of incompatible types: inet and integer.
 -- As does this...
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest1, ptest2));
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest1, ptest2));
 ERROR:  foreign key constraint "fktable_ftest2_fkey" cannot be implemented
 DETAIL:  Key columns "ftest2" and "ptest1" are of incompatible types: inet and integer.
 -- And again..
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest2, ptest1));
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest2, ptest1));
 ERROR:  foreign key constraint "fktable_ftest1_fkey" cannot be implemented
 DETAIL:  Key columns "ftest1" and "ptest2" are of incompatible types: integer and inet.
 -- This works...
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest2, ptest1));
-DROP TABLE FKTABLE;
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest2, ptest1));
+DROP TABLE fktable;
 -- As does this
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- Two columns, same table
 -- Make sure this still works...
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
 ptest4) REFERENCES pktable(ptest1, ptest2));
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 -- And this,
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
 ptest4) REFERENCES pktable);
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 -- This shouldn't (mixed up columns)
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
 ptest4) REFERENCES pktable(ptest2, ptest1));
 ERROR:  foreign key constraint "pktable_ptest3_fkey" cannot be implemented
 DETAIL:  Key columns "ptest3" and "ptest2" are of incompatible types: integer and inet.
 -- Nor should this... (same reason, we have 4,3 referencing 1,2 which mismatches types
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
 ptest3) REFERENCES pktable(ptest1, ptest2));
 ERROR:  foreign key constraint "pktable_ptest4_fkey" cannot be implemented
 DETAIL:  Key columns "ptest4" and "ptest1" are of incompatible types: inet and integer.
 -- Not this one either... Same as the last one except we didn't defined the columns being referenced.
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
 ptest3) REFERENCES pktable);
 ERROR:  foreign key constraint "pktable_ptest4_fkey" cannot be implemented
 DETAIL:  Key columns "ptest4" and "ptest1" are of incompatible types: inet and integer.
diff --git a/src/test/regress/expected/geometry.out b/src/test/regress/expected/geometry.out
index 1271395..f9b1ff8 100644
--- a/src/test/regress/expected/geometry.out
+++ b/src/test/regress/expected/geometry.out
@@ -28,7 +28,7 @@ SELECT '' AS four, (@@ f1) AS center
 (4 rows)
 
 SELECT '' AS six, point(f1) AS center
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
  six |  center   
 -----+-----------
      | (5,1)
@@ -40,7 +40,7 @@ SELECT '' AS six, point(f1) AS center
 (6 rows)
 
 SELECT '' AS six, (@@ f1) AS center
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
  six |  center   
 -----+-----------
      | (5,1)
@@ -52,7 +52,7 @@ SELECT '' AS six, (@@ f1) AS center
 (6 rows)
 
 SELECT '' AS two, (@@ f1) AS center
-   FROM POLYGON_TBL
+   FROM polygon_tbl
    WHERE (# f1) > 2;
  two |            center             
 -----+-------------------------------
@@ -62,7 +62,7 @@ SELECT '' AS two, (@@ f1) AS center
 
 -- "is horizontal" function
 SELECT '' AS two, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE ishorizontal(p1.f1, point '(0,0)');
  two |   f1    
 -----+---------
@@ -72,7 +72,7 @@ SELECT '' AS two, p1.f1
 
 -- "is horizontal" operator
 SELECT '' AS two, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE p1.f1 ?- point '(0,0)';
  two |   f1    
 -----+---------
@@ -82,7 +82,7 @@ SELECT '' AS two, p1.f1
 
 -- "is vertical" function
 SELECT '' AS one, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE isvertical(p1.f1, point '(5.1,34.5)');
  one |     f1     
 -----+------------
@@ -91,7 +91,7 @@ SELECT '' AS one, p1.f1
 
 -- "is vertical" operator
 SELECT '' AS one, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE p1.f1 ?| point '(5.1,34.5)';
  one |     f1     
 -----+------------
@@ -103,14 +103,14 @@ SELECT '' AS one, p1.f1
 --
 -- intersection
 SELECT '' AS count, p.f1, l.s, l.s # p.f1 AS intersection
-   FROM LSEG_TBL l, POINT_TBL p;
+   FROM LSEG_TBL l, point_tbl p;
 ERROR:  operator does not exist: lseg # point
 LINE 1: SELECT '' AS count, p.f1, l.s, l.s # p.f1 AS intersection
                                            ^
 HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
 -- closest point
 SELECT '' AS thirty, p.f1, l.s, p.f1 ## l.s AS closest
-   FROM LSEG_TBL l, POINT_TBL p;
+   FROM LSEG_TBL l, point_tbl p;
  thirty |     f1     |               s               |             closest              
 --------+------------+-------------------------------+----------------------------------
         | (0,0)      | [(1,2),(3,4)]                 | (1,2)
@@ -148,7 +148,7 @@ SELECT '' AS thirty, p.f1, l.s, p.f1 ## l.s AS closest
 --
 -- Boxes
 --
-SELECT '' as six, box(f1) AS box FROM CIRCLE_TBL;
+SELECT '' as six, box(f1) AS box FROM circle_tbl;
  six |                              box                               
 -----+----------------------------------------------------------------
      | (7.12132034356,3.12132034356),(2.87867965644,-1.12132034356)
@@ -161,7 +161,7 @@ SELECT '' as six, box(f1) AS box FROM CIRCLE_TBL;
 
 -- translation
 SELECT '' AS twentyfour, b.f1 + p.f1 AS translation
-   FROM BOX_TBL b, POINT_TBL p;
+   FROM BOX_TBL b, point_tbl p;
  twentyfour |       translation       
 ------------+-------------------------
             | (2,2),(0,0)
@@ -191,7 +191,7 @@ SELECT '' AS twentyfour, b.f1 + p.f1 AS translation
 (24 rows)
 
 SELECT '' AS twentyfour, b.f1 - p.f1 AS translation
-   FROM BOX_TBL b, POINT_TBL p;
+   FROM BOX_TBL b, point_tbl p;
  twentyfour |        translation        
 ------------+---------------------------
             | (2,2),(0,0)
@@ -222,7 +222,7 @@ SELECT '' AS twentyfour, b.f1 - p.f1 AS translation
 
 -- scaling and rotation
 SELECT '' AS twentyfour, b.f1 * p.f1 AS rotation
-   FROM BOX_TBL b, POINT_TBL p;
+   FROM BOX_TBL b, point_tbl p;
  twentyfour |          rotation           
 ------------+-----------------------------
             | (0,0),(0,0)
@@ -252,7 +252,7 @@ SELECT '' AS twentyfour, b.f1 * p.f1 AS rotation
 (24 rows)
 
 SELECT '' AS twenty, b.f1 / p.f1 AS rotation
-   FROM BOX_TBL b, POINT_TBL p
+   FROM BOX_TBL b, point_tbl p
    WHERE (p.f1 <-> point '(0,0)') >= 1;
  twenty |                               rotation                               
 --------+----------------------------------------------------------------------
@@ -279,7 +279,7 @@ SELECT '' AS twenty, b.f1 / p.f1 AS rotation
 (20 rows)
 
 SELECT f1::box
-	FROM POINT_TBL;
+	FROM point_tbl;
           f1           
 -----------------------
  (0,0),(0,0)
@@ -328,7 +328,7 @@ SELECT '' AS eight, npoints(f1) AS npoints, f1 AS path FROM PATH_TBL;
        |       2 | ((11,12),(13,14))
 (8 rows)
 
-SELECT '' AS four, path(f1) FROM POLYGON_TBL;
+SELECT '' AS four, path(f1) FROM polygon_tbl;
  four |        path         
 ------+---------------------
       | ((2,0),(2,4),(0,0))
@@ -372,7 +372,7 @@ SELECT '' AS eight, p1.f1 * point '(2,-1)' AS dist_mul
 --
 -- containment
 SELECT '' AS twentyfour, p.f1, poly.f1, poly.f1 @> p.f1 AS contains
-   FROM POLYGON_TBL poly, POINT_TBL p;
+   FROM polygon_tbl poly, point_tbl p;
  twentyfour |     f1     |         f1          | contains 
 ------------+------------+---------------------+----------
             | (0,0)      | ((2,0),(2,4),(0,0)) | t
@@ -402,7 +402,7 @@ SELECT '' AS twentyfour, p.f1, poly.f1, poly.f1 @> p.f1 AS contains
 (24 rows)
 
 SELECT '' AS twentyfour, p.f1, poly.f1, p.f1 <@ poly.f1 AS contained
-   FROM POLYGON_TBL poly, POINT_TBL p;
+   FROM polygon_tbl poly, point_tbl p;
  twentyfour |     f1     |         f1          | contained 
 ------------+------------+---------------------+-----------
             | (0,0)      | ((2,0),(2,4),(0,0)) | t
@@ -432,7 +432,7 @@ SELECT '' AS twentyfour, p.f1, poly.f1, p.f1 <@ poly.f1 AS contained
 (24 rows)
 
 SELECT '' AS four, npoints(f1) AS npoints, f1 AS polygon
-   FROM POLYGON_TBL;
+   FROM polygon_tbl;
  four | npoints |       polygon       
 ------+---------+---------------------
       |       3 | ((2,0),(2,4),(0,0))
@@ -474,7 +474,7 @@ SELECT '' AS four, f1 AS open_path, polygon( pclose(f1)) AS polygon
 
 -- convert circles to polygons using the default number of points
 SELECT '' AS six, polygon(f1)
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
  six |                                                                                                       polygon                                                                                                        
 -----+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      | ((2,1),(2.40192378865,2.5),(3.5,3.59807621135),(5,4),(6.5,3.59807621135),(7.59807621135,2.5),(8,1),(7.59807621135,-0.5),(6.5,-1.59807621135),(5,-2),(3.5,-1.59807621135),(2.40192378865,-0.5))
@@ -487,7 +487,7 @@ SELECT '' AS six, polygon(f1)
 
 -- convert the circle to an 8-point polygon
 SELECT '' AS six, polygon(8, f1)
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
  six |                                                                             polygon                                                                              
 -----+------------------------------------------------------------------------------------------------------------------------------------------------------------------
      | ((2,1),(2.87867965644,3.12132034356),(5,4),(7.12132034356,3.12132034356),(8,1),(7.12132034356,-1.12132034356),(5,-2),(2.87867965644,-1.12132034356))
@@ -502,7 +502,7 @@ SELECT '' AS six, polygon(8, f1)
 -- Circles
 --
 SELECT '' AS six, circle(f1, 50.0)
-   FROM POINT_TBL;
+   FROM point_tbl;
  six |     circle      
 -----+-----------------
      | <(0,0),50>
@@ -524,7 +524,7 @@ SELECT '' AS four, circle(f1)
 (4 rows)
 
 SELECT '' AS two, circle(f1)
-   FROM POLYGON_TBL
+   FROM polygon_tbl
    WHERE (# f1) >= 3;
  two |                    circle                     
 -----+-----------------------------------------------
@@ -533,7 +533,7 @@ SELECT '' AS two, circle(f1)
 (2 rows)
 
 SELECT '' AS twentyfour, c1.f1 AS circle, p1.f1 AS point, (p1.f1 <-> c1.f1) AS distance
-   FROM CIRCLE_TBL c1, POINT_TBL p1
+   FROM circle_tbl c1, point_tbl p1
    WHERE (p1.f1 <-> c1.f1) > 0
    ORDER BY distance, area(c1.f1), p1.f1[0];
  twentyfour |     circle     |   point    |   distance    
diff --git a/src/test/regress/expected/graphid.out b/src/test/regress/expected/graphid.out
index c9379a5..f7c4a2b 100644
--- a/src/test/regress/expected/graphid.out
+++ b/src/test/regress/expected/graphid.out
@@ -74,7 +74,7 @@ SELECT g.* FROM GRAPHID_TBL g WHERE g.f1 <= '12345.123'::graphid;
 (4 rows)
 
 -- Index
-CREATE INDEX GRAPHID_TBL_IDX ON GRAPHID_TBL USING GIN (f1);
+CREATE INDEX GRAPHID_TBL_IDX ON GRAPHID_TBL USING gin (f1);
 SET enable_seqscan = off;
 SELECT g.* FROM GRAPHID_TBL g WHERE g.f1 =  '12345.123'::graphid;
     f1     
diff --git a/src/test/regress/expected/horology.out b/src/test/regress/expected/horology.out
index 1fe02be..0244bf2 100644
--- a/src/test/regress/expected/horology.out
+++ b/src/test/regress/expected/horology.out
@@ -929,7 +929,7 @@ SELECT CAST(cast(date 'today' + time with time zone '03:30'
 (1 row)
 
 SELECT t.d1 AS t, i.f1 AS i, t.d1 + i.f1 AS "add", t.d1 - i.f1 AS "subtract"
-  FROM TIMESTAMP_TBL t, INTERVAL_TBL i
+  FROM TIMESTAMP_TBL t, interval_tbl i
   WHERE t.d1 BETWEEN '1990-01-01' AND '2001-01-01'
     AND i.f1 BETWEEN '00:00' AND '23:00'
   ORDER BY 1,2;
@@ -1042,7 +1042,7 @@ SELECT t.d1 AS t, i.f1 AS i, t.d1 + i.f1 AS "add", t.d1 - i.f1 AS "subtract"
 (104 rows)
 
 SELECT t.f1 AS t, i.f1 AS i, t.f1 + i.f1 AS "add", t.f1 - i.f1 AS "subtract"
-  FROM TIME_TBL t, INTERVAL_TBL i
+  FROM TIME_TBL t, interval_tbl i
   ORDER BY 1,2;
       t      |               i               |     add     |  subtract   
 -------------+-------------------------------+-------------+-------------
@@ -1149,7 +1149,7 @@ SELECT t.f1 AS t, i.f1 AS i, t.f1 + i.f1 AS "add", t.f1 - i.f1 AS "subtract"
 (100 rows)
 
 SELECT t.f1 AS t, i.f1 AS i, t.f1 + i.f1 AS "add", t.f1 - i.f1 AS "subtract"
-  FROM TIMETZ_TBL t, INTERVAL_TBL i
+  FROM TIMETZ_TBL t, interval_tbl i
   ORDER BY 1,2;
        t        |               i               |      add       |    subtract    
 ----------------+-------------------------------+----------------+----------------
@@ -1424,7 +1424,7 @@ SELECT '' AS "16", f1 AS "timestamp"
 (16 rows)
 
 SELECT '' AS "160", d.f1 AS "timestamp", t.f1 AS "interval", d.f1 + t.f1 AS plus
-  FROM TEMP_TIMESTAMP d, INTERVAL_TBL t
+  FROM TEMP_TIMESTAMP d, interval_tbl t
   ORDER BY plus, "timestamp", "interval";
  160 |          timestamp           |           interval            |             plus             
 -----+------------------------------+-------------------------------+------------------------------
@@ -1591,7 +1591,7 @@ SELECT '' AS "160", d.f1 AS "timestamp", t.f1 AS "interval", d.f1 + t.f1 AS plus
 (160 rows)
 
 SELECT '' AS "160", d.f1 AS "timestamp", t.f1 AS "interval", d.f1 - t.f1 AS minus
-  FROM TEMP_TIMESTAMP d, INTERVAL_TBL t
+  FROM TEMP_TIMESTAMP d, interval_tbl t
   WHERE isfinite(d.f1)
   ORDER BY minus, "timestamp", "interval";
  160 |          timestamp           |           interval            |            minus             
@@ -2184,7 +2184,7 @@ SELECT '' AS three, f1 as abstime, cast(f1 as timestamp) AS "timestamp"
   FROM ABSTIME_TBL WHERE NOT isfinite(f1);
 ERROR:  cannot convert abstime "invalid" to timestamp
 SELECT '' AS ten, f1 AS interval, reltime(f1) AS reltime
-  FROM INTERVAL_TBL;
+  FROM interval_tbl;
  ten |           interval            |            reltime            
 -----+-------------------------------+-------------------------------
      | @ 1 min                       | @ 1 min
diff --git a/src/test/regress/expected/inet.out b/src/test/regress/expected/inet.out
index 9447e03..9ad66ab 100644
--- a/src/test/regress/expected/inet.out
+++ b/src/test/regress/expected/inet.out
@@ -2,48 +2,48 @@
 -- INET
 --
 -- prepare the table...
-DROP TABLE INET_TBL;
+DROP TABLE inet_tbl;
 ERROR:  table "inet_tbl" does not exist
-CREATE TABLE INET_TBL (c cidr, i inet);
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.226/24');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1.0/26', '192.168.1.226');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.0/24');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.0/25');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.255/24');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.255/25');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '10.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10.0.0.0', '10.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10.1.2.3', '10.1.2.3/32');
-INSERT INTO INET_TBL (c, i) VALUES ('10.1.2', '10.1.2.3/24');
-INSERT INTO INET_TBL (c, i) VALUES ('10.1', '10.1.2.3/16');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '10.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '11.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '9.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10:23::f1', '10:23::f1/64');
-INSERT INTO INET_TBL (c, i) VALUES ('10:23::8000/113', '10:23::ffff');
-INSERT INTO INET_TBL (c, i) VALUES ('::ffff:1.2.3.4', '::4.3.2.1/24');
+CREATE TABLE inet_tbl (c cidr, i inet);
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.226/24');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1.0/26', '192.168.1.226');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.0/24');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.0/25');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.255/24');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.255/25');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '10.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10.0.0.0', '10.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10.1.2.3', '10.1.2.3/32');
+INSERT INTO inet_tbl (c, i) VALUES ('10.1.2', '10.1.2.3/24');
+INSERT INTO inet_tbl (c, i) VALUES ('10.1', '10.1.2.3/16');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '10.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '11.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '9.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10:23::f1', '10:23::f1/64');
+INSERT INTO inet_tbl (c, i) VALUES ('10:23::8000/113', '10:23::ffff');
+INSERT INTO inet_tbl (c, i) VALUES ('::ffff:1.2.3.4', '::4.3.2.1/24');
 -- check that CIDR rejects invalid input:
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1.2/30', '192.168.1.226');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1.2/30', '192.168.1.226');
 ERROR:  invalid cidr value: "192.168.1.2/30"
-LINE 1: INSERT INTO INET_TBL (c, i) VALUES ('192.168.1.2/30', '192.1...
+LINE 1: INSERT INTO inet_tbl (c, i) VALUES ('192.168.1.2/30', '192.1...
                                             ^
 DETAIL:  Value has bits set to right of mask.
-INSERT INTO INET_TBL (c, i) VALUES ('1234::1234::1234', '::1.2.3.4');
+INSERT INTO inet_tbl (c, i) VALUES ('1234::1234::1234', '::1.2.3.4');
 ERROR:  invalid input syntax for type cidr: "1234::1234::1234"
-LINE 1: INSERT INTO INET_TBL (c, i) VALUES ('1234::1234::1234', '::1...
+LINE 1: INSERT INTO inet_tbl (c, i) VALUES ('1234::1234::1234', '::1...
                                             ^
 -- check that CIDR rejects invalid input when converting from text:
-INSERT INTO INET_TBL (c, i) VALUES (cidr('192.168.1.2/30'), '192.168.1.226');
+INSERT INTO inet_tbl (c, i) VALUES (cidr('192.168.1.2/30'), '192.168.1.226');
 ERROR:  invalid cidr value: "192.168.1.2/30"
-LINE 1: INSERT INTO INET_TBL (c, i) VALUES (cidr('192.168.1.2/30'), ...
+LINE 1: INSERT INTO inet_tbl (c, i) VALUES (cidr('192.168.1.2/30'), ...
                                                  ^
 DETAIL:  Value has bits set to right of mask.
-INSERT INTO INET_TBL (c, i) VALUES (cidr('ffff:ffff:ffff:ffff::/24'), '::192.168.1.226');
+INSERT INTO inet_tbl (c, i) VALUES (cidr('ffff:ffff:ffff:ffff::/24'), '::192.168.1.226');
 ERROR:  invalid cidr value: "ffff:ffff:ffff:ffff::/24"
-LINE 1: INSERT INTO INET_TBL (c, i) VALUES (cidr('ffff:ffff:ffff:fff...
+LINE 1: INSERT INTO inet_tbl (c, i) VALUES (cidr('ffff:ffff:ffff:fff...
                                                  ^
 DETAIL:  Value has bits set to right of mask.
-SELECT '' AS ten, c AS cidr, i AS inet FROM INET_TBL;
+SELECT '' AS ten, c AS cidr, i AS inet FROM inet_tbl;
  ten |        cidr        |       inet       
 -----+--------------------+------------------
      | 192.168.1.0/24     | 192.168.1.226/24
@@ -66,7 +66,7 @@ SELECT '' AS ten, c AS cidr, i AS inet FROM INET_TBL;
 (17 rows)
 
 -- now test some support functions
-SELECT '' AS ten, i AS inet, host(i), text(i), family(i) FROM INET_TBL;
+SELECT '' AS ten, i AS inet, host(i), text(i), family(i) FROM inet_tbl;
  ten |       inet       |     host      |       text       | family 
 -----+------------------+---------------+------------------+--------
      | 192.168.1.226/24 | 192.168.1.226 | 192.168.1.226/24 |      4
@@ -89,7 +89,7 @@ SELECT '' AS ten, i AS inet, host(i), text(i), family(i) FROM INET_TBL;
 (17 rows)
 
 SELECT '' AS ten, c AS cidr, broadcast(c),
-  i AS inet, broadcast(i) FROM INET_TBL;
+  i AS inet, broadcast(i) FROM inet_tbl;
  ten |        cidr        |    broadcast     |       inet       |               broadcast               
 -----+--------------------+------------------+------------------+---------------------------------------
      | 192.168.1.0/24     | 192.168.1.255/24 | 192.168.1.226/24 | 192.168.1.255/24
@@ -112,7 +112,7 @@ SELECT '' AS ten, c AS cidr, broadcast(c),
 (17 rows)
 
 SELECT '' AS ten, c AS cidr, network(c) AS "network(cidr)",
-  i AS inet, network(i) AS "network(inet)" FROM INET_TBL;
+  i AS inet, network(i) AS "network(inet)" FROM inet_tbl;
  ten |        cidr        |   network(cidr)    |       inet       |  network(inet)   
 -----+--------------------+--------------------+------------------+------------------
      | 192.168.1.0/24     | 192.168.1.0/24     | 192.168.1.226/24 | 192.168.1.0/24
@@ -135,7 +135,7 @@ SELECT '' AS ten, c AS cidr, network(c) AS "network(cidr)",
 (17 rows)
 
 SELECT '' AS ten, c AS cidr, masklen(c) AS "masklen(cidr)",
-  i AS inet, masklen(i) AS "masklen(inet)" FROM INET_TBL;
+  i AS inet, masklen(i) AS "masklen(inet)" FROM inet_tbl;
  ten |        cidr        | masklen(cidr) |       inet       | masklen(inet) 
 -----+--------------------+---------------+------------------+---------------
      | 192.168.1.0/24     |            24 | 192.168.1.226/24 |            24
@@ -158,7 +158,7 @@ SELECT '' AS ten, c AS cidr, masklen(c) AS "masklen(cidr)",
 (17 rows)
 
 SELECT '' AS four, c AS cidr, masklen(c) AS "masklen(cidr)",
-  i AS inet, masklen(i) AS "masklen(inet)" FROM INET_TBL
+  i AS inet, masklen(i) AS "masklen(inet)" FROM inet_tbl
   WHERE masklen(c) <= 8;
  four |    cidr    | masklen(cidr) |    inet    | masklen(inet) 
 ------+------------+---------------+------------+---------------
@@ -168,7 +168,7 @@ SELECT '' AS four, c AS cidr, masklen(c) AS "masklen(cidr)",
       | 10.0.0.0/8 |             8 | 9.1.2.3/8  |             8
 (4 rows)
 
-SELECT '' AS six, c AS cidr, i AS inet FROM INET_TBL
+SELECT '' AS six, c AS cidr, i AS inet FROM inet_tbl
   WHERE c = i;
  six |      cidr      |      inet      
 -----+----------------+----------------
@@ -182,7 +182,7 @@ SELECT '' AS ten, i, c,
   i << c AS sb, i <<= c AS sbe,
   i >> c AS sup, i >>= c AS spe,
   i && c AS ovr
-  FROM INET_TBL;
+  FROM inet_tbl;
  ten |        i         |         c          | lt | le | eq | ge | gt | ne | sb | sbe | sup | spe | ovr 
 -----+------------------+--------------------+----+----+----+----+----+----+----+-----+-----+-----+-----
      | 192.168.1.226/24 | 192.168.1.0/24     | f  | f  | f  | t  | t  | t  | f  | t   | f   | t   | t
@@ -204,20 +204,20 @@ SELECT '' AS ten, i, c,
      | ::4.3.2.1/24     | ::ffff:1.2.3.4/128 | t  | t  | f  | f  | f  | t  | f  | f   | t   | t   | t
 (17 rows)
 
-SELECT max(i) AS max, min(i) AS min FROM INET_TBL;
+SELECT max(i) AS max, min(i) AS min FROM inet_tbl;
      max     |    min    
 -------------+-----------
  10:23::ffff | 9.1.2.3/8
 (1 row)
 
-SELECT max(c) AS max, min(c) AS min FROM INET_TBL;
+SELECT max(c) AS max, min(c) AS min FROM inet_tbl;
        max       |    min     
 -----------------+------------
  10:23::8000/113 | 10.0.0.0/8
 (1 row)
 
 -- check the conversion to/from text and set_netmask
-SELECT '' AS ten, set_masklen(inet(text(i)), 24) FROM INET_TBL;
+SELECT '' AS ten, set_masklen(inet(text(i)), 24) FROM inet_tbl;
  ten |   set_masklen    
 -----+------------------
      | 192.168.1.226/24
@@ -615,12 +615,12 @@ SELECT '127::1'::inet - '127::2'::inet;
 (1 row)
 
 -- insert one more row with addressed from different families
-INSERT INTO INET_TBL (c, i) VALUES ('10', '10::/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '10::/8');
 -- now, this one should fail
-SELECT inet_merge(c, i) FROM INET_TBL;
+SELECT inet_merge(c, i) FROM inet_tbl;
 ERROR:  cannot merge addresses from different families
 -- fix it by inet_same_family() condition
-SELECT inet_merge(c, i) FROM INET_TBL WHERE inet_same_family(c, i);
+SELECT inet_merge(c, i) FROM inet_tbl WHERE inet_same_family(c, i);
    inet_merge    
 -----------------
  192.168.1.0/24
diff --git a/src/test/regress/expected/int2.out b/src/test/regress/expected/int2.out
index 3ea4ed9..f9912fa 100644
--- a/src/test/regress/expected/int2.out
+++ b/src/test/regress/expected/int2.out
@@ -1,47 +1,47 @@
 --
 -- INT2
 --
-CREATE TABLE INT2_TBL(f1 int2);
-INSERT INTO INT2_TBL(f1) VALUES ('0   ');
-INSERT INTO INT2_TBL(f1) VALUES ('  1234 ');
-INSERT INTO INT2_TBL(f1) VALUES ('    -1234');
-INSERT INTO INT2_TBL(f1) VALUES ('34.5');
+CREATE TABLE int2_tbl(f1 int2);
+INSERT INTO int2_tbl(f1) VALUES ('0   ');
+INSERT INTO int2_tbl(f1) VALUES ('  1234 ');
+INSERT INTO int2_tbl(f1) VALUES ('    -1234');
+INSERT INTO int2_tbl(f1) VALUES ('34.5');
 ERROR:  invalid input syntax for integer: "34.5"
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('34.5');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('34.5');
                                          ^
 -- largest and smallest values
-INSERT INTO INT2_TBL(f1) VALUES ('32767');
-INSERT INTO INT2_TBL(f1) VALUES ('-32767');
+INSERT INTO int2_tbl(f1) VALUES ('32767');
+INSERT INTO int2_tbl(f1) VALUES ('-32767');
 -- bad input values -- should give errors
-INSERT INTO INT2_TBL(f1) VALUES ('100000');
+INSERT INTO int2_tbl(f1) VALUES ('100000');
 ERROR:  value "100000" is out of range for type smallint
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('100000');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('100000');
                                          ^
-INSERT INTO INT2_TBL(f1) VALUES ('asdf');
+INSERT INTO int2_tbl(f1) VALUES ('asdf');
 ERROR:  invalid input syntax for integer: "asdf"
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('asdf');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('asdf');
                                          ^
-INSERT INTO INT2_TBL(f1) VALUES ('    ');
+INSERT INTO int2_tbl(f1) VALUES ('    ');
 ERROR:  invalid input syntax for integer: "    "
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('    ');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('    ');
                                          ^
-INSERT INTO INT2_TBL(f1) VALUES ('- 1234');
+INSERT INTO int2_tbl(f1) VALUES ('- 1234');
 ERROR:  invalid input syntax for integer: "- 1234"
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('- 1234');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('- 1234');
                                          ^
-INSERT INTO INT2_TBL(f1) VALUES ('4 444');
+INSERT INTO int2_tbl(f1) VALUES ('4 444');
 ERROR:  invalid input syntax for integer: "4 444"
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('4 444');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('4 444');
                                          ^
-INSERT INTO INT2_TBL(f1) VALUES ('123 dt');
+INSERT INTO int2_tbl(f1) VALUES ('123 dt');
 ERROR:  invalid input syntax for integer: "123 dt"
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('123 dt');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('123 dt');
                                          ^
-INSERT INTO INT2_TBL(f1) VALUES ('');
+INSERT INTO int2_tbl(f1) VALUES ('');
 ERROR:  invalid input syntax for integer: ""
-LINE 1: INSERT INTO INT2_TBL(f1) VALUES ('');
+LINE 1: INSERT INTO int2_tbl(f1) VALUES ('');
                                          ^
-SELECT '' AS five, * FROM INT2_TBL;
+SELECT '' AS five, * FROM int2_tbl;
  five |   f1   
 ------+--------
       |      0
@@ -51,7 +51,7 @@ SELECT '' AS five, * FROM INT2_TBL;
       | -32767
 (5 rows)
 
-SELECT '' AS four, i.* FROM INT2_TBL i WHERE i.f1 <> int2 '0';
+SELECT '' AS four, i.* FROM int2_tbl i WHERE i.f1 <> int2 '0';
  four |   f1   
 ------+--------
       |   1234
@@ -60,7 +60,7 @@ SELECT '' AS four, i.* FROM INT2_TBL i WHERE i.f1 <> int2 '0';
       | -32767
 (4 rows)
 
-SELECT '' AS four, i.* FROM INT2_TBL i WHERE i.f1 <> int4 '0';
+SELECT '' AS four, i.* FROM int2_tbl i WHERE i.f1 <> int4 '0';
  four |   f1   
 ------+--------
       |   1234
@@ -69,33 +69,33 @@ SELECT '' AS four, i.* FROM INT2_TBL i WHERE i.f1 <> int4 '0';
       | -32767
 (4 rows)
 
-SELECT '' AS one, i.* FROM INT2_TBL i WHERE i.f1 = int2 '0';
+SELECT '' AS one, i.* FROM int2_tbl i WHERE i.f1 = int2 '0';
  one | f1 
 -----+----
      |  0
 (1 row)
 
-SELECT '' AS one, i.* FROM INT2_TBL i WHERE i.f1 = int4 '0';
+SELECT '' AS one, i.* FROM int2_tbl i WHERE i.f1 = int4 '0';
  one | f1 
 -----+----
      |  0
 (1 row)
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 < int2 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 < int2 '0';
  two |   f1   
 -----+--------
      |  -1234
      | -32767
 (2 rows)
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 < int4 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 < int4 '0';
  two |   f1   
 -----+--------
      |  -1234
      | -32767
 (2 rows)
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 <= int2 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 <= int2 '0';
  three |   f1   
 -------+--------
        |      0
@@ -103,7 +103,7 @@ SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 <= int2 '0';
        | -32767
 (3 rows)
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 <= int4 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 <= int4 '0';
  three |   f1   
 -------+--------
        |      0
@@ -111,21 +111,21 @@ SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 <= int4 '0';
        | -32767
 (3 rows)
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 > int2 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 > int2 '0';
  two |  f1   
 -----+-------
      |  1234
      | 32767
 (2 rows)
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 > int4 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 > int4 '0';
  two |  f1   
 -----+-------
      |  1234
      | 32767
 (2 rows)
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 >= int2 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 >= int2 '0';
  three |  f1   
 -------+-------
        |     0
@@ -133,7 +133,7 @@ SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 >= int2 '0';
        | 32767
 (3 rows)
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 >= int4 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 >= int4 '0';
  three |  f1   
 -------+-------
        |     0
@@ -142,14 +142,14 @@ SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 >= int4 '0';
 (3 rows)
 
 -- positive odds
-SELECT '' AS one, i.* FROM INT2_TBL i WHERE (i.f1 % int2 '2') = int2 '1';
+SELECT '' AS one, i.* FROM int2_tbl i WHERE (i.f1 % int2 '2') = int2 '1';
  one |  f1   
 -----+-------
      | 32767
 (1 row)
 
 -- any evens
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE (i.f1 % int4 '2') = int2 '0';
  three |  f1   
 -------+-------
        |     0
@@ -157,9 +157,9 @@ SELECT '' AS three, i.* FROM INT2_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
        | -1234
 (3 rows)
 
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int2_tbl i;
 ERROR:  smallint out of range
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT2_TBL i
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int2_tbl i
 WHERE abs(f1) < 16384;
  five |  f1   |   x   
 ------+-------+-------
@@ -168,7 +168,7 @@ WHERE abs(f1) < 16384;
       | -1234 | -2468
 (3 rows)
 
-SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM int2_tbl i;
  five |   f1   |   x    
 ------+--------+--------
       |      0 |      0
@@ -178,9 +178,9 @@ SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM INT2_TBL i;
       | -32767 | -65534
 (5 rows)
 
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int2_tbl i;
 ERROR:  smallint out of range
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT2_TBL i
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int2_tbl i
 WHERE f1 < 32766;
  five |   f1   |   x    
 ------+--------+--------
@@ -190,7 +190,7 @@ WHERE f1 < 32766;
       | -32767 | -32765
 (4 rows)
 
-SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM int2_tbl i;
  five |   f1   |   x    
 ------+--------+--------
       |      0 |      2
@@ -200,9 +200,9 @@ SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM INT2_TBL i;
       | -32767 | -32765
 (5 rows)
 
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int2_tbl i;
 ERROR:  smallint out of range
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT2_TBL i
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int2_tbl i
 WHERE f1 > -32767;
  five |  f1   |   x   
 ------+-------+-------
@@ -212,7 +212,7 @@ WHERE f1 > -32767;
       | 32767 | 32765
 (4 rows)
 
-SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM int2_tbl i;
  five |   f1   |   x    
 ------+--------+--------
       |      0 |     -2
@@ -222,7 +222,7 @@ SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM INT2_TBL i;
       | -32767 | -32769
 (5 rows)
 
-SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM int2_tbl i;
  five |   f1   |   x    
 ------+--------+--------
       |      0 |      0
@@ -232,7 +232,7 @@ SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM INT2_TBL i;
       | -32767 | -16383
 (5 rows)
 
-SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM int2_tbl i;
  five |   f1   |   x    
 ------+--------+--------
       |      0 |      0
diff --git a/src/test/regress/expected/int4.out b/src/test/regress/expected/int4.out
index 372fd4d..ee2f97e 100644
--- a/src/test/regress/expected/int4.out
+++ b/src/test/regress/expected/int4.out
@@ -1,47 +1,47 @@
 --
 -- INT4
 --
-CREATE TABLE INT4_TBL(f1 int4);
-INSERT INTO INT4_TBL(f1) VALUES ('   0  ');
-INSERT INTO INT4_TBL(f1) VALUES ('123456     ');
-INSERT INTO INT4_TBL(f1) VALUES ('    -123456');
-INSERT INTO INT4_TBL(f1) VALUES ('34.5');
+CREATE TABLE int4_tbl(f1 int4);
+INSERT INTO int4_tbl(f1) VALUES ('   0  ');
+INSERT INTO int4_tbl(f1) VALUES ('123456     ');
+INSERT INTO int4_tbl(f1) VALUES ('    -123456');
+INSERT INTO int4_tbl(f1) VALUES ('34.5');
 ERROR:  invalid input syntax for integer: "34.5"
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('34.5');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('34.5');
                                          ^
 -- largest and smallest values
-INSERT INTO INT4_TBL(f1) VALUES ('2147483647');
-INSERT INTO INT4_TBL(f1) VALUES ('-2147483647');
+INSERT INTO int4_tbl(f1) VALUES ('2147483647');
+INSERT INTO int4_tbl(f1) VALUES ('-2147483647');
 -- bad input values -- should give errors
-INSERT INTO INT4_TBL(f1) VALUES ('1000000000000');
+INSERT INTO int4_tbl(f1) VALUES ('1000000000000');
 ERROR:  value "1000000000000" is out of range for type integer
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('1000000000000');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('1000000000000');
                                          ^
-INSERT INTO INT4_TBL(f1) VALUES ('asdf');
+INSERT INTO int4_tbl(f1) VALUES ('asdf');
 ERROR:  invalid input syntax for integer: "asdf"
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('asdf');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('asdf');
                                          ^
-INSERT INTO INT4_TBL(f1) VALUES ('     ');
+INSERT INTO int4_tbl(f1) VALUES ('     ');
 ERROR:  invalid input syntax for integer: "     "
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('     ');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('     ');
                                          ^
-INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
+INSERT INTO int4_tbl(f1) VALUES ('   asdf   ');
 ERROR:  invalid input syntax for integer: "   asdf   "
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('   asdf   ');
                                          ^
-INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
+INSERT INTO int4_tbl(f1) VALUES ('- 1234');
 ERROR:  invalid input syntax for integer: "- 1234"
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('- 1234');
                                          ^
-INSERT INTO INT4_TBL(f1) VALUES ('123       5');
+INSERT INTO int4_tbl(f1) VALUES ('123       5');
 ERROR:  invalid input syntax for integer: "123       5"
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('123       5');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('123       5');
                                          ^
-INSERT INTO INT4_TBL(f1) VALUES ('');
+INSERT INTO int4_tbl(f1) VALUES ('');
 ERROR:  invalid input syntax for integer: ""
-LINE 1: INSERT INTO INT4_TBL(f1) VALUES ('');
+LINE 1: INSERT INTO int4_tbl(f1) VALUES ('');
                                          ^
-SELECT '' AS five, * FROM INT4_TBL;
+SELECT '' AS five, * FROM int4_tbl;
  five |     f1      
 ------+-------------
       |           0
@@ -51,7 +51,7 @@ SELECT '' AS five, * FROM INT4_TBL;
       | -2147483647
 (5 rows)
 
-SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> int2 '0';
+SELECT '' AS four, i.* FROM int4_tbl i WHERE i.f1 <> int2 '0';
  four |     f1      
 ------+-------------
       |      123456
@@ -60,7 +60,7 @@ SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> int2 '0';
       | -2147483647
 (4 rows)
 
-SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> int4 '0';
+SELECT '' AS four, i.* FROM int4_tbl i WHERE i.f1 <> int4 '0';
  four |     f1      
 ------+-------------
       |      123456
@@ -69,33 +69,33 @@ SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> int4 '0';
       | -2147483647
 (4 rows)
 
-SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = int2 '0';
+SELECT '' AS one, i.* FROM int4_tbl i WHERE i.f1 = int2 '0';
  one | f1 
 -----+----
      |  0
 (1 row)
 
-SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = int4 '0';
+SELECT '' AS one, i.* FROM int4_tbl i WHERE i.f1 = int4 '0';
  one | f1 
 -----+----
      |  0
 (1 row)
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < int2 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 < int2 '0';
  two |     f1      
 -----+-------------
      |     -123456
      | -2147483647
 (2 rows)
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < int4 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 < int4 '0';
  two |     f1      
 -----+-------------
      |     -123456
      | -2147483647
 (2 rows)
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= int2 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 <= int2 '0';
  three |     f1      
 -------+-------------
        |           0
@@ -103,7 +103,7 @@ SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= int2 '0';
        | -2147483647
 (3 rows)
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= int4 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 <= int4 '0';
  three |     f1      
 -------+-------------
        |           0
@@ -111,21 +111,21 @@ SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= int4 '0';
        | -2147483647
 (3 rows)
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > int2 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 > int2 '0';
  two |     f1     
 -----+------------
      |     123456
      | 2147483647
 (2 rows)
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > int4 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 > int4 '0';
  two |     f1     
 -----+------------
      |     123456
      | 2147483647
 (2 rows)
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= int2 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 >= int2 '0';
  three |     f1     
 -------+------------
        |          0
@@ -133,7 +133,7 @@ SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= int2 '0';
        | 2147483647
 (3 rows)
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= int4 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 >= int4 '0';
  three |     f1     
 -------+------------
        |          0
@@ -142,14 +142,14 @@ SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= int4 '0';
 (3 rows)
 
 -- positive odds
-SELECT '' AS one, i.* FROM INT4_TBL i WHERE (i.f1 % int2 '2') = int2 '1';
+SELECT '' AS one, i.* FROM int4_tbl i WHERE (i.f1 % int2 '2') = int2 '1';
  one |     f1     
 -----+------------
      | 2147483647
 (1 row)
 
 -- any evens
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE (i.f1 % int4 '2') = int2 '0';
  three |   f1    
 -------+---------
        |       0
@@ -157,9 +157,9 @@ SELECT '' AS three, i.* FROM INT4_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
        | -123456
 (3 rows)
 
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int4_tbl i;
 ERROR:  integer out of range
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int4_tbl i
 WHERE abs(f1) < 1073741824;
  five |   f1    |    x    
 ------+---------+---------
@@ -168,9 +168,9 @@ WHERE abs(f1) < 1073741824;
       | -123456 | -246912
 (3 rows)
 
-SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM int4_tbl i;
 ERROR:  integer out of range
-SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM int4_tbl i
 WHERE abs(f1) < 1073741824;
  five |   f1    |    x    
 ------+---------+---------
@@ -179,9 +179,9 @@ WHERE abs(f1) < 1073741824;
       | -123456 | -246912
 (3 rows)
 
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int4_tbl i;
 ERROR:  integer out of range
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int4_tbl i
 WHERE f1 < 2147483646;
  five |     f1      |      x      
 ------+-------------+-------------
@@ -191,9 +191,9 @@ WHERE f1 < 2147483646;
       | -2147483647 | -2147483645
 (4 rows)
 
-SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM int4_tbl i;
 ERROR:  integer out of range
-SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM int4_tbl i
 WHERE f1 < 2147483646;
  five |     f1      |      x      
 ------+-------------+-------------
@@ -203,9 +203,9 @@ WHERE f1 < 2147483646;
       | -2147483647 | -2147483645
 (4 rows)
 
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int4_tbl i;
 ERROR:  integer out of range
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int4_tbl i
 WHERE f1 > -2147483647;
  five |     f1     |     x      
 ------+------------+------------
@@ -215,9 +215,9 @@ WHERE f1 > -2147483647;
       | 2147483647 | 2147483645
 (4 rows)
 
-SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM int4_tbl i;
 ERROR:  integer out of range
-SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM int4_tbl i
 WHERE f1 > -2147483647;
  five |     f1     |     x      
 ------+------------+------------
@@ -227,7 +227,7 @@ WHERE f1 > -2147483647;
       | 2147483647 | 2147483645
 (4 rows)
 
-SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM int4_tbl i;
  five |     f1      |      x      
 ------+-------------+-------------
       |           0 |           0
@@ -237,7 +237,7 @@ SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM INT4_TBL i;
       | -2147483647 | -1073741823
 (5 rows)
 
-SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM int4_tbl i;
  five |     f1      |      x      
 ------+-------------+-------------
       |           0 |           0
diff --git a/src/test/regress/expected/int8.out b/src/test/regress/expected/int8.out
index ed0bd34..c48b177 100644
--- a/src/test/regress/expected/int8.out
+++ b/src/test/regress/expected/int8.out
@@ -2,42 +2,42 @@
 -- INT8
 -- Test int8 64-bit integers.
 --
-CREATE TABLE INT8_TBL(q1 int8, q2 int8);
-INSERT INTO INT8_TBL VALUES('  123   ','  456');
-INSERT INTO INT8_TBL VALUES('123   ','4567890123456789');
-INSERT INTO INT8_TBL VALUES('4567890123456789','123');
-INSERT INTO INT8_TBL VALUES(+4567890123456789,'4567890123456789');
-INSERT INTO INT8_TBL VALUES('+4567890123456789','-4567890123456789');
+CREATE TABLE int8_tbl(q1 int8, q2 int8);
+INSERT INTO int8_tbl VALUES('  123   ','  456');
+INSERT INTO int8_tbl VALUES('123   ','4567890123456789');
+INSERT INTO int8_tbl VALUES('4567890123456789','123');
+INSERT INTO int8_tbl VALUES(+4567890123456789,'4567890123456789');
+INSERT INTO int8_tbl VALUES('+4567890123456789','-4567890123456789');
 -- bad inputs
-INSERT INTO INT8_TBL(q1) VALUES ('      ');
+INSERT INTO int8_tbl(q1) VALUES ('      ');
 ERROR:  invalid input syntax for integer: "      "
-LINE 1: INSERT INTO INT8_TBL(q1) VALUES ('      ');
+LINE 1: INSERT INTO int8_tbl(q1) VALUES ('      ');
                                          ^
-INSERT INTO INT8_TBL(q1) VALUES ('xxx');
+INSERT INTO int8_tbl(q1) VALUES ('xxx');
 ERROR:  invalid input syntax for integer: "xxx"
-LINE 1: INSERT INTO INT8_TBL(q1) VALUES ('xxx');
+LINE 1: INSERT INTO int8_tbl(q1) VALUES ('xxx');
                                          ^
-INSERT INTO INT8_TBL(q1) VALUES ('3908203590239580293850293850329485');
+INSERT INTO int8_tbl(q1) VALUES ('3908203590239580293850293850329485');
 ERROR:  value "3908203590239580293850293850329485" is out of range for type bigint
-LINE 1: INSERT INTO INT8_TBL(q1) VALUES ('39082035902395802938502938...
+LINE 1: INSERT INTO int8_tbl(q1) VALUES ('39082035902395802938502938...
                                          ^
-INSERT INTO INT8_TBL(q1) VALUES ('-1204982019841029840928340329840934');
+INSERT INTO int8_tbl(q1) VALUES ('-1204982019841029840928340329840934');
 ERROR:  value "-1204982019841029840928340329840934" is out of range for type bigint
-LINE 1: INSERT INTO INT8_TBL(q1) VALUES ('-1204982019841029840928340...
+LINE 1: INSERT INTO int8_tbl(q1) VALUES ('-1204982019841029840928340...
                                          ^
-INSERT INTO INT8_TBL(q1) VALUES ('- 123');
+INSERT INTO int8_tbl(q1) VALUES ('- 123');
 ERROR:  invalid input syntax for integer: "- 123"
-LINE 1: INSERT INTO INT8_TBL(q1) VALUES ('- 123');
+LINE 1: INSERT INTO int8_tbl(q1) VALUES ('- 123');
                                          ^
-INSERT INTO INT8_TBL(q1) VALUES ('  345     5');
+INSERT INTO int8_tbl(q1) VALUES ('  345     5');
 ERROR:  invalid input syntax for integer: "  345     5"
-LINE 1: INSERT INTO INT8_TBL(q1) VALUES ('  345     5');
+LINE 1: INSERT INTO int8_tbl(q1) VALUES ('  345     5');
                                          ^
-INSERT INTO INT8_TBL(q1) VALUES ('');
+INSERT INTO int8_tbl(q1) VALUES ('');
 ERROR:  invalid input syntax for integer: ""
-LINE 1: INSERT INTO INT8_TBL(q1) VALUES ('');
+LINE 1: INSERT INTO int8_tbl(q1) VALUES ('');
                                          ^
-SELECT * FROM INT8_TBL;
+SELECT * FROM int8_tbl;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -48,14 +48,14 @@ SELECT * FROM INT8_TBL;
 (5 rows)
 
 -- int8/int8 cmp
-SELECT * FROM INT8_TBL WHERE q2 = 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 = 4567890123456789;
         q1        |        q2        
 ------------------+------------------
               123 | 4567890123456789
  4567890123456789 | 4567890123456789
 (2 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 <> 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 <> 4567890123456789;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -63,7 +63,7 @@ SELECT * FROM INT8_TBL WHERE q2 <> 4567890123456789;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 < 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 < 4567890123456789;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -71,12 +71,12 @@ SELECT * FROM INT8_TBL WHERE q2 < 4567890123456789;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 > 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 > 4567890123456789;
  q1 | q2 
 ----+----
 (0 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 <= 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 <= 4567890123456789;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -86,7 +86,7 @@ SELECT * FROM INT8_TBL WHERE q2 <= 4567890123456789;
  4567890123456789 | -4567890123456789
 (5 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 >= 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 >= 4567890123456789;
         q1        |        q2        
 ------------------+------------------
               123 | 4567890123456789
@@ -94,13 +94,13 @@ SELECT * FROM INT8_TBL WHERE q2 >= 4567890123456789;
 (2 rows)
 
 -- int8/int4 cmp
-SELECT * FROM INT8_TBL WHERE q2 = 456;
+SELECT * FROM int8_tbl WHERE q2 = 456;
  q1  | q2  
 -----+-----
  123 | 456
 (1 row)
 
-SELECT * FROM INT8_TBL WHERE q2 <> 456;
+SELECT * FROM int8_tbl WHERE q2 <> 456;
         q1        |        q2         
 ------------------+-------------------
               123 |  4567890123456789
@@ -109,21 +109,21 @@ SELECT * FROM INT8_TBL WHERE q2 <> 456;
  4567890123456789 | -4567890123456789
 (4 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 < 456;
+SELECT * FROM int8_tbl WHERE q2 < 456;
         q1        |        q2         
 ------------------+-------------------
  4567890123456789 |               123
  4567890123456789 | -4567890123456789
 (2 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 > 456;
+SELECT * FROM int8_tbl WHERE q2 > 456;
         q1        |        q2        
 ------------------+------------------
               123 | 4567890123456789
  4567890123456789 | 4567890123456789
 (2 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 <= 456;
+SELECT * FROM int8_tbl WHERE q2 <= 456;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -131,7 +131,7 @@ SELECT * FROM INT8_TBL WHERE q2 <= 456;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 >= 456;
+SELECT * FROM int8_tbl WHERE q2 >= 456;
         q1        |        q2        
 ------------------+------------------
               123 |              456
@@ -140,14 +140,14 @@ SELECT * FROM INT8_TBL WHERE q2 >= 456;
 (3 rows)
 
 -- int4/int8 cmp
-SELECT * FROM INT8_TBL WHERE 123 = q1;
+SELECT * FROM int8_tbl WHERE 123 = q1;
  q1  |        q2        
 -----+------------------
  123 |              456
  123 | 4567890123456789
 (2 rows)
 
-SELECT * FROM INT8_TBL WHERE 123 <> q1;
+SELECT * FROM int8_tbl WHERE 123 <> q1;
         q1        |        q2         
 ------------------+-------------------
  4567890123456789 |               123
@@ -155,7 +155,7 @@ SELECT * FROM INT8_TBL WHERE 123 <> q1;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE 123 < q1;
+SELECT * FROM int8_tbl WHERE 123 < q1;
         q1        |        q2         
 ------------------+-------------------
  4567890123456789 |               123
@@ -163,12 +163,12 @@ SELECT * FROM INT8_TBL WHERE 123 < q1;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE 123 > q1;
+SELECT * FROM int8_tbl WHERE 123 > q1;
  q1 | q2 
 ----+----
 (0 rows)
 
-SELECT * FROM INT8_TBL WHERE 123 <= q1;
+SELECT * FROM int8_tbl WHERE 123 <= q1;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -178,7 +178,7 @@ SELECT * FROM INT8_TBL WHERE 123 <= q1;
  4567890123456789 | -4567890123456789
 (5 rows)
 
-SELECT * FROM INT8_TBL WHERE 123 >= q1;
+SELECT * FROM int8_tbl WHERE 123 >= q1;
  q1  |        q2        
 -----+------------------
  123 |              456
@@ -186,13 +186,13 @@ SELECT * FROM INT8_TBL WHERE 123 >= q1;
 (2 rows)
 
 -- int8/int2 cmp
-SELECT * FROM INT8_TBL WHERE q2 = '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 = '456'::int2;
  q1  | q2  
 -----+-----
  123 | 456
 (1 row)
 
-SELECT * FROM INT8_TBL WHERE q2 <> '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 <> '456'::int2;
         q1        |        q2         
 ------------------+-------------------
               123 |  4567890123456789
@@ -201,21 +201,21 @@ SELECT * FROM INT8_TBL WHERE q2 <> '456'::int2;
  4567890123456789 | -4567890123456789
 (4 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 < '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 < '456'::int2;
         q1        |        q2         
 ------------------+-------------------
  4567890123456789 |               123
  4567890123456789 | -4567890123456789
 (2 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 > '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 > '456'::int2;
         q1        |        q2        
 ------------------+------------------
               123 | 4567890123456789
  4567890123456789 | 4567890123456789
 (2 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 <= '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 <= '456'::int2;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -223,7 +223,7 @@ SELECT * FROM INT8_TBL WHERE q2 <= '456'::int2;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE q2 >= '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 >= '456'::int2;
         q1        |        q2        
 ------------------+------------------
               123 |              456
@@ -232,14 +232,14 @@ SELECT * FROM INT8_TBL WHERE q2 >= '456'::int2;
 (3 rows)
 
 -- int2/int8 cmp
-SELECT * FROM INT8_TBL WHERE '123'::int2 = q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 = q1;
  q1  |        q2        
 -----+------------------
  123 |              456
  123 | 4567890123456789
 (2 rows)
 
-SELECT * FROM INT8_TBL WHERE '123'::int2 <> q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 <> q1;
         q1        |        q2         
 ------------------+-------------------
  4567890123456789 |               123
@@ -247,7 +247,7 @@ SELECT * FROM INT8_TBL WHERE '123'::int2 <> q1;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE '123'::int2 < q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 < q1;
         q1        |        q2         
 ------------------+-------------------
  4567890123456789 |               123
@@ -255,12 +255,12 @@ SELECT * FROM INT8_TBL WHERE '123'::int2 < q1;
  4567890123456789 | -4567890123456789
 (3 rows)
 
-SELECT * FROM INT8_TBL WHERE '123'::int2 > q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 > q1;
  q1 | q2 
 ----+----
 (0 rows)
 
-SELECT * FROM INT8_TBL WHERE '123'::int2 <= q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 <= q1;
         q1        |        q2         
 ------------------+-------------------
               123 |               456
@@ -270,14 +270,14 @@ SELECT * FROM INT8_TBL WHERE '123'::int2 <= q1;
  4567890123456789 | -4567890123456789
 (5 rows)
 
-SELECT * FROM INT8_TBL WHERE '123'::int2 >= q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 >= q1;
  q1  |        q2        
 -----+------------------
  123 |              456
  123 | 4567890123456789
 (2 rows)
 
-SELECT '' AS five, q1 AS plus, -q1 AS minus FROM INT8_TBL;
+SELECT '' AS five, q1 AS plus, -q1 AS minus FROM int8_tbl;
  five |       plus       |       minus       
 ------+------------------+-------------------
       |              123 |              -123
@@ -287,7 +287,7 @@ SELECT '' AS five, q1 AS plus, -q1 AS minus FROM INT8_TBL;
       | 4567890123456789 | -4567890123456789
 (5 rows)
 
-SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM INT8_TBL;
+SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM int8_tbl;
  five |        q1        |        q2         |       plus       
 ------+------------------+-------------------+------------------
       |              123 |               456 |              579
@@ -297,7 +297,7 @@ SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM INT8_TBL;
       | 4567890123456789 | -4567890123456789 |                0
 (5 rows)
 
-SELECT '' AS five, q1, q2, q1 - q2 AS minus FROM INT8_TBL;
+SELECT '' AS five, q1, q2, q1 - q2 AS minus FROM int8_tbl;
  five |        q1        |        q2         |       minus       
 ------+------------------+-------------------+-------------------
       |              123 |               456 |              -333
@@ -307,9 +307,9 @@ SELECT '' AS five, q1, q2, q1 - q2 AS minus FROM INT8_TBL;
       | 4567890123456789 | -4567890123456789 |  9135780246913578
 (5 rows)
 
-SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM INT8_TBL;
+SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM int8_tbl;
 ERROR:  bigint out of range
-SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM INT8_TBL
+SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM int8_tbl
  WHERE q1 < 1000 or (q2 > 0 and q2 < 1000);
  three |        q1        |        q2        |      multiply      
 -------+------------------+------------------+--------------------
@@ -318,7 +318,7 @@ SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM INT8_TBL
        | 4567890123456789 |              123 | 561850485185185047
 (3 rows)
 
-SELECT '' AS five, q1, q2, q1 / q2 AS divide, q1 % q2 AS mod FROM INT8_TBL;
+SELECT '' AS five, q1, q2, q1 / q2 AS divide, q1 % q2 AS mod FROM int8_tbl;
  five |        q1        |        q2         |     divide     | mod 
 ------+------------------+-------------------+----------------+-----
       |              123 |               456 |              0 | 123
@@ -328,7 +328,7 @@ SELECT '' AS five, q1, q2, q1 / q2 AS divide, q1 % q2 AS mod FROM INT8_TBL;
       | 4567890123456789 | -4567890123456789 |             -1 |   0
 (5 rows)
 
-SELECT '' AS five, q1, float8(q1) FROM INT8_TBL;
+SELECT '' AS five, q1, float8(q1) FROM int8_tbl;
  five |        q1        |        float8        
 ------+------------------+----------------------
       |              123 |                  123
@@ -338,7 +338,7 @@ SELECT '' AS five, q1, float8(q1) FROM INT8_TBL;
       | 4567890123456789 | 4.56789012345679e+15
 (5 rows)
 
-SELECT '' AS five, q2, float8(q2) FROM INT8_TBL;
+SELECT '' AS five, q2, float8(q2) FROM int8_tbl;
  five |        q2         |        float8         
 ------+-------------------+-----------------------
       |               456 |                   456
@@ -348,7 +348,7 @@ SELECT '' AS five, q2, float8(q2) FROM INT8_TBL;
       | -4567890123456789 | -4.56789012345679e+15
 (5 rows)
 
-SELECT 37 + q1 AS plus4 FROM INT8_TBL;
+SELECT 37 + q1 AS plus4 FROM int8_tbl;
       plus4       
 ------------------
               160
@@ -358,7 +358,7 @@ SELECT 37 + q1 AS plus4 FROM INT8_TBL;
  4567890123456826
 (5 rows)
 
-SELECT 37 - q1 AS minus4 FROM INT8_TBL;
+SELECT 37 - q1 AS minus4 FROM int8_tbl;
       minus4       
 -------------------
                -86
@@ -368,7 +368,7 @@ SELECT 37 - q1 AS minus4 FROM INT8_TBL;
  -4567890123456752
 (5 rows)
 
-SELECT '' AS five, 2 * q1 AS "twice int4" FROM INT8_TBL;
+SELECT '' AS five, 2 * q1 AS "twice int4" FROM int8_tbl;
  five |    twice int4    
 ------+------------------
       |              246
@@ -378,7 +378,7 @@ SELECT '' AS five, 2 * q1 AS "twice int4" FROM INT8_TBL;
       | 9135780246913578
 (5 rows)
 
-SELECT '' AS five, q1 * 2 AS "twice int4" FROM INT8_TBL;
+SELECT '' AS five, q1 * 2 AS "twice int4" FROM int8_tbl;
  five |    twice int4    
 ------+------------------
       |              246
@@ -389,7 +389,7 @@ SELECT '' AS five, q1 * 2 AS "twice int4" FROM INT8_TBL;
 (5 rows)
 
 -- int8 op int4
-SELECT q1 + 42::int4 AS "8plus4", q1 - 42::int4 AS "8minus4", q1 * 42::int4 AS "8mul4", q1 / 42::int4 AS "8div4" FROM INT8_TBL;
+SELECT q1 + 42::int4 AS "8plus4", q1 - 42::int4 AS "8minus4", q1 * 42::int4 AS "8mul4", q1 / 42::int4 AS "8div4" FROM int8_tbl;
       8plus4      |     8minus4      |       8mul4        |      8div4      
 ------------------+------------------+--------------------+-----------------
               165 |               81 |               5166 |               2
@@ -400,7 +400,7 @@ SELECT q1 + 42::int4 AS "8plus4", q1 - 42::int4 AS "8minus4", q1 * 42::int4 AS "
 (5 rows)
 
 -- int4 op int8
-SELECT 246::int4 + q1 AS "4plus8", 246::int4 - q1 AS "4minus8", 246::int4 * q1 AS "4mul8", 246::int4 / q1 AS "4div8" FROM INT8_TBL;
+SELECT 246::int4 + q1 AS "4plus8", 246::int4 - q1 AS "4minus8", 246::int4 * q1 AS "4mul8", 246::int4 / q1 AS "4div8" FROM int8_tbl;
       4plus8      |      4minus8      |        4mul8        | 4div8 
 ------------------+-------------------+---------------------+-------
               369 |               123 |               30258 |     2
@@ -411,7 +411,7 @@ SELECT 246::int4 + q1 AS "4plus8", 246::int4 - q1 AS "4minus8", 246::int4 * q1 A
 (5 rows)
 
 -- int8 op int2
-SELECT q1 + 42::int2 AS "8plus2", q1 - 42::int2 AS "8minus2", q1 * 42::int2 AS "8mul2", q1 / 42::int2 AS "8div2" FROM INT8_TBL;
+SELECT q1 + 42::int2 AS "8plus2", q1 - 42::int2 AS "8minus2", q1 * 42::int2 AS "8mul2", q1 / 42::int2 AS "8div2" FROM int8_tbl;
       8plus2      |     8minus2      |       8mul2        |      8div2      
 ------------------+------------------+--------------------+-----------------
               165 |               81 |               5166 |               2
@@ -422,7 +422,7 @@ SELECT q1 + 42::int2 AS "8plus2", q1 - 42::int2 AS "8minus2", q1 * 42::int2 AS "
 (5 rows)
 
 -- int2 op int8
-SELECT 246::int2 + q1 AS "2plus8", 246::int2 - q1 AS "2minus8", 246::int2 * q1 AS "2mul8", 246::int2 / q1 AS "2div8" FROM INT8_TBL;
+SELECT 246::int2 + q1 AS "2plus8", 246::int2 - q1 AS "2minus8", 246::int2 * q1 AS "2mul8", 246::int2 / q1 AS "2div8" FROM int8_tbl;
       2plus8      |      2minus8      |        2mul8        | 2div8 
 ------------------+-------------------+---------------------+-------
               369 |               123 |               30258 |     2
@@ -432,7 +432,7 @@ SELECT 246::int2 + q1 AS "2plus8", 246::int2 - q1 AS "2minus8", 246::int2 * q1 A
  4567890123457035 | -4567890123456543 | 1123700970370370094 |     0
 (5 rows)
 
-SELECT q2, abs(q2) FROM INT8_TBL;
+SELECT q2, abs(q2) FROM int8_tbl;
         q2         |       abs        
 -------------------+------------------
                456 |              456
@@ -442,13 +442,13 @@ SELECT q2, abs(q2) FROM INT8_TBL;
  -4567890123456789 | 4567890123456789
 (5 rows)
 
-SELECT min(q1), min(q2) FROM INT8_TBL;
+SELECT min(q1), min(q2) FROM int8_tbl;
  min |        min        
 -----+-------------------
  123 | -4567890123456789
 (1 row)
 
-SELECT max(q1), max(q2) FROM INT8_TBL;
+SELECT max(q1), max(q2) FROM int8_tbl;
        max        |       max        
 ------------------+------------------
  4567890123456789 | 4567890123456789
@@ -457,7 +457,7 @@ SELECT max(q1), max(q2) FROM INT8_TBL;
 -- TO_CHAR()
 --
 SELECT '' AS to_char_1, to_char(q1, '9G999G999G999G999G999'), to_char(q2, '9,999,999,999,999,999')
-	FROM INT8_TBL;
+	FROM int8_tbl;
  to_char_1 |        to_char         |        to_char         
 -----------+------------------------+------------------------
            |                    123 |                    456
@@ -468,7 +468,7 @@ SELECT '' AS to_char_1, to_char(q1, '9G999G999G999G999G999'), to_char(q2, '9,999
 (5 rows)
 
 SELECT '' AS to_char_2, to_char(q1, '9G999G999G999G999G999D999G999'), to_char(q2, '9,999,999,999,999,999.999,999')
-	FROM INT8_TBL;
+	FROM int8_tbl;
  to_char_2 |            to_char             |            to_char             
 -----------+--------------------------------+--------------------------------
            |                    123.000,000 |                    456.000,000
@@ -479,7 +479,7 @@ SELECT '' AS to_char_2, to_char(q1, '9G999G999G999G999G999D999G999'), to_char(q2
 (5 rows)
 
 SELECT '' AS to_char_3, to_char( (q1 * -1), '9999999999999999PR'), to_char( (q2 * -1), '9999999999999999.999PR')
-	FROM INT8_TBL;
+	FROM int8_tbl;
  to_char_3 |      to_char       |        to_char         
 -----------+--------------------+------------------------
            |              <123> |              <456.000>
@@ -490,7 +490,7 @@ SELECT '' AS to_char_3, to_char( (q1 * -1), '9999999999999999PR'), to_char( (q2
 (5 rows)
 
 SELECT '' AS to_char_4, to_char( (q1 * -1), '9999999999999999S'), to_char( (q2 * -1), 'S9999999999999999')
-	FROM INT8_TBL;
+	FROM int8_tbl;
  to_char_4 |      to_char      |      to_char      
 -----------+-------------------+-------------------
            |              123- |              -456
@@ -500,7 +500,7 @@ SELECT '' AS to_char_4, to_char( (q1 * -1), '9999999999999999S'), to_char( (q2 *
            | 4567890123456789- | +4567890123456789
 (5 rows)
 
-SELECT '' AS to_char_5,  to_char(q2, 'MI9999999999999999')     FROM INT8_TBL;
+SELECT '' AS to_char_5,  to_char(q2, 'MI9999999999999999')     FROM int8_tbl;
  to_char_5 |      to_char      
 -----------+-------------------
            |               456
@@ -510,7 +510,7 @@ SELECT '' AS to_char_5,  to_char(q2, 'MI9999999999999999')     FROM INT8_TBL;
            | -4567890123456789
 (5 rows)
 
-SELECT '' AS to_char_6,  to_char(q2, 'FMS9999999999999999')    FROM INT8_TBL;
+SELECT '' AS to_char_6,  to_char(q2, 'FMS9999999999999999')    FROM int8_tbl;
  to_char_6 |      to_char      
 -----------+-------------------
            | +456
@@ -520,7 +520,7 @@ SELECT '' AS to_char_6,  to_char(q2, 'FMS9999999999999999')    FROM INT8_TBL;
            | -4567890123456789
 (5 rows)
 
-SELECT '' AS to_char_7,  to_char(q2, 'FM9999999999999999THPR') FROM INT8_TBL;
+SELECT '' AS to_char_7,  to_char(q2, 'FM9999999999999999THPR') FROM int8_tbl;
  to_char_7 |      to_char       
 -----------+--------------------
            | 456TH
@@ -530,7 +530,7 @@ SELECT '' AS to_char_7,  to_char(q2, 'FM9999999999999999THPR') FROM INT8_TBL;
            | <4567890123456789>
 (5 rows)
 
-SELECT '' AS to_char_8,  to_char(q2, 'SG9999999999999999th')   FROM INT8_TBL;
+SELECT '' AS to_char_8,  to_char(q2, 'SG9999999999999999th')   FROM int8_tbl;
  to_char_8 |       to_char       
 -----------+---------------------
            | +             456th
@@ -540,7 +540,7 @@ SELECT '' AS to_char_8,  to_char(q2, 'SG9999999999999999th')   FROM INT8_TBL;
            | -4567890123456789
 (5 rows)
 
-SELECT '' AS to_char_9,  to_char(q2, '0999999999999999')       FROM INT8_TBL;
+SELECT '' AS to_char_9,  to_char(q2, '0999999999999999')       FROM int8_tbl;
  to_char_9 |      to_char      
 -----------+-------------------
            |  0000000000000456
@@ -550,7 +550,7 @@ SELECT '' AS to_char_9,  to_char(q2, '0999999999999999')       FROM INT8_TBL;
            | -4567890123456789
 (5 rows)
 
-SELECT '' AS to_char_10, to_char(q2, 'S0999999999999999')      FROM INT8_TBL;
+SELECT '' AS to_char_10, to_char(q2, 'S0999999999999999')      FROM int8_tbl;
  to_char_10 |      to_char      
 ------------+-------------------
             | +0000000000000456
@@ -560,7 +560,7 @@ SELECT '' AS to_char_10, to_char(q2, 'S0999999999999999')      FROM INT8_TBL;
             | -4567890123456789
 (5 rows)
 
-SELECT '' AS to_char_11, to_char(q2, 'FM0999999999999999')     FROM INT8_TBL;
+SELECT '' AS to_char_11, to_char(q2, 'FM0999999999999999')     FROM int8_tbl;
  to_char_11 |      to_char      
 ------------+-------------------
             | 0000000000000456
@@ -570,7 +570,7 @@ SELECT '' AS to_char_11, to_char(q2, 'FM0999999999999999')     FROM INT8_TBL;
             | -4567890123456789
 (5 rows)
 
-SELECT '' AS to_char_12, to_char(q2, 'FM9999999999999999.000') FROM INT8_TBL;
+SELECT '' AS to_char_12, to_char(q2, 'FM9999999999999999.000') FROM int8_tbl;
  to_char_12 |        to_char        
 ------------+-----------------------
             | 456.000
@@ -580,7 +580,7 @@ SELECT '' AS to_char_12, to_char(q2, 'FM9999999999999999.000') FROM INT8_TBL;
             | -4567890123456789.000
 (5 rows)
 
-SELECT '' AS to_char_13, to_char(q2, 'L9999999999999999.000')  FROM INT8_TBL;
+SELECT '' AS to_char_13, to_char(q2, 'L9999999999999999.000')  FROM int8_tbl;
  to_char_13 |        to_char         
 ------------+------------------------
             |                456.000
@@ -590,7 +590,7 @@ SELECT '' AS to_char_13, to_char(q2, 'L9999999999999999.000')  FROM INT8_TBL;
             |  -4567890123456789.000
 (5 rows)
 
-SELECT '' AS to_char_14, to_char(q2, 'FM9999999999999999.999') FROM INT8_TBL;
+SELECT '' AS to_char_14, to_char(q2, 'FM9999999999999999.999') FROM int8_tbl;
  to_char_14 |      to_char       
 ------------+--------------------
             | 456.
@@ -600,7 +600,7 @@ SELECT '' AS to_char_14, to_char(q2, 'FM9999999999999999.999') FROM INT8_TBL;
             | -4567890123456789.
 (5 rows)
 
-SELECT '' AS to_char_15, to_char(q2, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9') FROM INT8_TBL;
+SELECT '' AS to_char_15, to_char(q2, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9') FROM int8_tbl;
  to_char_15 |                  to_char                  
 ------------+-------------------------------------------
             |                            +4 5 6 . 0 0 0
@@ -610,7 +610,7 @@ SELECT '' AS to_char_15, to_char(q2, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9'
             |  -4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 . 0 0 0
 (5 rows)
 
-SELECT '' AS to_char_16, to_char(q2, E'99999 "text" 9999 "9999" 999 "\\"text between quote marks\\"" 9999') FROM INT8_TBL;
+SELECT '' AS to_char_16, to_char(q2, E'99999 "text" 9999 "9999" 999 "\\"text between quote marks\\"" 9999') FROM int8_tbl;
  to_char_16 |                          to_char                          
 ------------+-----------------------------------------------------------
             |       text      9999     "text between quote marks"   456
@@ -620,7 +620,7 @@ SELECT '' AS to_char_16, to_char(q2, E'99999 "text" 9999 "9999" 999 "\\"text bet
             | -45678 text 9012 9999 345 "text between quote marks" 6789
 (5 rows)
 
-SELECT '' AS to_char_17, to_char(q2, '999999SG9999999999')     FROM INT8_TBL;
+SELECT '' AS to_char_17, to_char(q2, '999999SG9999999999')     FROM int8_tbl;
  to_char_17 |      to_char      
 ------------+-------------------
             |       +       456
@@ -725,7 +725,7 @@ SELECT CAST('42'::int2 AS int8), CAST('-37'::int2 AS int8);
    42 |  -37
 (1 row)
 
-SELECT CAST(q1 AS float4), CAST(q2 AS float8) FROM INT8_TBL;
+SELECT CAST(q1 AS float4), CAST(q2 AS float8) FROM int8_tbl;
      q1      |          q2           
 -------------+-----------------------
          123 |                   456
@@ -743,7 +743,7 @@ SELECT CAST('36854775807.0'::float4 AS int8);
 
 SELECT CAST('922337203685477580700.0'::float8 AS int8);
 ERROR:  bigint out of range
-SELECT CAST(q1 AS oid) FROM INT8_TBL;
+SELECT CAST(q1 AS oid) FROM int8_tbl;
 ERROR:  OID out of range
 SELECT oid::int8 FROM pg_class WHERE relname = 'pg_class';
  oid  
@@ -752,7 +752,7 @@ SELECT oid::int8 FROM pg_class WHERE relname = 'pg_class';
 (1 row)
 
 -- bit operations
-SELECT q1, q2, q1 & q2 AS "and", q1 | q2 AS "or", q1 # q2 AS "xor", ~q1 AS "not" FROM INT8_TBL;
+SELECT q1, q2, q1 & q2 AS "and", q1 | q2 AS "or", q1 # q2 AS "xor", ~q1 AS "not" FROM int8_tbl;
         q1        |        q2         |       and        |        or        |       xor        |        not        
 ------------------+-------------------+------------------+------------------+------------------+-------------------
               123 |               456 |               72 |              507 |              435 |              -124
@@ -762,7 +762,7 @@ SELECT q1, q2, q1 & q2 AS "and", q1 | q2 AS "or", q1 # q2 AS "xor", ~q1 AS "not"
  4567890123456789 | -4567890123456789 |                1 |               -1 |               -2 | -4567890123456790
 (5 rows)
 
-SELECT q1, q1 << 2 AS "shl", q1 >> 3 AS "shr" FROM INT8_TBL;
+SELECT q1, q1 << 2 AS "shl", q1 >> 3 AS "shr" FROM int8_tbl;
         q1        |        shl        |       shr       
 ------------------+-------------------+-----------------
               123 |               492 |              15
diff --git a/src/test/regress/expected/interval.out b/src/test/regress/expected/interval.out
index 946c97a..5d6546c 100644
--- a/src/test/regress/expected/interval.out
+++ b/src/test/regress/expected/interval.out
@@ -52,28 +52,28 @@ SELECT INTERVAL '10 years -11 month -12 days +13:14' AS "9 years...";
  9 years 1 mon -12 days +13:14:00
 (1 row)
 
-CREATE TABLE INTERVAL_TBL (f1 interval);
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 1 minute');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 5 hour');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 10 day');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 34 year');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 3 months');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 14 seconds ago');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('1 day 2 hours 3 minutes 4 seconds');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('6 years');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('5 months');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('5 months 12 hours');
+CREATE TABLE interval_tbl (f1 interval);
+INSERT INTO interval_tbl (f1) VALUES ('@ 1 minute');
+INSERT INTO interval_tbl (f1) VALUES ('@ 5 hour');
+INSERT INTO interval_tbl (f1) VALUES ('@ 10 day');
+INSERT INTO interval_tbl (f1) VALUES ('@ 34 year');
+INSERT INTO interval_tbl (f1) VALUES ('@ 3 months');
+INSERT INTO interval_tbl (f1) VALUES ('@ 14 seconds ago');
+INSERT INTO interval_tbl (f1) VALUES ('1 day 2 hours 3 minutes 4 seconds');
+INSERT INTO interval_tbl (f1) VALUES ('6 years');
+INSERT INTO interval_tbl (f1) VALUES ('5 months');
+INSERT INTO interval_tbl (f1) VALUES ('5 months 12 hours');
 -- badly formatted interval
-INSERT INTO INTERVAL_TBL (f1) VALUES ('badly formatted interval');
+INSERT INTO interval_tbl (f1) VALUES ('badly formatted interval');
 ERROR:  invalid input syntax for type interval: "badly formatted interval"
-LINE 1: INSERT INTO INTERVAL_TBL (f1) VALUES ('badly formatted inter...
+LINE 1: INSERT INTO interval_tbl (f1) VALUES ('badly formatted inter...
                                               ^
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 30 eons ago');
+INSERT INTO interval_tbl (f1) VALUES ('@ 30 eons ago');
 ERROR:  invalid input syntax for type interval: "@ 30 eons ago"
-LINE 1: INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 30 eons ago');
+LINE 1: INSERT INTO interval_tbl (f1) VALUES ('@ 30 eons ago');
                                               ^
 -- test interval operators
-SELECT '' AS ten, * FROM INTERVAL_TBL;
+SELECT '' AS ten, * FROM interval_tbl;
  ten |       f1        
 -----+-----------------
      | 00:01:00
@@ -88,8 +88,8 @@ SELECT '' AS ten, * FROM INTERVAL_TBL;
      | 5 mons 12:00:00
 (10 rows)
 
-SELECT '' AS nine, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 <> interval '@ 10 days';
+SELECT '' AS nine, * FROM interval_tbl
+   WHERE interval_tbl.f1 <> interval '@ 10 days';
  nine |       f1        
 ------+-----------------
       | 00:01:00
@@ -103,8 +103,8 @@ SELECT '' AS nine, * FROM INTERVAL_TBL
       | 5 mons 12:00:00
 (9 rows)
 
-SELECT '' AS three, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 <= interval '@ 5 hours';
+SELECT '' AS three, * FROM interval_tbl
+   WHERE interval_tbl.f1 <= interval '@ 5 hours';
  three |    f1     
 -------+-----------
        | 00:01:00
@@ -112,8 +112,8 @@ SELECT '' AS three, * FROM INTERVAL_TBL
        | -00:00:14
 (3 rows)
 
-SELECT '' AS three, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 < interval '@ 1 day';
+SELECT '' AS three, * FROM interval_tbl
+   WHERE interval_tbl.f1 < interval '@ 1 day';
  three |    f1     
 -------+-----------
        | 00:01:00
@@ -121,15 +121,15 @@ SELECT '' AS three, * FROM INTERVAL_TBL
        | -00:00:14
 (3 rows)
 
-SELECT '' AS one, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 = interval '@ 34 years';
+SELECT '' AS one, * FROM interval_tbl
+   WHERE interval_tbl.f1 = interval '@ 34 years';
  one |    f1    
 -----+----------
      | 34 years
 (1 row)
 
-SELECT '' AS five, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 >= interval '@ 1 month';
+SELECT '' AS five, * FROM interval_tbl
+   WHERE interval_tbl.f1 >= interval '@ 1 month';
  five |       f1        
 ------+-----------------
       | 34 years
@@ -139,8 +139,8 @@ SELECT '' AS five, * FROM INTERVAL_TBL
       | 5 mons 12:00:00
 (5 rows)
 
-SELECT '' AS nine, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 > interval '@ 3 seconds ago';
+SELECT '' AS nine, * FROM interval_tbl
+   WHERE interval_tbl.f1 > interval '@ 3 seconds ago';
  nine |       f1        
 ------+-----------------
       | 00:01:00
@@ -155,7 +155,7 @@ SELECT '' AS nine, * FROM INTERVAL_TBL
 (9 rows)
 
 SELECT '' AS fortyfive, r1.*, r2.*
-   FROM INTERVAL_TBL r1, INTERVAL_TBL r2
+   FROM interval_tbl r1, interval_tbl r2
    WHERE r1.f1 > r2.f1
    ORDER BY r1.f1, r2.f1;
  fortyfive |       f1        |       f1        
@@ -275,7 +275,7 @@ FROM INTERVAL_MULDIV_TBL;
 DROP TABLE INTERVAL_MULDIV_TBL;
 SET DATESTYLE = 'postgres';
 SET IntervalStyle to postgres_verbose;
-SELECT '' AS ten, * FROM INTERVAL_TBL;
+SELECT '' AS ten, * FROM interval_tbl;
  ten |              f1               
 -----+-------------------------------
      | @ 1 min
diff --git a/src/test/regress/expected/numerology.out b/src/test/regress/expected/numerology.out
index 0a2e66e..04f847a 100644
--- a/src/test/regress/expected/numerology.out
+++ b/src/test/regress/expected/numerology.out
@@ -9,9 +9,9 @@
 --
 CREATE TABLE TEMP_FLOAT (f1 FLOAT8);
 INSERT INTO TEMP_FLOAT (f1)
-  SELECT float8(f1) FROM INT4_TBL;
+  SELECT float8(f1) FROM int4_tbl;
 INSERT INTO TEMP_FLOAT (f1)
-  SELECT float8(f1) FROM INT2_TBL;
+  SELECT float8(f1) FROM int2_tbl;
 SELECT '' AS ten, f1 FROM TEMP_FLOAT
   ORDER BY f1;
  ten |     f1      
@@ -31,10 +31,10 @@ SELECT '' AS ten, f1 FROM TEMP_FLOAT
 -- int4
 CREATE TABLE TEMP_INT4 (f1 INT4);
 INSERT INTO TEMP_INT4 (f1)
-  SELECT int4(f1) FROM FLOAT8_TBL
+  SELECT int4(f1) FROM float8_tbl
   WHERE (f1 > -2147483647) AND (f1 < 2147483647);
 INSERT INTO TEMP_INT4 (f1)
-  SELECT int4(f1) FROM INT2_TBL;
+  SELECT int4(f1) FROM int2_tbl;
 SELECT '' AS nine, f1 FROM TEMP_INT4
   ORDER BY f1;
  nine |   f1   
@@ -53,10 +53,10 @@ SELECT '' AS nine, f1 FROM TEMP_INT4
 -- int2
 CREATE TABLE TEMP_INT2 (f1 INT2);
 INSERT INTO TEMP_INT2 (f1)
-  SELECT int2(f1) FROM FLOAT8_TBL
+  SELECT int2(f1) FROM float8_tbl
   WHERE (f1 >= -32767) AND (f1 <= 32767);
 INSERT INTO TEMP_INT2 (f1)
-  SELECT int2(f1) FROM INT4_TBL
+  SELECT int2(f1) FROM int4_tbl
   WHERE (f1 >= -32767) AND (f1 <= 32767);
 SELECT '' AS five, f1 FROM TEMP_INT2
   ORDER BY f1;
@@ -75,10 +75,10 @@ SELECT '' AS five, f1 FROM TEMP_INT2
 CREATE TABLE TEMP_GROUP (f1 INT4, f2 INT4, f3 FLOAT8);
 INSERT INTO TEMP_GROUP
   SELECT 1, (- i.f1), (- f.f1)
-  FROM INT4_TBL i, FLOAT8_TBL f;
+  FROM int4_tbl i, float8_tbl f;
 INSERT INTO TEMP_GROUP
   SELECT 2, i.f1, f.f1
-  FROM INT4_TBL i, FLOAT8_TBL f;
+  FROM int4_tbl i, float8_tbl f;
 SELECT DISTINCT f1 AS two FROM TEMP_GROUP ORDER BY 1;
  two 
 -----
diff --git a/src/test/regress/expected/plpgsql.out b/src/test/regress/expected/plpgsql.out
index fdaffa2..4161ea6 100644
--- a/src/test/regress/expected/plpgsql.out
+++ b/src/test/regress/expected/plpgsql.out
@@ -36,7 +36,7 @@ create table PField (
     name	text,
     comment	text
 );
-create unique index PField_name on PField using btree (name text_ops);
+create unique index pfield_name on PField using btree (name text_ops);
 create table PSlot (
     slotname	char(20),
     pfname	text,
@@ -63,13 +63,13 @@ create table HSlot (
     slotno	integer,
     slotlink	char(20)
 );
-create unique index HSlot_name on HSlot using btree (slotname bpchar_ops);
+create unique index hslot_name on HSlot using btree (slotname bpchar_ops);
 create index HSlot_hubname on HSlot using btree (hubname bpchar_ops);
-create table System (
+create table system (
     name	text,
     comment	text
 );
-create unique index System_name on System using btree (name text_ops);
+create unique index system_name on system using btree (name text_ops);
 create table IFace (
     slotname	char(20),
     sysname	text,
@@ -174,7 +174,7 @@ $proc$ language plpgsql;
 create trigger tg_pslot_biu before insert or update
     on PSlot for each row execute procedure tg_pslot_biu();
 -- ************************************************************
--- * AFTER UPDATE on System
+-- * AFTER UPDATE on system
 -- *	- If system name changes let interfaces follow
 -- ************************************************************
 create function tg_system_au() returns trigger as '
@@ -186,7 +186,7 @@ begin
 end;
 ' language plpgsql;
 create trigger tg_system_au after update
-    on System for each row execute procedure tg_system_au();
+    on system for each row execute procedure tg_system_au();
 -- ************************************************************
 -- * BEFORE INSERT or UPDATE on IFace
 -- *	- set the slotname to IF.sysname.ifname
@@ -983,11 +983,11 @@ begin
     end if;
     if sltype = ''IF'' then
 	declare
-	    syrow	System%RowType;
+	    syrow	system%RowType;
 	    ifrow	IFace%ROWTYPE;
         begin
 	    select into ifrow * from IFace where slotname = rec.slotlink;
-	    select into syrow * from System where name = ifrow.sysname;
+	    select into syrow * from system where name = ifrow.sysname;
 	    retval := syrow.name || '' IF '';
 	    retval := retval || ifrow.ifname;
 	    if syrow.comment != '''' then
@@ -1004,7 +1004,7 @@ end;
 -- ************************************************************
 -- * View of a patchfield describing backside and patches
 -- ************************************************************
-create view Pfield_v1 as select PF.pfname, PF.slotname,
+create view pfield_v1 as select PF.pfname, PF.slotname,
 	pslot_backlink_view(PF.slotname) as backside,
 	pslot_slotlink_view(PF.slotname) as patch
     from PSlot PF;
@@ -1464,13 +1464,13 @@ update PSlot set slotlink = 'PS.base.ta2' where slotname = 'PS.base.a3';
 -- ethernet interface into the wall and patch it to the hub.
 --
 insert into Hub values ('base.hub1', 'Patchfield PF0_1 hub', 16);
-insert into System values ('orion', 'PC');
+insert into system values ('orion', 'PC');
 insert into IFace values ('IF', 'orion', 'eth0', 'WS.002.1b');
 update PSlot set slotlink = 'HS.base.hub1.1' where slotname = 'PS.base.b2';
 --
 -- Now we take a look at the patchfield
 --
-select * from PField_v1 where pfname = 'PF0_1' order by slotname;
+select * from pfield_v1 where pfname = 'PF0_1' order by slotname;
  pfname |       slotname       |                         backside                         |                     patch                     
 --------+----------------------+----------------------------------------------------------+-----------------------------------------------
  PF0_1  | PS.base.a1           | WS.001.1a in room 001 -> Phone PH.hc001 (Hicom standard) | PS.base.ta1 -> Phone line -0 (Central call)
@@ -1493,7 +1493,7 @@ select * from PField_v1 where pfname = 'PF0_1' order by slotname;
  PF0_1  | PS.base.c6           | WS.003.3b in room 003 -> -                               | -
 (18 rows)
 
-select * from PField_v1 where pfname = 'PF0_2' order by slotname;
+select * from pfield_v1 where pfname = 'PF0_2' order by slotname;
  pfname |       slotname       |            backside            |                                 patch                                  
 --------+----------------------+--------------------------------+------------------------------------------------------------------------
  PF0_2  | PS.base.ta1          | Phone line -0 (Central call)   | PS.base.a1 -> WS.001.1a in room 001 -> Phone PH.hc001 (Hicom standard)
diff --git a/src/test/regress/expected/point.out b/src/test/regress/expected/point.out
index bfc0962..bdcaadf 100644
--- a/src/test/regress/expected/point.out
+++ b/src/test/regress/expected/point.out
@@ -1,27 +1,27 @@
 --
 -- POINT
 --
-CREATE TABLE POINT_TBL(f1 point);
-INSERT INTO POINT_TBL(f1) VALUES ('(0.0,0.0)');
-INSERT INTO POINT_TBL(f1) VALUES ('(-10.0,0.0)');
-INSERT INTO POINT_TBL(f1) VALUES ('(-3.0,4.0)');
-INSERT INTO POINT_TBL(f1) VALUES ('(5.1, 34.5)');
-INSERT INTO POINT_TBL(f1) VALUES ('(-5.0,-12.0)');
+CREATE TABLE point_tbl(f1 point);
+INSERT INTO point_tbl(f1) VALUES ('(0.0,0.0)');
+INSERT INTO point_tbl(f1) VALUES ('(-10.0,0.0)');
+INSERT INTO point_tbl(f1) VALUES ('(-3.0,4.0)');
+INSERT INTO point_tbl(f1) VALUES ('(5.1, 34.5)');
+INSERT INTO point_tbl(f1) VALUES ('(-5.0,-12.0)');
 -- bad format points
-INSERT INTO POINT_TBL(f1) VALUES ('asdfasdf');
+INSERT INTO point_tbl(f1) VALUES ('asdfasdf');
 ERROR:  invalid input syntax for type point: "asdfasdf"
-LINE 1: INSERT INTO POINT_TBL(f1) VALUES ('asdfasdf');
+LINE 1: INSERT INTO point_tbl(f1) VALUES ('asdfasdf');
                                           ^
-INSERT INTO POINT_TBL(f1) VALUES ('10.0,10.0');
-INSERT INTO POINT_TBL(f1) VALUES ('(10.0 10.0)');
+INSERT INTO point_tbl(f1) VALUES ('10.0,10.0');
+INSERT INTO point_tbl(f1) VALUES ('(10.0 10.0)');
 ERROR:  invalid input syntax for type point: "(10.0 10.0)"
-LINE 1: INSERT INTO POINT_TBL(f1) VALUES ('(10.0 10.0)');
+LINE 1: INSERT INTO point_tbl(f1) VALUES ('(10.0 10.0)');
                                           ^
-INSERT INTO POINT_TBL(f1) VALUES ('(10.0,10.0');
+INSERT INTO point_tbl(f1) VALUES ('(10.0,10.0');
 ERROR:  invalid input syntax for type point: "(10.0,10.0"
-LINE 1: INSERT INTO POINT_TBL(f1) VALUES ('(10.0,10.0');
+LINE 1: INSERT INTO point_tbl(f1) VALUES ('(10.0,10.0');
                                           ^
-SELECT '' AS six, * FROM POINT_TBL;
+SELECT '' AS six, * FROM point_tbl;
  six |     f1     
 -----+------------
      | (0,0)
@@ -33,7 +33,7 @@ SELECT '' AS six, * FROM POINT_TBL;
 (6 rows)
 
 -- left of
-SELECT '' AS three, p.* FROM POINT_TBL p WHERE p.f1 << '(0.0, 0.0)';
+SELECT '' AS three, p.* FROM point_tbl p WHERE p.f1 << '(0.0, 0.0)';
  three |    f1    
 -------+----------
        | (-10,0)
@@ -42,7 +42,7 @@ SELECT '' AS three, p.* FROM POINT_TBL p WHERE p.f1 << '(0.0, 0.0)';
 (3 rows)
 
 -- right of
-SELECT '' AS three, p.* FROM POINT_TBL p WHERE '(0.0,0.0)' >> p.f1;
+SELECT '' AS three, p.* FROM point_tbl p WHERE '(0.0,0.0)' >> p.f1;
  three |    f1    
 -------+----------
        | (-10,0)
@@ -51,28 +51,28 @@ SELECT '' AS three, p.* FROM POINT_TBL p WHERE '(0.0,0.0)' >> p.f1;
 (3 rows)
 
 -- above
-SELECT '' AS one, p.* FROM POINT_TBL p WHERE '(0.0,0.0)' >^ p.f1;
+SELECT '' AS one, p.* FROM point_tbl p WHERE '(0.0,0.0)' >^ p.f1;
  one |    f1    
 -----+----------
      | (-5,-12)
 (1 row)
 
 -- below
-SELECT '' AS one, p.* FROM POINT_TBL p WHERE p.f1 <^ '(0.0, 0.0)';
+SELECT '' AS one, p.* FROM point_tbl p WHERE p.f1 <^ '(0.0, 0.0)';
  one |    f1    
 -----+----------
      | (-5,-12)
 (1 row)
 
 -- equal
-SELECT '' AS one, p.* FROM POINT_TBL p WHERE p.f1 ~= '(5.1, 34.5)';
+SELECT '' AS one, p.* FROM point_tbl p WHERE p.f1 ~= '(5.1, 34.5)';
  one |     f1     
 -----+------------
      | (5.1,34.5)
 (1 row)
 
 -- point in box
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE p.f1 <@ box '(0,0,100,100)';
  three |     f1     
 -------+------------
@@ -81,7 +81,7 @@ SELECT '' AS three, p.* FROM POINT_TBL p
        | (10,10)
 (3 rows)
 
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE box '(0,0,100,100)' @> p.f1;
  three |     f1     
 -------+------------
@@ -90,7 +90,7 @@ SELECT '' AS three, p.* FROM POINT_TBL p
        | (10,10)
 (3 rows)
 
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE not p.f1 <@ box '(0,0,100,100)';
  three |    f1    
 -------+----------
@@ -99,7 +99,7 @@ SELECT '' AS three, p.* FROM POINT_TBL p
        | (-5,-12)
 (3 rows)
 
-SELECT '' AS two, p.* FROM POINT_TBL p
+SELECT '' AS two, p.* FROM point_tbl p
    WHERE p.f1 <@ path '[(0,0),(-10,0),(-10,10)]';
  two |   f1    
 -----+---------
@@ -107,7 +107,7 @@ SELECT '' AS two, p.* FROM POINT_TBL p
      | (-10,0)
 (2 rows)
 
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE not box '(0,0,100,100)' @> p.f1;
  three |    f1    
 -------+----------
@@ -117,7 +117,7 @@ SELECT '' AS three, p.* FROM POINT_TBL p
 (3 rows)
 
 SELECT '' AS six, p.f1, p.f1 <-> point '(0,0)' AS dist
-   FROM POINT_TBL p
+   FROM point_tbl p
    ORDER BY dist;
  six |     f1     |       dist       
 -----+------------+------------------
@@ -130,7 +130,7 @@ SELECT '' AS six, p.f1, p.f1 <-> point '(0,0)' AS dist
 (6 rows)
 
 SELECT '' AS thirtysix, p1.f1 AS point1, p2.f1 AS point2, p1.f1 <-> p2.f1 AS dist
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    ORDER BY dist, p1.f1[0], p2.f1[0];
  thirtysix |   point1   |   point2   |       dist       
 -----------+------------+------------+------------------
@@ -173,7 +173,7 @@ SELECT '' AS thirtysix, p1.f1 AS point1, p2.f1 AS point2, p1.f1 <-> p2.f1 AS dis
 (36 rows)
 
 SELECT '' AS thirty, p1.f1 AS point1, p2.f1 AS point2
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    WHERE (p1.f1 <-> p2.f1) > 3;
  thirty |   point1   |   point2   
 --------+------------+------------
@@ -211,7 +211,7 @@ SELECT '' AS thirty, p1.f1 AS point1, p2.f1 AS point2
 
 -- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
 SELECT '' AS fifteen, p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1
    ORDER BY distance, p1.f1[0], p2.f1[0];
  fifteen |   point1   |   point2   |     distance     
@@ -235,7 +235,7 @@ SELECT '' AS fifteen, p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS dis
 
 -- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
 SELECT '' AS three, p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1 and p1.f1 >^ p2.f1
    ORDER BY distance;
  three |   point1   |  point2  |     distance     
diff --git a/src/test/regress/expected/polygon.out b/src/test/regress/expected/polygon.out
index 2361274..b3a10da 100644
--- a/src/test/regress/expected/polygon.out
+++ b/src/test/regress/expected/polygon.out
@@ -3,34 +3,34 @@
 --
 -- polygon logic
 --
-CREATE TABLE POLYGON_TBL(f1 polygon);
-INSERT INTO POLYGON_TBL(f1) VALUES ('(2.0,0.0),(2.0,4.0),(0.0,0.0)');
-INSERT INTO POLYGON_TBL(f1) VALUES ('(3.0,1.0),(3.0,3.0),(1.0,0.0)');
+CREATE TABLE polygon_tbl(f1 polygon);
+INSERT INTO polygon_tbl(f1) VALUES ('(2.0,0.0),(2.0,4.0),(0.0,0.0)');
+INSERT INTO polygon_tbl(f1) VALUES ('(3.0,1.0),(3.0,3.0),(1.0,0.0)');
 -- degenerate polygons
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0,0.0)');
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0,1.0),(0.0,1.0)');
+INSERT INTO polygon_tbl(f1) VALUES ('(0.0,0.0)');
+INSERT INTO polygon_tbl(f1) VALUES ('(0.0,1.0),(0.0,1.0)');
 -- bad polygon input strings
-INSERT INTO POLYGON_TBL(f1) VALUES ('0.0');
+INSERT INTO polygon_tbl(f1) VALUES ('0.0');
 ERROR:  invalid input syntax for type polygon: "0.0"
-LINE 1: INSERT INTO POLYGON_TBL(f1) VALUES ('0.0');
+LINE 1: INSERT INTO polygon_tbl(f1) VALUES ('0.0');
                                             ^
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0 0.0');
+INSERT INTO polygon_tbl(f1) VALUES ('(0.0 0.0');
 ERROR:  invalid input syntax for type polygon: "(0.0 0.0"
-LINE 1: INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0 0.0');
+LINE 1: INSERT INTO polygon_tbl(f1) VALUES ('(0.0 0.0');
                                             ^
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2)');
+INSERT INTO polygon_tbl(f1) VALUES ('(0,1,2)');
 ERROR:  invalid input syntax for type polygon: "(0,1,2)"
-LINE 1: INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2)');
+LINE 1: INSERT INTO polygon_tbl(f1) VALUES ('(0,1,2)');
                                             ^
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2,3');
+INSERT INTO polygon_tbl(f1) VALUES ('(0,1,2,3');
 ERROR:  invalid input syntax for type polygon: "(0,1,2,3"
-LINE 1: INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2,3');
+LINE 1: INSERT INTO polygon_tbl(f1) VALUES ('(0,1,2,3');
                                             ^
-INSERT INTO POLYGON_TBL(f1) VALUES ('asdf');
+INSERT INTO polygon_tbl(f1) VALUES ('asdf');
 ERROR:  invalid input syntax for type polygon: "asdf"
-LINE 1: INSERT INTO POLYGON_TBL(f1) VALUES ('asdf');
+LINE 1: INSERT INTO polygon_tbl(f1) VALUES ('asdf');
                                             ^
-SELECT '' AS four, * FROM POLYGON_TBL;
+SELECT '' AS four, * FROM polygon_tbl;
  four |         f1          
 ------+---------------------
       | ((2,0),(2,4),(0,0))
@@ -41,7 +41,7 @@ SELECT '' AS four, * FROM POLYGON_TBL;
 
 -- overlap
 SELECT '' AS three, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 && '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  three |         f1          
 -------+---------------------
@@ -51,7 +51,7 @@ SELECT '' AS three, p.*
 
 -- left overlap
 SELECT '' AS four, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 &< '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  four |         f1          
 ------+---------------------
@@ -63,7 +63,7 @@ SELECT '' AS four, p.*
 
 -- right overlap
 SELECT '' AS two, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 &> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  two |         f1          
 -----+---------------------
@@ -72,7 +72,7 @@ SELECT '' AS two, p.*
 
 -- left of
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 << '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  one |      f1       
 -----+---------------
@@ -82,7 +82,7 @@ SELECT '' AS one, p.*
 
 -- right of
 SELECT '' AS zero, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 >> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  zero | f1 
 ------+----
@@ -90,7 +90,7 @@ SELECT '' AS zero, p.*
 
 -- contained
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 <@ polygon '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  one |         f1          
 -----+---------------------
@@ -99,7 +99,7 @@ SELECT '' AS one, p.*
 
 -- same
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 ~= polygon '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  one |         f1          
 -----+---------------------
@@ -108,7 +108,7 @@ SELECT '' AS one, p.*
 
 -- contains
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 @> polygon '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
  one |         f1          
 -----+---------------------
diff --git a/src/test/regress/expected/privileges.out b/src/test/regress/expected/privileges.out
index f66b443..8163a3e 100644
--- a/src/test/regress/expected/privileges.out
+++ b/src/test/regress/expected/privileges.out
@@ -54,7 +54,7 @@ TRUNCATE atest1;
 BEGIN;
 LOCK atest1 IN ACCESS EXCLUSIVE MODE;
 COMMIT;
-REVOKE ALL ON atest1 FROM PUBLIC;
+REVOKE ALL ON atest1 FROM public;
 SELECT * FROM atest1;
  a | b 
 ---+---
@@ -116,7 +116,7 @@ ERROR:  permission denied for relation atest2
 COMMIT;
 COPY atest2 FROM stdin; -- fail
 ERROR:  permission denied for relation atest2
-GRANT ALL ON atest1 TO PUBLIC; -- fail
+GRANT ALL ON atest1 TO public; -- fail
 WARNING:  no privileges were granted for "atest1"
 -- checks in subquery, both ok
 SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
@@ -532,9 +532,9 @@ SELECT oid FROM atestp2; -- ok
 -- privileges on functions, languages
 -- switch to superuser
 \c -
-REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM PUBLIC;
+REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM public;
 GRANT USAGE ON LANGUAGE sql TO regress_user1; -- ok
-GRANT USAGE ON LANGUAGE c TO PUBLIC; -- fail
+GRANT USAGE ON LANGUAGE c TO public; -- fail
 ERROR:  language "c" is not trusted
 DETAIL:  GRANT and REVOKE are not allowed on untrusted languages, because only superusers can use untrusted languages.
 SET SESSION AUTHORIZATION regress_user1;
@@ -542,7 +542,7 @@ GRANT USAGE ON LANGUAGE sql TO regress_user2; -- fail
 WARNING:  no privileges were granted for "sql"
 CREATE FUNCTION testfunc1(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql;
 CREATE FUNCTION testfunc2(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
-REVOKE ALL ON FUNCTION testfunc1(int), testfunc2(int) FROM PUBLIC;
+REVOKE ALL ON FUNCTION testfunc1(int), testfunc2(int) FROM public;
 GRANT EXECUTE ON FUNCTION testfunc1(int), testfunc2(int) TO regress_user2;
 GRANT USAGE ON FUNCTION testfunc1(int) TO regress_user3; -- semantic error
 ERROR:  invalid privilege type USAGE for function
@@ -585,12 +585,12 @@ ERROR:  must be owner of function testfunc1
 \c -
 DROP FUNCTION testfunc1(int); -- ok
 -- restore to sanity
-GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC;
+GRANT ALL PRIVILEGES ON LANGUAGE sql TO public;
 -- privileges on types
 -- switch to superuser
 \c -
 CREATE TYPE testtype1 AS (a int, b text);
-REVOKE USAGE ON TYPE testtype1 FROM PUBLIC;
+REVOKE USAGE ON TYPE testtype1 FROM public;
 GRANT USAGE ON TYPE testtype1 TO regress_user2;
 GRANT USAGE ON TYPE _testtype1 TO regress_user2; -- fail
 ERROR:  cannot set privileges of array types
@@ -598,7 +598,7 @@ HINT:  Set the privileges of the element type instead.
 GRANT USAGE ON DOMAIN testtype1 TO regress_user2; -- fail
 ERROR:  "testtype1" is not a domain
 CREATE DOMAIN testdomain1 AS int;
-REVOKE USAGE on DOMAIN testdomain1 FROM PUBLIC;
+REVOKE USAGE on DOMAIN testdomain1 FROM public;
 GRANT USAGE ON DOMAIN testdomain1 TO regress_user2;
 GRANT USAGE ON TYPE testdomain1 TO regress_user2; -- ok
 SET SESSION AUTHORIZATION regress_user1;
@@ -639,7 +639,7 @@ ALTER TYPE test8a ALTER ATTRIBUTE b TYPE testdomain1;
 ERROR:  permission denied for type testdomain1
 CREATE TABLE test11a AS (SELECT 1::testdomain1 AS a);
 ERROR:  permission denied for type testdomain1
-REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
+REVOKE ALL ON TYPE testtype1 FROM public;
 ERROR:  permission denied for type testtype1
 SET SESSION AUTHORIZATION regress_user2;
 -- commands that should succeed
@@ -663,7 +663,7 @@ CREATE TYPE test8b AS (a int, b int);
 ALTER TYPE test8b ADD ATTRIBUTE c testdomain1;
 ALTER TYPE test8b ALTER ATTRIBUTE b TYPE testdomain1;
 CREATE TABLE test11b AS (SELECT 1::testdomain1 AS a);
-REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
+REVOKE ALL ON TYPE testtype1 FROM public;
 WARNING:  no privileges could be revoked for "testtype1"
 \c -
 DROP AGGREGATE testagg1b(testdomain1);
@@ -1097,16 +1097,16 @@ SELECT lo_create(1005);
       1005
 (1 row)
 
-GRANT ALL ON LARGE OBJECT 1001 TO PUBLIC;
+GRANT ALL ON LARGE OBJECT 1001 TO public;
 GRANT SELECT ON LARGE OBJECT 1003 TO regress_user2;
 GRANT SELECT,UPDATE ON LARGE OBJECT 1004 TO regress_user2;
 GRANT ALL ON LARGE OBJECT 1005 TO regress_user2;
 GRANT SELECT ON LARGE OBJECT 1005 TO regress_user2 WITH GRANT OPTION;
-GRANT SELECT, INSERT ON LARGE OBJECT 1001 TO PUBLIC;	-- to be failed
+GRANT SELECT, INSERT ON LARGE OBJECT 1001 TO public;	-- to be failed
 ERROR:  invalid privilege type INSERT for large object
 GRANT SELECT, UPDATE ON LARGE OBJECT 1001 TO nosuchuser;	-- to be failed
 ERROR:  role "nosuchuser" does not exist
-GRANT SELECT, UPDATE ON LARGE OBJECT  999 TO PUBLIC;	-- to be failed
+GRANT SELECT, UPDATE ON LARGE OBJECT  999 TO public;	-- to be failed
 ERROR:  large object 999 does not exist
 \c -
 SET SESSION AUTHORIZATION regress_user2;
@@ -1161,7 +1161,7 @@ SELECT lowrite(lo_open(1004, x'20000'::int), 'abcd');
 GRANT SELECT ON LARGE OBJECT 1005 TO regress_user3;
 GRANT UPDATE ON LARGE OBJECT 1006 TO regress_user3;	-- to be denied
 ERROR:  large object 1006 does not exist
-REVOKE ALL ON LARGE OBJECT 2001, 2002 FROM PUBLIC;
+REVOKE ALL ON LARGE OBJECT 2001, 2002 FROM public;
 GRANT ALL ON LARGE OBJECT 2001 TO regress_user3;
 SELECT lo_unlink(1001);		-- to be denied
 ERROR:  must be owner of large object 1001
@@ -1435,7 +1435,7 @@ SELECT has_function_privilege('regress_user1', 'testns.testfunc(int)', 'EXECUTE'
  t
 (1 row)
 
-REVOKE ALL ON ALL FUNCTIONS IN SCHEMA testns FROM PUBLIC;
+REVOKE ALL ON ALL FUNCTIONS IN SCHEMA testns FROM public;
 SELECT has_function_privilege('regress_user1', 'testns.testfunc(int)', 'EXECUTE'); -- false
  has_function_privilege 
 ------------------------
diff --git a/src/test/regress/expected/rangetypes.out b/src/test/regress/expected/rangetypes.out
index 4a2336c..475810f 100644
--- a/src/test/regress/expected/rangetypes.out
+++ b/src/test/regress/expected/rangetypes.out
@@ -1,5 +1,5 @@
 -- Tests for range data types.
-create type textrange as range (subtype=text, collation="C");
+create type textrange as range (subtype=text, collation='C');
 --
 -- test input parser
 --
@@ -1226,8 +1226,8 @@ drop domain restrictedrange;
 --
 -- Test multiple range types over the same subtype
 --
-create type textrange1 as range(subtype=text, collation="C");
-create type textrange2 as range(subtype=text, collation="C");
+create type textrange1 as range(subtype=text, collation='C');
+create type textrange2 as range(subtype=text, collation='C');
 select textrange1('a','Z') @> 'b'::text;
 ERROR:  range lower bound must be less than or equal to range upper bound
 select textrange2('a','z') @> 'b'::text;
diff --git a/src/test/regress/expected/rolenames.out b/src/test/regress/expected/rolenames.out
index fd058e4..e6f2e76 100644
--- a/src/test/regress/expected/rolenames.out
+++ b/src/test/regress/expected/rolenames.out
@@ -198,15 +198,13 @@ ERROR:  syntax error at or near "WITH"
 LINE 1: ALTER ROLE ALL WITH REPLICATION;
                        ^
 ALTER ROLE SESSION_ROLE WITH NOREPLICATION; -- error
-ERROR:  role "session_role" does not exist
+ERROR:  role "SESSION_ROLE" does not exist
 ALTER ROLE PUBLIC WITH NOREPLICATION; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 ALTER ROLE "public" WITH NOREPLICATION; -- error
 ERROR:  role "public" does not exist
 ALTER ROLE NONE WITH NOREPLICATION; -- error
-ERROR:  role name "none" is reserved
-LINE 1: ALTER ROLE NONE WITH NOREPLICATION;
-                   ^
+ERROR:  role "NONE" does not exist
 ALTER ROLE "none" WITH NOREPLICATION; -- error
 ERROR:  role name "none" is reserved
 LINE 1: ALTER ROLE "none" WITH NOREPLICATION;
@@ -314,15 +312,13 @@ ERROR:  syntax error at or near "ALL"
 LINE 1: ALTER USER ALL WITH REPLICATION;
                    ^
 ALTER USER SESSION_ROLE WITH NOREPLICATION; -- error
-ERROR:  role "session_role" does not exist
+ERROR:  role "SESSION_ROLE" does not exist
 ALTER USER PUBLIC WITH NOREPLICATION; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 ALTER USER "public" WITH NOREPLICATION; -- error
 ERROR:  role "public" does not exist
 ALTER USER NONE WITH NOREPLICATION; -- error
-ERROR:  role name "none" is reserved
-LINE 1: ALTER USER NONE WITH NOREPLICATION;
-                   ^
+ERROR:  role "NONE" does not exist
 ALTER USER "none" WITH NOREPLICATION; -- error
 ERROR:  role name "none" is reserved
 LINE 1: ALTER USER "none" WITH NOREPLICATION;
@@ -378,7 +374,7 @@ ERROR:  syntax error at or near "USER"
 LINE 1: ALTER ROLE USER SET application_name to 'BOOM';
                    ^
 ALTER ROLE PUBLIC SET application_name to 'BOMB'; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 ALTER ROLE nonexistent SET application_name to 'BOMB'; -- error
 ERROR:  role "nonexistent" does not exist
 --  ALTER USER SET/RESET
@@ -433,11 +429,9 @@ ERROR:  syntax error at or near "USER"
 LINE 1: ALTER USER USER SET application_name to 'BOOM';
                    ^
 ALTER USER PUBLIC SET application_name to 'BOMB'; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 ALTER USER NONE SET application_name to 'BOMB'; -- error
-ERROR:  role name "none" is reserved
-LINE 1: ALTER USER NONE SET application_name to 'BOMB';
-                   ^
+ERROR:  role "NONE" does not exist
 ALTER USER nonexistent SET application_name to 'BOMB'; -- error
 ERROR:  role "nonexistent" does not exist
 -- CREATE SCHEMA
@@ -456,13 +450,11 @@ ERROR:  syntax error at or near "CURRENT_ROLE"
 LINE 1: CREATE SCHEMA newschema6 AUTHORIZATION CURRENT_ROLE;
                                                ^
 CREATE SCHEMA newschema6 AUTHORIZATION PUBLIC; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 CREATE SCHEMA newschema6 AUTHORIZATION "public"; -- error
 ERROR:  role "public" does not exist
 CREATE SCHEMA newschema6 AUTHORIZATION NONE; -- error
-ERROR:  role name "none" is reserved
-LINE 1: CREATE SCHEMA newschema6 AUTHORIZATION NONE;
-                                               ^
+ERROR:  role "NONE" does not exist
 CREATE SCHEMA newschema6 AUTHORIZATION nonexistent; -- error
 ERROR:  role "nonexistent" does not exist
 SELECT n.nspname, r.rolname FROM pg_namespace n
@@ -491,13 +483,11 @@ ERROR:  syntax error at or near "CURRENT_ROLE"
 LINE 1: ...ATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION CURRENT_RO...
                                                              ^
 CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION PUBLIC; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION "public"; -- error
 ERROR:  role "public" does not exist
 CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION NONE; -- error
-ERROR:  role name "none" is reserved
-LINE 1: CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION NONE;
-                                                             ^
+ERROR:  role "NONE" does not exist
 CREATE SCHEMA IF NOT EXISTS newschema6 AUTHORIZATION nonexistent; -- error
 ERROR:  role "nonexistent" does not exist
 SELECT n.nspname, r.rolname FROM pg_namespace n
@@ -539,7 +529,7 @@ ERROR:  syntax error at or near "USER"
 LINE 1: ALTER TABLE testtab6 OWNER TO USER;
                                       ^
 ALTER TABLE testtab6 OWNER TO PUBLIC; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 ALTER TABLE testtab6 OWNER TO "public"; -- error
 ERROR:  role "public" does not exist
 ALTER TABLE testtab6 OWNER TO nonexistent; -- error
@@ -591,7 +581,7 @@ ERROR:  syntax error at or near "USER"
 LINE 1: ALTER AGGREGATE testagg5(int2) OWNER TO USER;
                                                 ^
 ALTER AGGREGATE testagg5(int2) OWNER TO PUBLIC; -- error
-ERROR:  role "public" does not exist
+ERROR:  role "PUBLIC" does not exist
 ALTER AGGREGATE testagg5(int2) OWNER TO "public"; -- error
 ERROR:  role "public" does not exist
 ALTER AGGREGATE testagg5(int2) OWNER TO nonexistent; -- error
@@ -629,7 +619,7 @@ CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"'
 CREATE USER MAPPING FOR USER SERVER sv3 OPTIONS (user 'USER');
 CREATE USER MAPPING FOR "user" SERVER sv4 OPTIONS (user '"USER"');
 CREATE USER MAPPING FOR SESSION_USER SERVER sv5 OPTIONS (user 'SESSION_USER');
-CREATE USER MAPPING FOR PUBLIC SERVER sv6 OPTIONS (user 'PUBLIC');
+CREATE USER MAPPING FOR public SERVER sv6 OPTIONS (user 'PUBLIC');
 CREATE USER MAPPING FOR "Public" SERVER sv7 OPTIONS (user '"Public"');
 CREATE USER MAPPING FOR regress_testrolx SERVER sv8 OPTIONS (user 'regress_testrolx');
 CREATE USER MAPPING FOR CURRENT_ROLE SERVER sv9
@@ -664,7 +654,7 @@ ALTER USER MAPPING FOR "user" SERVER sv4
  OPTIONS (SET user '"user"_alt');
 ALTER USER MAPPING FOR SESSION_USER SERVER sv5
  OPTIONS (SET user 'SESSION_USER_alt');
-ALTER USER MAPPING FOR PUBLIC SERVER sv6
+ALTER USER MAPPING FOR public SERVER sv6
  OPTIONS (SET user 'public_alt');
 ALTER USER MAPPING FOR "Public" SERVER sv7
  OPTIONS (SET user '"Public"_alt');
@@ -697,7 +687,7 @@ DROP USER MAPPING FOR "current_user" SERVER sv2;
 DROP USER MAPPING FOR USER SERVER sv3;
 DROP USER MAPPING FOR "user" SERVER sv4;
 DROP USER MAPPING FOR SESSION_USER SERVER sv5;
-DROP USER MAPPING FOR PUBLIC SERVER sv6;
+DROP USER MAPPING FOR public SERVER sv6;
 DROP USER MAPPING FOR "Public" SERVER sv7;
 DROP USER MAPPING FOR regress_testrolx SERVER sv8;
 DROP USER MAPPING FOR CURRENT_ROLE SERVER sv9; -- error
@@ -716,7 +706,7 @@ CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"'
 CREATE USER MAPPING FOR USER SERVER sv3 OPTIONS (user 'USER');
 CREATE USER MAPPING FOR "user" SERVER sv4 OPTIONS (user '"USER"');
 CREATE USER MAPPING FOR SESSION_USER SERVER sv5 OPTIONS (user 'SESSION_USER');
-CREATE USER MAPPING FOR PUBLIC SERVER sv6 OPTIONS (user 'PUBLIC');
+CREATE USER MAPPING FOR public SERVER sv6 OPTIONS (user 'PUBLIC');
 CREATE USER MAPPING FOR "Public" SERVER sv7 OPTIONS (user '"Public"');
 CREATE USER MAPPING FOR regress_testrolx SERVER sv8 OPTIONS (user 'regress_testrolx');
 SELECT * FROM chkumapping();
@@ -788,7 +778,7 @@ SELECT * FROM chkumapping();
  regress_testrolx | sv8      | {user=regress_testrolx}
 (3 rows)
 
-DROP USER MAPPING IF EXISTS FOR PUBLIC SERVER sv6;
+DROP USER MAPPING IF EXISTS FOR public SERVER sv6;
 SELECT * FROM chkumapping();
       umname      | umserver |        umoptions        
 ------------------+----------+-------------------------
@@ -836,15 +826,15 @@ SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
  testagg9 | 
 (9 rows)
 
-REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2) FROM PUBLIC;
-GRANT ALL PRIVILEGES ON FUNCTION testagg1(int2) TO PUBLIC;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2) FROM public;
+GRANT ALL PRIVILEGES ON FUNCTION testagg1(int2) TO public;
 GRANT ALL PRIVILEGES ON FUNCTION testagg2(int2) TO CURRENT_USER;
 GRANT ALL PRIVILEGES ON FUNCTION testagg3(int2) TO "current_user";
 GRANT ALL PRIVILEGES ON FUNCTION testagg4(int2) TO SESSION_USER;
@@ -876,9 +866,7 @@ ERROR:  syntax error at or near "USER"
 LINE 1: GRANT ALL PRIVILEGES ON FUNCTION testagg9(int2) TO USER;
                                                            ^
 GRANT ALL PRIVILEGES ON FUNCTION testagg9(int2) TO NONE; --error
-ERROR:  role name "none" is reserved
-LINE 1: GRANT ALL PRIVILEGES ON FUNCTION testagg9(int2) TO NONE;
-                                                           ^
+ERROR:  role "NONE" does not exist
 GRANT ALL PRIVILEGES ON FUNCTION testagg9(int2) TO "none"; --error
 ERROR:  role name "none" is reserved
 LINE 1: GRANT ALL PRIVILEGES ON FUNCTION testagg9(int2) TO "none";
@@ -897,7 +885,7 @@ SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
  testagg9 | 
 (9 rows)
 
-REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM public;
 REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM CURRENT_USER;
 REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM "current_user";
 REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM SESSION_USER;
@@ -929,9 +917,7 @@ ERROR:  syntax error at or near "USER"
 LINE 1: REVOKE ALL PRIVILEGES ON FUNCTION testagg9(int2) FROM USER;
                                                               ^
 REVOKE ALL PRIVILEGES ON FUNCTION testagg9(int2) FROM NONE; --error
-ERROR:  role name "none" is reserved
-LINE 1: REVOKE ALL PRIVILEGES ON FUNCTION testagg9(int2) FROM NONE;
-                                                              ^
+ERROR:  role "NONE" does not exist
 REVOKE ALL PRIVILEGES ON FUNCTION testagg9(int2) FROM "none"; --error
 ERROR:  role name "none" is reserved
 LINE 1: ...EVOKE ALL PRIVILEGES ON FUNCTION testagg9(int2) FROM "none";
diff --git a/src/test/regress/expected/rowsecurity.out b/src/test/regress/expected/rowsecurity.out
index c15bf95..2332a33 100644
--- a/src/test/regress/expected/rowsecurity.out
+++ b/src/test/regress/expected/rowsecurity.out
@@ -479,8 +479,8 @@ CREATE TABLE t3 (c text, b text, a int) WITH OIDS;
 ALTER TABLE t3 INHERIT t1;
 GRANT ALL ON t3 TO public;
 COPY t3(a,b,c) FROM stdin WITH (oids);
-CREATE POLICY p1 ON t1 FOR ALL TO PUBLIC USING (a % 2 = 0); -- be even number
-CREATE POLICY p2 ON t2 FOR ALL TO PUBLIC USING (a % 2 = 1); -- be odd number
+CREATE POLICY p1 ON t1 FOR ALL TO public USING (a % 2 = 0); -- be even number
+CREATE POLICY p2 ON t2 FOR ALL TO public USING (a % 2 = 1); -- be odd number
 ALTER TABLE t1 ENABLE ROW LEVEL SECURITY;
 ALTER TABLE t2 ENABLE ROW LEVEL SECURITY;
 SET SESSION AUTHORIZATION regress_rls_bob;
@@ -750,7 +750,7 @@ SET row_security TO ON;
 CREATE TABLE dependee (x integer, y integer);
 CREATE TABLE dependent (x integer, y integer);
 CREATE POLICY d1 ON dependent FOR ALL
-    TO PUBLIC
+    TO public
     USING (x = (SELECT d.x FROM dependee d WHERE d.y = y));
 DROP TABLE dependee; -- Should fail without CASCADE due to dependency on row security qual?
 ERROR:  cannot drop table dependee because other objects depend on it
@@ -2019,7 +2019,7 @@ DROP VIEW rls_view;
 --
 SET SESSION AUTHORIZATION regress_rls_alice;
 CREATE TABLE x1 (a int, b text, c text);
-GRANT ALL ON x1 TO PUBLIC;
+GRANT ALL ON x1 TO public;
 INSERT INTO x1 VALUES
     (1, 'abc', 'regress_rls_bob'),
     (2, 'bcd', 'regress_rls_bob'),
@@ -2860,7 +2860,7 @@ DROP TABLE copy_rel_to CASCADE;
 -- Check WHERE CURRENT OF
 SET SESSION AUTHORIZATION regress_rls_alice;
 CREATE TABLE current_check (currentid int, payload text, rlsuser text);
-GRANT ALL ON current_check TO PUBLIC;
+GRANT ALL ON current_check TO public;
 INSERT INTO current_check VALUES
     (1, 'abc', 'regress_rls_bob'),
     (2, 'bcd', 'regress_rls_bob'),
@@ -3035,7 +3035,7 @@ CREATE ROLE regress_rls_eve;
 CREATE ROLE regress_rls_frank;
 CREATE TABLE tbl1 (c) AS VALUES ('bar'::text);
 GRANT SELECT ON TABLE tbl1 TO regress_rls_eve;
-CREATE POLICY P ON tbl1 TO regress_rls_eve, regress_rls_frank USING (true);
+CREATE POLICY p ON tbl1 TO regress_rls_eve, regress_rls_frank USING (true);
 SELECT refclassid::regclass, deptype
   FROM pg_depend
   WHERE classid = 'pg_policy'::regclass
diff --git a/src/test/regress/expected/rules.out b/src/test/regress/expected/rules.out
index cf8bcca..765a082 100644
--- a/src/test/regress/expected/rules.out
+++ b/src/test/regress/expected/rules.out
@@ -753,15 +753,15 @@ create table rtest_view1 (a int4, b text, v bool);
 create table rtest_view2 (a int4);
 create table rtest_view3 (a int4, b text);
 create table rtest_view4 (a int4, b text, c int4);
-create view rtest_vview1 as select a, b from rtest_view1 X
-	where 0 < (select count(*) from rtest_view2 Y where Y.a = X.a);
+create view rtest_vview1 as select a, b from rtest_view1 x
+	where 0 < (select count(*) from rtest_view2 y where y.a = x.a);
 create view rtest_vview2 as select a, b from rtest_view1 where v;
-create view rtest_vview3 as select a, b from rtest_vview2 X
-	where 0 < (select count(*) from rtest_view2 Y where Y.a = X.a);
-create view rtest_vview4 as select X.a, X.b, count(Y.a) as refcount
-	from rtest_view1 X, rtest_view2 Y
-	where X.a = Y.a
-	group by X.a, X.b;
+create view rtest_vview3 as select a, b from rtest_vview2 x
+	where 0 < (select count(*) from rtest_view2 y where y.a = x.a);
+create view rtest_vview4 as select x.a, x.b, count(y.a) as refcount
+	from rtest_view1 x, rtest_view2 y
+	where x.a = y.a
+	group by x.a, x.b;
 create function rtest_viewfunc1(int4) returns int4 as
 	'select count(*)::int4 from rtest_view2 where a = $1'
 	language sql;
@@ -897,9 +897,9 @@ create table rtest_unitfact (
 	factor	float
 );
 create view rtest_vcomp as
-	select X.part, (X.size * Y.factor) as size_in_cm
-			from rtest_comp X, rtest_unitfact Y
-			where X.unit = Y.unit;
+	select x.part, (x.size * y.factor) as size_in_cm
+			from rtest_comp x, rtest_unitfact y
+			where x.unit = y.unit;
 insert into rtest_unitfact values ('m', 100.0);
 insert into rtest_unitfact values ('cm', 1.0);
 insert into rtest_unitfact values ('inch', 2.54);
@@ -2756,11 +2756,11 @@ Rules:
 --
 CREATE TABLE rule_t1 (a INT);
 CREATE VIEW rule_v1 AS SELECT * FROM rule_t1;
-CREATE RULE InsertRule AS
+CREATE RULE insertrule AS
     ON INSERT TO rule_v1
     DO INSTEAD
         INSERT INTO rule_t1 VALUES(new.a);
-ALTER RULE InsertRule ON rule_v1 RENAME to NewInsertRule;
+ALTER RULE insertrule ON rule_v1 RENAME to newinsertrule;
 INSERT INTO rule_v1 VALUES(1);
 SELECT * FROM rule_v1;
  a 
@@ -2784,9 +2784,9 @@ Rules:
 --
 -- error conditions for alter rename rule
 --
-ALTER RULE InsertRule ON rule_v1 RENAME TO NewInsertRule; -- doesn't exist
+ALTER RULE insertrule ON rule_v1 RENAME TO newinsertrule; -- doesn't exist
 ERROR:  rule "insertrule" for relation "rule_v1" does not exist
-ALTER RULE NewInsertRule ON rule_v1 RENAME TO "_RETURN"; -- already exists
+ALTER RULE newinsertrule ON rule_v1 RENAME TO "_RETURN"; -- already exists
 ERROR:  rule "_RETURN" for relation "rule_v1" already exists
 ALTER RULE "_RETURN" ON rule_v1 RENAME TO abc; -- ON SELECT rule cannot be renamed
 ERROR:  renaming an ON SELECT rule is not allowed
diff --git a/src/test/regress/expected/sanity_check.out b/src/test/regress/expected/sanity_check.out
index 82982a2..4a3e15f 100644
--- a/src/test/regress/expected/sanity_check.out
+++ b/src/test/regress/expected/sanity_check.out
@@ -11,9 +11,26 @@ SELECT relname, relhasindex
    FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = relnamespace
    WHERE relkind = 'r' AND (nspname ~ '^pg_temp_') IS NOT TRUE
    ORDER BY relname;
+ABSTIME_TBL|f
+BOX_TBL|f
+Bprime|f
+CHAR_TBL|f
+DATE_TBL|f
+DEFAULTEXPR_TBL|f
+DEFAULT_TBL|f
+FLOAT4_TBL|f
+LINE_TBL|f
+LSEG_TBL|f
+PATH_TBL|f
+RELTIME_TBL|f
+TIMESTAMPTZ_TBL|f
+TIMESTAMP_TBL|f
+TIMETZ_TBL|f
+TIME_TBL|f
+TINTERVAL_TBL|f
+VARCHAR_TBL|f
 a|f
 a_star|f
-abstime_tbl|f
 ag_graph|t
 ag_label|t
 aggtest|f
@@ -21,15 +38,12 @@ array_index_op_test|t
 array_op_test|f
 b|f
 b_star|f
-box_tbl|f
-bprime|f
 bt_f8_heap|t
 bt_i4_heap|t
 bt_name_heap|t
 bt_txt_heap|t
 c|f
 c_star|f
-char_tbl|f
 check2_tbl|f
 check_tbl|f
 circle_tbl|t
@@ -37,9 +51,6 @@ city|f
 copy_tbl|f
 d|f
 d_star|f
-date_tbl|f
-default_tbl|f
-defaultexpr_tbl|f
 dept|f
 dupindexcols|t
 e_star|f
@@ -47,7 +58,6 @@ emp|f
 equipment_r|f
 f_star|f
 fast_emp4000|t
-float4_tbl|f
 float8_tbl|f
 func_index_heap|t
 hash_f8_heap|t
@@ -68,9 +78,7 @@ invalid_check_con|f
 invalid_check_con_child|f
 iportaltest|f
 kd_point_tbl|t
-line_tbl|f
 log_table|f
-lseg_tbl|f
 main_table|f
 money_data|f
 num_data|f
@@ -86,7 +94,6 @@ num_input_test|f
 num_result|f
 onek|t
 onek2|t
-path_tbl|f
 person|f
 pg_aggregate|t
 pg_am|t
@@ -149,7 +156,6 @@ quad_point_tbl|t
 radix_text_tbl|t
 ramp|f
 real_city|f
-reltime_tbl|f
 road|t
 shighway|t
 slow_emp4000|f
@@ -170,12 +176,6 @@ test_range_spgist|t
 test_tsvector|f
 testjsonb|f
 text_tbl|f
-time_tbl|f
-timestamp_tbl|f
-timestamptz_tbl|f
-timetz_tbl|f
-tinterval_tbl|f
-varchar_tbl|f
 -- restore normal output mode
 \a\t
 --
diff --git a/src/test/regress/expected/select_distinct.out b/src/test/regress/expected/select_distinct.out
index f3696c6..19ceac9 100644
--- a/src/test/regress/expected/select_distinct.out
+++ b/src/test/regress/expected/select_distinct.out
@@ -153,10 +153,10 @@ SELECT count(*) FROM
 -- very own regression file.
 --
 CREATE TEMP TABLE disttable (f1 integer);
-INSERT INTO DISTTABLE VALUES(1);
-INSERT INTO DISTTABLE VALUES(2);
-INSERT INTO DISTTABLE VALUES(3);
-INSERT INTO DISTTABLE VALUES(NULL);
+INSERT INTO disttable VALUES(1);
+INSERT INTO disttable VALUES(2);
+INSERT INTO disttable VALUES(3);
+INSERT INTO disttable VALUES(NULL);
 -- basic cases
 SELECT f1, f1 IS DISTINCT FROM 2 as "not 2" FROM disttable;
  f1 | not 2 
diff --git a/src/test/regress/expected/sequence.out b/src/test/regress/expected/sequence.out
index 4ffbe92..d559fa2 100644
--- a/src/test/regress/expected/sequence.out
+++ b/src/test/regress/expected/sequence.out
@@ -1,14 +1,14 @@
 ---
 --- test creation of SERIAL column
 ---
-CREATE TABLE serialTest (f1 text, f2 serial);
-INSERT INTO serialTest VALUES ('foo');
-INSERT INTO serialTest VALUES ('bar');
-INSERT INTO serialTest VALUES ('force', 100);
-INSERT INTO serialTest VALUES ('wrong', NULL);
+CREATE TABLE serialtest (f1 text, f2 serial);
+INSERT INTO serialtest VALUES ('foo');
+INSERT INTO serialtest VALUES ('bar');
+INSERT INTO serialtest VALUES ('force', 100);
+INSERT INTO serialtest VALUES ('wrong', NULL);
 ERROR:  null value in column "f2" violates not-null constraint
 DETAIL:  Failing row contains (wrong, null).
-SELECT * FROM serialTest;
+SELECT * FROM serialtest;
   f1   | f2  
 -------+-----
  foo   |   1
@@ -17,41 +17,41 @@ SELECT * FROM serialTest;
 (3 rows)
 
 -- test smallserial / bigserial
-CREATE TABLE serialTest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
+CREATE TABLE serialtest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
   f5 bigserial, f6 serial8);
-INSERT INTO serialTest2 (f1)
+INSERT INTO serialtest2 (f1)
   VALUES ('test_defaults');
-INSERT INTO serialTest2 (f1, f2, f3, f4, f5, f6)
+INSERT INTO serialtest2 (f1, f2, f3, f4, f5, f6)
   VALUES ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807,
           9223372036854775807),
          ('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808,
           -9223372036854775808);
 -- All these INSERTs should fail:
-INSERT INTO serialTest2 (f1, f3)
+INSERT INTO serialtest2 (f1, f3)
   VALUES ('bogus', -32769);
 ERROR:  smallint out of range
-INSERT INTO serialTest2 (f1, f4)
+INSERT INTO serialtest2 (f1, f4)
   VALUES ('bogus', -32769);
 ERROR:  smallint out of range
-INSERT INTO serialTest2 (f1, f3)
+INSERT INTO serialtest2 (f1, f3)
   VALUES ('bogus', 32768);
 ERROR:  smallint out of range
-INSERT INTO serialTest2 (f1, f4)
+INSERT INTO serialtest2 (f1, f4)
   VALUES ('bogus', 32768);
 ERROR:  smallint out of range
-INSERT INTO serialTest2 (f1, f5)
+INSERT INTO serialtest2 (f1, f5)
   VALUES ('bogus', -9223372036854775809);
 ERROR:  bigint out of range
-INSERT INTO serialTest2 (f1, f6)
+INSERT INTO serialtest2 (f1, f6)
   VALUES ('bogus', -9223372036854775809);
 ERROR:  bigint out of range
-INSERT INTO serialTest2 (f1, f5)
+INSERT INTO serialtest2 (f1, f5)
   VALUES ('bogus', 9223372036854775808);
 ERROR:  bigint out of range
-INSERT INTO serialTest2 (f1, f6)
+INSERT INTO serialtest2 (f1, f6)
   VALUES ('bogus', 9223372036854775808);
 ERROR:  bigint out of range
-SELECT * FROM serialTest2 ORDER BY f2 ASC;
+SELECT * FROM serialtest2 ORDER BY f2 ASC;
       f1       |     f2      |   f3   |   f4   |          f5          |          f6          
 ---------------+-------------+--------+--------+----------------------+----------------------
  test_min_vals | -2147483648 | -32768 | -32768 | -9223372036854775808 | -9223372036854775808
@@ -199,8 +199,8 @@ SELECT * FROM foo_seq_new;
 DROP SEQUENCE foo_seq_new;
 -- renaming serial sequences
 ALTER TABLE serialtest_f2_seq RENAME TO serialtest_f2_foo;
-INSERT INTO serialTest VALUES ('more');
-SELECT * FROM serialTest;
+INSERT INTO serialtest VALUES ('more');
+SELECT * FROM serialtest;
   f1   | f2  
 -------+-----
  foo   |   1
@@ -504,7 +504,7 @@ SELECT lastval();
 
 ROLLBACK;
 -- Sequences should get wiped out as well:
-DROP TABLE serialTest, serialTest2;
+DROP TABLE serialtest, serialtest2;
 -- Make sure sequences are gone:
 SELECT * FROM information_schema.sequences WHERE sequence_name IN
   ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
diff --git a/src/test/regress/expected/strings.out b/src/test/regress/expected/strings.out
index 19708c3..70b2fdd 100644
--- a/src/test/regress/expected/strings.out
+++ b/src/test/regress/expected/strings.out
@@ -219,7 +219,7 @@ SELECT CAST(name 'namefield' AS text) AS "text(name)";
 (1 row)
 
 -- since this is an explicit cast, it should truncate w/o error:
-SELECT CAST(f1 AS char(10)) AS "char(text)" FROM TEXT_TBL;
+SELECT CAST(f1 AS char(10)) AS "char(text)" FROM text_tbl;
  char(text) 
 ------------
  doh!      
@@ -227,7 +227,7 @@ SELECT CAST(f1 AS char(10)) AS "char(text)" FROM TEXT_TBL;
 (2 rows)
 
 -- note: implicit-cast case is tested in char.sql
-SELECT CAST(f1 AS char(20)) AS "char(text)" FROM TEXT_TBL;
+SELECT CAST(f1 AS char(20)) AS "char(text)" FROM text_tbl;
       char(text)      
 ----------------------
  doh!                
@@ -249,7 +249,7 @@ SELECT CAST(name 'namefield' AS char(10)) AS "char(name)";
  namefield 
 (1 row)
 
-SELECT CAST(f1 AS varchar) AS "varchar(text)" FROM TEXT_TBL;
+SELECT CAST(f1 AS varchar) AS "varchar(text)" FROM text_tbl;
    varchar(text)   
 -------------------
  doh!
diff --git a/src/test/regress/expected/subselect.out b/src/test/regress/expected/subselect.out
index 21fbbb8..5a13336 100644
--- a/src/test/regress/expected/subselect.out
+++ b/src/test/regress/expected/subselect.out
@@ -201,7 +201,7 @@ SELECT '' AS five, f1 AS "Correlated Field"
 --
 SELECT '' AS eight, ss.f1 AS "Correlated Field", ss.f3 AS "Second Field"
   FROM SUBSELECT_TBL ss
-  WHERE f1 NOT IN (SELECT f1+1 FROM INT4_TBL
+  WHERE f1 NOT IN (SELECT f1+1 FROM int4_tbl
                    WHERE f1 != ss.f1 AND f1 < 2147483647);
  eight | Correlated Field | Second Field 
 -------+------------------+--------------
diff --git a/src/test/regress/expected/text.out b/src/test/regress/expected/text.out
index 829f2c2..4e44e18 100644
--- a/src/test/regress/expected/text.out
+++ b/src/test/regress/expected/text.out
@@ -13,10 +13,10 @@ SELECT text 'this is a text string' = text 'this is a text strin' AS false;
  f
 (1 row)
 
-CREATE TABLE TEXT_TBL (f1 text);
-INSERT INTO TEXT_TBL VALUES ('doh!');
-INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');
-SELECT '' AS two, * FROM TEXT_TBL;
+CREATE TABLE text_tbl (f1 text);
+INSERT INTO text_tbl VALUES ('doh!');
+INSERT INTO text_tbl VALUES ('hi de ho neighbor');
+SELECT '' AS two, * FROM text_tbl;
  two |        f1         
 -----+-------------------
      | doh!
diff --git a/src/test/regress/expected/timestamp.out b/src/test/regress/expected/timestamp.out
index 4a2fabd..749e8bd 100644
--- a/src/test/regress/expected/timestamp.out
+++ b/src/test/regress/expected/timestamp.out
@@ -25,25 +25,25 @@ INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow');
 -- time zone should be ignored by this data type
 INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow EST');
 INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow zulu');
-SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today';
+SELECT count(*) AS one FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today';
  one 
 -----
    1
 (1 row)
 
-SELECT count(*) AS Three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow';
+SELECT count(*) AS three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow';
  three 
 -------
      3
 (1 row)
 
-SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'yesterday';
+SELECT count(*) AS one FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'yesterday';
  one 
 -----
    1
 (1 row)
 
-SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now';
+SELECT count(*) AS one FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now';
  one 
 -----
    1
diff --git a/src/test/regress/expected/timestamptz.out b/src/test/regress/expected/timestamptz.out
index 51d4d21..fdcbfa7 100644
--- a/src/test/regress/expected/timestamptz.out
+++ b/src/test/regress/expected/timestamptz.out
@@ -24,25 +24,25 @@ INSERT INTO TIMESTAMPTZ_TBL VALUES ('yesterday');
 INSERT INTO TIMESTAMPTZ_TBL VALUES ('tomorrow');
 INSERT INTO TIMESTAMPTZ_TBL VALUES ('tomorrow EST');
 INSERT INTO TIMESTAMPTZ_TBL VALUES ('tomorrow zulu');
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'today';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'today';
  one 
 -----
    1
 (1 row)
 
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow';
  one 
 -----
    1
 (1 row)
 
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'yesterday';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'yesterday';
  one 
 -----
    1
 (1 row)
 
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp(2) with time zone 'now';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp(2) with time zone 'now';
  one 
 -----
    1
diff --git a/src/test/regress/expected/union.out b/src/test/regress/expected/union.out
index 016571b..c75f3f6 100644
--- a/src/test/regress/expected/union.out
+++ b/src/test/regress/expected/union.out
@@ -127,9 +127,9 @@ SELECT 1.1 AS two UNION (SELECT 2 UNION ALL SELECT 2);
 --
 -- Try testing from tables...
 --
-SELECT f1 AS five FROM FLOAT8_TBL
+SELECT f1 AS five FROM float8_tbl
 UNION
-SELECT f1 FROM FLOAT8_TBL
+SELECT f1 FROM float8_tbl
 ORDER BY 1;
          five          
 -----------------------
@@ -140,9 +140,9 @@ ORDER BY 1;
                      0
 (5 rows)
 
-SELECT f1 AS ten FROM FLOAT8_TBL
+SELECT f1 AS ten FROM float8_tbl
 UNION ALL
-SELECT f1 FROM FLOAT8_TBL;
+SELECT f1 FROM float8_tbl;
           ten          
 -----------------------
                      0
@@ -157,9 +157,9 @@ SELECT f1 FROM FLOAT8_TBL;
  -1.2345678901234e-200
 (10 rows)
 
-SELECT f1 AS nine FROM FLOAT8_TBL
+SELECT f1 AS nine FROM float8_tbl
 UNION
-SELECT f1 FROM INT4_TBL
+SELECT f1 FROM int4_tbl
 ORDER BY 1;
          nine          
 -----------------------
@@ -174,9 +174,9 @@ ORDER BY 1;
             2147483647
 (9 rows)
 
-SELECT f1 AS ten FROM FLOAT8_TBL
+SELECT f1 AS ten FROM float8_tbl
 UNION ALL
-SELECT f1 FROM INT4_TBL;
+SELECT f1 FROM int4_tbl;
           ten          
 -----------------------
                      0
@@ -191,10 +191,10 @@ SELECT f1 FROM INT4_TBL;
            -2147483647
 (10 rows)
 
-SELECT f1 AS five FROM FLOAT8_TBL
+SELECT f1 AS five FROM float8_tbl
   WHERE f1 BETWEEN -1e6 AND 1e6
 UNION
-SELECT f1 FROM INT4_TBL
+SELECT f1 FROM int4_tbl
   WHERE f1 BETWEEN 0 AND 1000000;
          five          
 -----------------------
@@ -242,7 +242,7 @@ SELECT f1 FROM CHAR_TBL;
  abcd
 (8 rows)
 
-SELECT f1 AS five FROM TEXT_TBL
+SELECT f1 AS five FROM text_tbl
 UNION
 SELECT f1 FROM VARCHAR_TBL
 UNION
@@ -441,9 +441,9 @@ SELECT q1 FROM int8_tbl EXCEPT (((SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1)))
 -- an undecorated constant will work in all cases, but historically this
 -- usage has worked, so test we don't break it.
 --
-SELECT a.f1 FROM (SELECT 'test' AS f1 FROM varchar_tbl) a
+SELECT a.f1 FROM (SELECT 'test' AS f1 FROM VARCHAR_TBL) a
 UNION
-SELECT b.f1 FROM (SELECT f1 FROM varchar_tbl) b
+SELECT b.f1 FROM (SELECT f1 FROM VARCHAR_TBL) b
 ORDER BY 1;
   f1  
 ------
diff --git a/src/test/regress/expected/uuid.out b/src/test/regress/expected/uuid.out
index 59cb1e0..4b7ab62 100644
--- a/src/test/regress/expected/uuid.out
+++ b/src/test/regress/expected/uuid.out
@@ -112,11 +112,11 @@ SELECT COUNT(*) FROM guid1 WHERE guid_field >= '22222222-2222-2222-2222-22222222
 (1 row)
 
 -- btree and hash index creation test
-CREATE INDEX guid1_btree ON guid1 USING BTREE (guid_field);
-CREATE INDEX guid1_hash  ON guid1 USING HASH  (guid_field);
+CREATE INDEX guid1_btree ON guid1 USING btree (guid_field);
+CREATE INDEX guid1_hash  ON guid1 USING hash  (guid_field);
 WARNING:  hash indexes are not WAL-logged and their use is discouraged
 -- unique index test
-CREATE UNIQUE INDEX guid1_unique_BTREE ON guid1 USING BTREE (guid_field);
+CREATE UNIQUE INDEX guid1_unique_btree ON guid1 USING btree (guid_field);
 -- should fail
 INSERT INTO guid1(guid_field) VALUES('11111111-1111-1111-1111-111111111111');
 ERROR:  duplicate key value violates unique constraint "guid1_unique_btree"
diff --git a/src/test/regress/expected/window.out b/src/test/regress/expected/window.out
index 19f909f..ecc2710 100644
--- a/src/test/regress/expected/window.out
+++ b/src/test/regress/expected/window.out
@@ -1189,7 +1189,7 @@ FROM (VALUES
 	(2, 2, 'x'),
 	(3, 1, 'z')
 ) AS t(p, i, v)
-WINDOW wnd AS (PARTITION BY P ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
+WINDOW wnd AS (PARTITION BY p ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
 ORDER BY p, i;
    row    |                    nstrict                    |                  nstrict_init                   |  strict   |  strict_init   
 ----------+-----------------------------------------------+-------------------------------------------------+-----------+----------------
@@ -1787,7 +1787,7 @@ SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
 
 -- ensure aggregate over numeric properly recovers from NaN values
 SELECT a, b,
-       SUM(b) OVER(ORDER BY A ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
+       SUM(b) OVER(ORDER BY a ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
 FROM (VALUES(1,1::numeric),(2,2),(3,'NaN'),(4,3),(5,4)) t(a,b);
  a |  b  | sum 
 ---+-----+-----
diff --git a/src/test/regress/input/constraints.source b/src/test/regress/input/constraints.source
index dbab8f1..f75f916 100644
--- a/src/test/regress/input/constraints.source
+++ b/src/test/regress/input/constraints.source
@@ -23,7 +23,7 @@ INSERT INTO DEFAULT_TBL VALUES (3, null, 1.0);
 
 SELECT '' AS five, * FROM DEFAULT_TBL;
 
-CREATE SEQUENCE DEFAULT_SEQ;
+CREATE SEQUENCE default_seq;
 
 CREATE TABLE DEFAULTEXPR_TBL (i1 int DEFAULT 100 + (200-199) * 2,
 	i2 int DEFAULT nextval('default_seq'));
@@ -51,100 +51,100 @@ DROP TABLE error_tbl;
 -- CHECK syntax
 --
 
-CREATE TABLE CHECK_TBL (x int,
-	CONSTRAINT CHECK_CON CHECK (x > 3));
+CREATE TABLE check_tbl (x int,
+	CONSTRAINT check_con CHECK (x > 3));
 
-INSERT INTO CHECK_TBL VALUES (5);
-INSERT INTO CHECK_TBL VALUES (4);
-INSERT INTO CHECK_TBL VALUES (3);
-INSERT INTO CHECK_TBL VALUES (2);
-INSERT INTO CHECK_TBL VALUES (6);
-INSERT INTO CHECK_TBL VALUES (1);
+INSERT INTO check_tbl VALUES (5);
+INSERT INTO check_tbl VALUES (4);
+INSERT INTO check_tbl VALUES (3);
+INSERT INTO check_tbl VALUES (2);
+INSERT INTO check_tbl VALUES (6);
+INSERT INTO check_tbl VALUES (1);
 
-SELECT '' AS three, * FROM CHECK_TBL;
+SELECT '' AS three, * FROM check_tbl;
 
 CREATE SEQUENCE CHECK_SEQ;
 
-CREATE TABLE CHECK2_TBL (x int, y text, z int,
-	CONSTRAINT SEQUENCE_CON
+CREATE TABLE check2_tbl (x int, y text, z int,
+	CONSTRAINT sequence_con
 	CHECK (x > 3 and y <> 'check failed' and z < 8));
 
-INSERT INTO CHECK2_TBL VALUES (4, 'check ok', -2);
-INSERT INTO CHECK2_TBL VALUES (1, 'x check failed', -2);
-INSERT INTO CHECK2_TBL VALUES (5, 'z check failed', 10);
-INSERT INTO CHECK2_TBL VALUES (0, 'check failed', -2);
-INSERT INTO CHECK2_TBL VALUES (6, 'check failed', 11);
-INSERT INTO CHECK2_TBL VALUES (7, 'check ok', 7);
+INSERT INTO check2_tbl VALUES (4, 'check ok', -2);
+INSERT INTO check2_tbl VALUES (1, 'x check failed', -2);
+INSERT INTO check2_tbl VALUES (5, 'z check failed', 10);
+INSERT INTO check2_tbl VALUES (0, 'check failed', -2);
+INSERT INTO check2_tbl VALUES (6, 'check failed', 11);
+INSERT INTO check2_tbl VALUES (7, 'check ok', 7);
 
-SELECT '' AS two, * from CHECK2_TBL;
+SELECT '' AS two, * from check2_tbl;
 
 --
 -- Check constraints on INSERT
 --
 
-CREATE SEQUENCE INSERT_SEQ;
+CREATE SEQUENCE insert_seq;
 
-CREATE TABLE INSERT_TBL (x INT DEFAULT nextval('insert_seq'),
+CREATE TABLE insert_tbl (x INT DEFAULT nextval('insert_seq'),
 	y TEXT DEFAULT '-NULL-',
 	z INT DEFAULT -1 * currval('insert_seq'),
-	CONSTRAINT INSERT_TBL_CON CHECK (x >= 3 AND y <> 'check failed' AND x < 8),
+	CONSTRAINT insert_tbl_con CHECK (x >= 3 AND y <> 'check failed' AND x < 8),
 	CHECK (x + z = 0));
 
-INSERT INTO INSERT_TBL(x,z) VALUES (2, -2);
+INSERT INTO insert_tbl(x,z) VALUES (2, -2);
 
-SELECT '' AS zero, * FROM INSERT_TBL;
+SELECT '' AS zero, * FROM insert_tbl;
 
 SELECT 'one' AS one, nextval('insert_seq');
 
-INSERT INTO INSERT_TBL(y) VALUES ('Y');
-INSERT INTO INSERT_TBL(y) VALUES ('Y');
-INSERT INTO INSERT_TBL(x,z) VALUES (1, -2);
-INSERT INTO INSERT_TBL(z,x) VALUES (-7,  7);
-INSERT INTO INSERT_TBL VALUES (5, 'check failed', -5);
-INSERT INTO INSERT_TBL VALUES (7, '!check failed', -7);
-INSERT INTO INSERT_TBL(y) VALUES ('-!NULL-');
+INSERT INTO insert_tbl(y) VALUES ('Y');
+INSERT INTO insert_tbl(y) VALUES ('Y');
+INSERT INTO insert_tbl(x,z) VALUES (1, -2);
+INSERT INTO insert_tbl(z,x) VALUES (-7,  7);
+INSERT INTO insert_tbl VALUES (5, 'check failed', -5);
+INSERT INTO insert_tbl VALUES (7, '!check failed', -7);
+INSERT INTO insert_tbl(y) VALUES ('-!NULL-');
 
-SELECT '' AS four, * FROM INSERT_TBL;
+SELECT '' AS four, * FROM insert_tbl;
 
-INSERT INTO INSERT_TBL(y,z) VALUES ('check failed', 4);
-INSERT INTO INSERT_TBL(x,y) VALUES (5, 'check failed');
-INSERT INTO INSERT_TBL(x,y) VALUES (5, '!check failed');
-INSERT INTO INSERT_TBL(y) VALUES ('-!NULL-');
+INSERT INTO insert_tbl(y,z) VALUES ('check failed', 4);
+INSERT INTO insert_tbl(x,y) VALUES (5, 'check failed');
+INSERT INTO insert_tbl(x,y) VALUES (5, '!check failed');
+INSERT INTO insert_tbl(y) VALUES ('-!NULL-');
 
-SELECT '' AS six, * FROM INSERT_TBL;
+SELECT '' AS six, * FROM insert_tbl;
 
 SELECT 'seven' AS one, nextval('insert_seq');
 
-INSERT INTO INSERT_TBL(y) VALUES ('Y');
+INSERT INTO insert_tbl(y) VALUES ('Y');
 
 SELECT 'eight' AS one, currval('insert_seq');
 
 -- According to SQL, it is OK to insert a record that gives rise to NULL
 -- constraint-condition results.  Postgres used to reject this, but it
 -- was wrong:
-INSERT INTO INSERT_TBL VALUES (null, null, null);
+INSERT INTO insert_tbl VALUES (null, null, null);
 
-SELECT '' AS nine, * FROM INSERT_TBL;
+SELECT '' AS nine, * FROM insert_tbl;
 
 --
 -- Check constraints on system columns
 --
 
-CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool,
+CREATE TABLE sys_col_check_tbl (city text, state text, is_capital bool,
                   altitude int,
                   CHECK (NOT (is_capital AND tableoid::regclass::text = 'sys_col_check_tbl')));
 
-INSERT INTO SYS_COL_CHECK_TBL VALUES ('Seattle', 'Washington', false, 100);
-INSERT INTO SYS_COL_CHECK_TBL VALUES ('Olympia', 'Washington', true, 100);
+INSERT INTO sys_col_check_tbl VALUES ('Seattle', 'Washington', false, 100);
+INSERT INTO sys_col_check_tbl VALUES ('Olympia', 'Washington', true, 100);
 
-SELECT *, tableoid::regclass::text FROM SYS_COL_CHECK_TBL;
+SELECT *, tableoid::regclass::text FROM sys_col_check_tbl;
 
-DROP TABLE SYS_COL_CHECK_TBL;
+DROP TABLE sys_col_check_tbl;
 
 --
 -- Check constraints on system columns other then TableOid should return error
 --
-CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool,
+CREATE TABLE sys_col_check_tbl (city text, state text, is_capital bool,
                   altitude int,
 				  CHECK (NOT (is_capital AND ctid::text = 'sys_col_check_tbl')));
 
@@ -152,69 +152,69 @@ CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool,
 -- Check inheritance of defaults and constraints
 --
 
-CREATE TABLE INSERT_CHILD (cx INT default 42,
+CREATE TABLE insert_child (cx INT default 42,
 	cy INT CHECK (cy > x))
-	INHERITS (INSERT_TBL);
+	INHERITS (insert_tbl);
 
-INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,11);
-INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,6);
-INSERT INTO INSERT_CHILD(x,z,cy) VALUES (6,-7,7);
-INSERT INTO INSERT_CHILD(x,y,z,cy) VALUES (6,'check failed',-6,7);
+INSERT INTO insert_child(x,z,cy) VALUES (7,-7,11);
+INSERT INTO insert_child(x,z,cy) VALUES (7,-7,6);
+INSERT INTO insert_child(x,z,cy) VALUES (6,-7,7);
+INSERT INTO insert_child(x,y,z,cy) VALUES (6,'check failed',-6,7);
 
-SELECT * FROM INSERT_CHILD;
+SELECT * FROM insert_child;
 
-DROP TABLE INSERT_CHILD;
+DROP TABLE insert_child;
 
 --
 -- Check NO INHERIT type of constraints and inheritance
 --
 
-CREATE TABLE ATACC1 (TEST INT
-	CHECK (TEST > 0) NO INHERIT);
+CREATE TABLE atacc1 (test INT
+	CHECK (test > 0) NO INHERIT);
 
-CREATE TABLE ATACC2 (TEST2 INT) INHERITS (ATACC1);
+CREATE TABLE atacc2 (test2 INT) INHERITS (atacc1);
 -- check constraint is not there on child
-INSERT INTO ATACC2 (TEST) VALUES (-3);
+INSERT INTO atacc2 (test) VALUES (-3);
 -- check constraint is there on parent
-INSERT INTO ATACC1 (TEST) VALUES (-3);
-DROP TABLE ATACC1 CASCADE;
+INSERT INTO atacc1 (test) VALUES (-3);
+DROP TABLE atacc1 CASCADE;
 
-CREATE TABLE ATACC1 (TEST INT, TEST2 INT
-	CHECK (TEST > 0), CHECK (TEST2 > 10) NO INHERIT);
+CREATE TABLE atacc1 (test INT, test2 INT
+	CHECK (test > 0), CHECK (test2 > 10) NO INHERIT);
 
-CREATE TABLE ATACC2 () INHERITS (ATACC1);
+CREATE TABLE atacc2 () INHERITS (atacc1);
 -- check constraint is there on child
-INSERT INTO ATACC2 (TEST) VALUES (-3);
+INSERT INTO atacc2 (test) VALUES (-3);
 -- check constraint is there on parent
-INSERT INTO ATACC1 (TEST) VALUES (-3);
+INSERT INTO atacc1 (test) VALUES (-3);
 -- check constraint is not there on child
-INSERT INTO ATACC2 (TEST2) VALUES (3);
+INSERT INTO atacc2 (test2) VALUES (3);
 -- check constraint is there on parent
-INSERT INTO ATACC1 (TEST2) VALUES (3);
-DROP TABLE ATACC1 CASCADE;
+INSERT INTO atacc1 (test2) VALUES (3);
+DROP TABLE atacc1 CASCADE;
 
 --
 -- Check constraints on INSERT INTO
 --
 
-DELETE FROM INSERT_TBL;
+DELETE FROM insert_tbl;
 
-ALTER SEQUENCE INSERT_SEQ RESTART WITH 4;
+ALTER SEQUENCE insert_seq RESTART WITH 4;
 
 CREATE TABLE tmp (xd INT, yd TEXT, zd INT);
 
 INSERT INTO tmp VALUES (null, 'Y', null);
 INSERT INTO tmp VALUES (5, '!check failed', null);
 INSERT INTO tmp VALUES (null, 'try again', null);
-INSERT INTO INSERT_TBL(y) select yd from tmp;
+INSERT INTO insert_tbl(y) select yd from tmp;
 
-SELECT '' AS three, * FROM INSERT_TBL;
+SELECT '' AS three, * FROM insert_tbl;
 
-INSERT INTO INSERT_TBL SELECT * FROM tmp WHERE yd = 'try again';
-INSERT INTO INSERT_TBL(y,z) SELECT yd, -7 FROM tmp WHERE yd = 'try again';
-INSERT INTO INSERT_TBL(y,z) SELECT yd, -8 FROM tmp WHERE yd = 'try again';
+INSERT INTO insert_tbl SELECT * FROM tmp WHERE yd = 'try again';
+INSERT INTO insert_tbl(y,z) SELECT yd, -7 FROM tmp WHERE yd = 'try again';
+INSERT INTO insert_tbl(y,z) SELECT yd, -8 FROM tmp WHERE yd = 'try again';
 
-SELECT '' AS four, * FROM INSERT_TBL;
+SELECT '' AS four, * FROM insert_tbl;
 
 DROP TABLE tmp;
 
@@ -222,98 +222,98 @@ DROP TABLE tmp;
 -- Check constraints on UPDATE
 --
 
-UPDATE INSERT_TBL SET x = NULL WHERE x = 5;
-UPDATE INSERT_TBL SET x = 6 WHERE x = 6;
-UPDATE INSERT_TBL SET x = -z, z = -x;
-UPDATE INSERT_TBL SET x = z, z = x;
+UPDATE insert_tbl SET x = NULL WHERE x = 5;
+UPDATE insert_tbl SET x = 6 WHERE x = 6;
+UPDATE insert_tbl SET x = -z, z = -x;
+UPDATE insert_tbl SET x = z, z = x;
 
-SELECT * FROM INSERT_TBL;
+SELECT * FROM insert_tbl;
 
--- DROP TABLE INSERT_TBL;
+-- DROP TABLE insert_tbl;
 
 --
 -- Check constraints on COPY FROM
 --
 
-CREATE TABLE COPY_TBL (x INT, y TEXT, z INT,
-	CONSTRAINT COPY_CON
+CREATE TABLE copy_tbl (x INT, y TEXT, z INT,
+	CONSTRAINT copy_con
 	CHECK (x > 3 AND y <> 'check failed' AND x < 7 ));
 
-COPY COPY_TBL FROM '@abs_srcdir@/data/constro.data';
+COPY copy_tbl FROM '@abs_srcdir@/data/constro.data';
 
-SELECT '' AS two, * FROM COPY_TBL;
+SELECT '' AS two, * FROM copy_tbl;
 
-COPY COPY_TBL FROM '@abs_srcdir@/data/constrf.data';
+COPY copy_tbl FROM '@abs_srcdir@/data/constrf.data';
 
-SELECT * FROM COPY_TBL;
+SELECT * FROM copy_tbl;
 
 --
 -- Primary keys
 --
 
-CREATE TABLE PRIMARY_TBL (i int PRIMARY KEY, t text);
+CREATE TABLE primary_tbl (i int PRIMARY KEY, t text);
 
-INSERT INTO PRIMARY_TBL VALUES (1, 'one');
-INSERT INTO PRIMARY_TBL VALUES (2, 'two');
-INSERT INTO PRIMARY_TBL VALUES (1, 'three');
-INSERT INTO PRIMARY_TBL VALUES (4, 'three');
-INSERT INTO PRIMARY_TBL VALUES (5, 'one');
-INSERT INTO PRIMARY_TBL (t) VALUES ('six');
+INSERT INTO primary_tbl VALUES (1, 'one');
+INSERT INTO primary_tbl VALUES (2, 'two');
+INSERT INTO primary_tbl VALUES (1, 'three');
+INSERT INTO primary_tbl VALUES (4, 'three');
+INSERT INTO primary_tbl VALUES (5, 'one');
+INSERT INTO primary_tbl (t) VALUES ('six');
 
-SELECT '' AS four, * FROM PRIMARY_TBL;
+SELECT '' AS four, * FROM primary_tbl;
 
-DROP TABLE PRIMARY_TBL;
+DROP TABLE primary_tbl;
 
-CREATE TABLE PRIMARY_TBL (i int, t text,
+CREATE TABLE primary_tbl (i int, t text,
 	PRIMARY KEY(i,t));
 
-INSERT INTO PRIMARY_TBL VALUES (1, 'one');
-INSERT INTO PRIMARY_TBL VALUES (2, 'two');
-INSERT INTO PRIMARY_TBL VALUES (1, 'three');
-INSERT INTO PRIMARY_TBL VALUES (4, 'three');
-INSERT INTO PRIMARY_TBL VALUES (5, 'one');
-INSERT INTO PRIMARY_TBL (t) VALUES ('six');
+INSERT INTO primary_tbl VALUES (1, 'one');
+INSERT INTO primary_tbl VALUES (2, 'two');
+INSERT INTO primary_tbl VALUES (1, 'three');
+INSERT INTO primary_tbl VALUES (4, 'three');
+INSERT INTO primary_tbl VALUES (5, 'one');
+INSERT INTO primary_tbl (t) VALUES ('six');
 
-SELECT '' AS three, * FROM PRIMARY_TBL;
+SELECT '' AS three, * FROM primary_tbl;
 
-DROP TABLE PRIMARY_TBL;
+DROP TABLE primary_tbl;
 
 --
 -- Unique keys
 --
 
-CREATE TABLE UNIQUE_TBL (i int UNIQUE, t text);
+CREATE TABLE unique_tbl (i int UNIQUE, t text);
 
-INSERT INTO UNIQUE_TBL VALUES (1, 'one');
-INSERT INTO UNIQUE_TBL VALUES (2, 'two');
-INSERT INTO UNIQUE_TBL VALUES (1, 'three');
-INSERT INTO UNIQUE_TBL VALUES (4, 'four');
-INSERT INTO UNIQUE_TBL VALUES (5, 'one');
-INSERT INTO UNIQUE_TBL (t) VALUES ('six');
-INSERT INTO UNIQUE_TBL (t) VALUES ('seven');
+INSERT INTO unique_tbl VALUES (1, 'one');
+INSERT INTO unique_tbl VALUES (2, 'two');
+INSERT INTO unique_tbl VALUES (1, 'three');
+INSERT INTO unique_tbl VALUES (4, 'four');
+INSERT INTO unique_tbl VALUES (5, 'one');
+INSERT INTO unique_tbl (t) VALUES ('six');
+INSERT INTO unique_tbl (t) VALUES ('seven');
 
-INSERT INTO UNIQUE_TBL VALUES (5, 'five-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'five-upsert-update';
-INSERT INTO UNIQUE_TBL VALUES (6, 'six-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'six-upsert-update';
+INSERT INTO unique_tbl VALUES (5, 'five-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'five-upsert-update';
+INSERT INTO unique_tbl VALUES (6, 'six-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'six-upsert-update';
 -- should fail
-INSERT INTO UNIQUE_TBL VALUES (1, 'a'), (2, 'b'), (2, 'b') ON CONFLICT (i) DO UPDATE SET t = 'fails';
+INSERT INTO unique_tbl VALUES (1, 'a'), (2, 'b'), (2, 'b') ON CONFLICT (i) DO UPDATE SET t = 'fails';
 
-SELECT '' AS five, * FROM UNIQUE_TBL;
+SELECT '' AS five, * FROM unique_tbl;
 
-DROP TABLE UNIQUE_TBL;
+DROP TABLE unique_tbl;
 
-CREATE TABLE UNIQUE_TBL (i int, t text,
+CREATE TABLE unique_tbl (i int, t text,
 	UNIQUE(i,t));
 
-INSERT INTO UNIQUE_TBL VALUES (1, 'one');
-INSERT INTO UNIQUE_TBL VALUES (2, 'two');
-INSERT INTO UNIQUE_TBL VALUES (1, 'three');
-INSERT INTO UNIQUE_TBL VALUES (1, 'one');
-INSERT INTO UNIQUE_TBL VALUES (5, 'one');
-INSERT INTO UNIQUE_TBL (t) VALUES ('six');
+INSERT INTO unique_tbl VALUES (1, 'one');
+INSERT INTO unique_tbl VALUES (2, 'two');
+INSERT INTO unique_tbl VALUES (1, 'three');
+INSERT INTO unique_tbl VALUES (1, 'one');
+INSERT INTO unique_tbl VALUES (5, 'one');
+INSERT INTO unique_tbl (t) VALUES ('six');
 
-SELECT '' AS five, * FROM UNIQUE_TBL;
+SELECT '' AS five, * FROM unique_tbl;
 
-DROP TABLE UNIQUE_TBL;
+DROP TABLE unique_tbl;
 
 --
 -- Deferrable unique constraints
diff --git a/src/test/regress/output/constraints.source b/src/test/regress/output/constraints.source
index e6d3174..c70f4ac 100644
--- a/src/test/regress/output/constraints.source
+++ b/src/test/regress/output/constraints.source
@@ -27,7 +27,7 @@ SELECT '' AS five, * FROM DEFAULT_TBL;
       |   3 |        |       1
 (5 rows)
 
-CREATE SEQUENCE DEFAULT_SEQ;
+CREATE SEQUENCE default_seq;
 CREATE TABLE DEFAULTEXPR_TBL (i1 int DEFAULT 100 + (200-199) * 2,
 	i2 int DEFAULT nextval('default_seq'));
 INSERT INTO DEFAULTEXPR_TBL VALUES (-1, -2);
@@ -62,21 +62,21 @@ DROP TABLE error_tbl;
 --
 -- CHECK syntax
 --
-CREATE TABLE CHECK_TBL (x int,
-	CONSTRAINT CHECK_CON CHECK (x > 3));
-INSERT INTO CHECK_TBL VALUES (5);
-INSERT INTO CHECK_TBL VALUES (4);
-INSERT INTO CHECK_TBL VALUES (3);
+CREATE TABLE check_tbl (x int,
+	CONSTRAINT check_con CHECK (x > 3));
+INSERT INTO check_tbl VALUES (5);
+INSERT INTO check_tbl VALUES (4);
+INSERT INTO check_tbl VALUES (3);
 ERROR:  new row for relation "check_tbl" violates check constraint "check_con"
 DETAIL:  Failing row contains (3).
-INSERT INTO CHECK_TBL VALUES (2);
+INSERT INTO check_tbl VALUES (2);
 ERROR:  new row for relation "check_tbl" violates check constraint "check_con"
 DETAIL:  Failing row contains (2).
-INSERT INTO CHECK_TBL VALUES (6);
-INSERT INTO CHECK_TBL VALUES (1);
+INSERT INTO check_tbl VALUES (6);
+INSERT INTO check_tbl VALUES (1);
 ERROR:  new row for relation "check_tbl" violates check constraint "check_con"
 DETAIL:  Failing row contains (1).
-SELECT '' AS three, * FROM CHECK_TBL;
+SELECT '' AS three, * FROM check_tbl;
  three | x 
 -------+---
        | 5
@@ -85,24 +85,24 @@ SELECT '' AS three, * FROM CHECK_TBL;
 (3 rows)
 
 CREATE SEQUENCE CHECK_SEQ;
-CREATE TABLE CHECK2_TBL (x int, y text, z int,
-	CONSTRAINT SEQUENCE_CON
+CREATE TABLE check2_tbl (x int, y text, z int,
+	CONSTRAINT sequence_con
 	CHECK (x > 3 and y <> 'check failed' and z < 8));
-INSERT INTO CHECK2_TBL VALUES (4, 'check ok', -2);
-INSERT INTO CHECK2_TBL VALUES (1, 'x check failed', -2);
+INSERT INTO check2_tbl VALUES (4, 'check ok', -2);
+INSERT INTO check2_tbl VALUES (1, 'x check failed', -2);
 ERROR:  new row for relation "check2_tbl" violates check constraint "sequence_con"
 DETAIL:  Failing row contains (1, x check failed, -2).
-INSERT INTO CHECK2_TBL VALUES (5, 'z check failed', 10);
+INSERT INTO check2_tbl VALUES (5, 'z check failed', 10);
 ERROR:  new row for relation "check2_tbl" violates check constraint "sequence_con"
 DETAIL:  Failing row contains (5, z check failed, 10).
-INSERT INTO CHECK2_TBL VALUES (0, 'check failed', -2);
+INSERT INTO check2_tbl VALUES (0, 'check failed', -2);
 ERROR:  new row for relation "check2_tbl" violates check constraint "sequence_con"
 DETAIL:  Failing row contains (0, check failed, -2).
-INSERT INTO CHECK2_TBL VALUES (6, 'check failed', 11);
+INSERT INTO check2_tbl VALUES (6, 'check failed', 11);
 ERROR:  new row for relation "check2_tbl" violates check constraint "sequence_con"
 DETAIL:  Failing row contains (6, check failed, 11).
-INSERT INTO CHECK2_TBL VALUES (7, 'check ok', 7);
-SELECT '' AS two, * from CHECK2_TBL;
+INSERT INTO check2_tbl VALUES (7, 'check ok', 7);
+SELECT '' AS two, * from check2_tbl;
  two | x |    y     | z  
 -----+---+----------+----
      | 4 | check ok | -2
@@ -112,16 +112,16 @@ SELECT '' AS two, * from CHECK2_TBL;
 --
 -- Check constraints on INSERT
 --
-CREATE SEQUENCE INSERT_SEQ;
-CREATE TABLE INSERT_TBL (x INT DEFAULT nextval('insert_seq'),
+CREATE SEQUENCE insert_seq;
+CREATE TABLE insert_tbl (x INT DEFAULT nextval('insert_seq'),
 	y TEXT DEFAULT '-NULL-',
 	z INT DEFAULT -1 * currval('insert_seq'),
-	CONSTRAINT INSERT_TBL_CON CHECK (x >= 3 AND y <> 'check failed' AND x < 8),
+	CONSTRAINT insert_tbl_con CHECK (x >= 3 AND y <> 'check failed' AND x < 8),
 	CHECK (x + z = 0));
-INSERT INTO INSERT_TBL(x,z) VALUES (2, -2);
+INSERT INTO insert_tbl(x,z) VALUES (2, -2);
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (2, -NULL-, -2).
-SELECT '' AS zero, * FROM INSERT_TBL;
+SELECT '' AS zero, * FROM insert_tbl;
  zero | x | y | z 
 ------+---+---+---
 (0 rows)
@@ -132,20 +132,20 @@ SELECT 'one' AS one, nextval('insert_seq');
  one |       1
 (1 row)
 
-INSERT INTO INSERT_TBL(y) VALUES ('Y');
+INSERT INTO insert_tbl(y) VALUES ('Y');
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (2, Y, -2).
-INSERT INTO INSERT_TBL(y) VALUES ('Y');
-INSERT INTO INSERT_TBL(x,z) VALUES (1, -2);
+INSERT INTO insert_tbl(y) VALUES ('Y');
+INSERT INTO insert_tbl(x,z) VALUES (1, -2);
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_check"
 DETAIL:  Failing row contains (1, -NULL-, -2).
-INSERT INTO INSERT_TBL(z,x) VALUES (-7,  7);
-INSERT INTO INSERT_TBL VALUES (5, 'check failed', -5);
+INSERT INTO insert_tbl(z,x) VALUES (-7,  7);
+INSERT INTO insert_tbl VALUES (5, 'check failed', -5);
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (5, check failed, -5).
-INSERT INTO INSERT_TBL VALUES (7, '!check failed', -7);
-INSERT INTO INSERT_TBL(y) VALUES ('-!NULL-');
-SELECT '' AS four, * FROM INSERT_TBL;
+INSERT INTO insert_tbl VALUES (7, '!check failed', -7);
+INSERT INTO insert_tbl(y) VALUES ('-!NULL-');
+SELECT '' AS four, * FROM insert_tbl;
  four | x |       y       | z  
 ------+---+---------------+----
       | 3 | Y             | -3
@@ -154,15 +154,15 @@ SELECT '' AS four, * FROM INSERT_TBL;
       | 4 | -!NULL-       | -4
 (4 rows)
 
-INSERT INTO INSERT_TBL(y,z) VALUES ('check failed', 4);
+INSERT INTO insert_tbl(y,z) VALUES ('check failed', 4);
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_check"
 DETAIL:  Failing row contains (5, check failed, 4).
-INSERT INTO INSERT_TBL(x,y) VALUES (5, 'check failed');
+INSERT INTO insert_tbl(x,y) VALUES (5, 'check failed');
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (5, check failed, -5).
-INSERT INTO INSERT_TBL(x,y) VALUES (5, '!check failed');
-INSERT INTO INSERT_TBL(y) VALUES ('-!NULL-');
-SELECT '' AS six, * FROM INSERT_TBL;
+INSERT INTO insert_tbl(x,y) VALUES (5, '!check failed');
+INSERT INTO insert_tbl(y) VALUES ('-!NULL-');
+SELECT '' AS six, * FROM insert_tbl;
  six | x |       y       | z  
 -----+---+---------------+----
      | 3 | Y             | -3
@@ -179,7 +179,7 @@ SELECT 'seven' AS one, nextval('insert_seq');
  seven |       7
 (1 row)
 
-INSERT INTO INSERT_TBL(y) VALUES ('Y');
+INSERT INTO insert_tbl(y) VALUES ('Y');
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (8, Y, -8).
 SELECT 'eight' AS one, currval('insert_seq');
@@ -191,8 +191,8 @@ SELECT 'eight' AS one, currval('insert_seq');
 -- According to SQL, it is OK to insert a record that gives rise to NULL
 -- constraint-condition results.  Postgres used to reject this, but it
 -- was wrong:
-INSERT INTO INSERT_TBL VALUES (null, null, null);
-SELECT '' AS nine, * FROM INSERT_TBL;
+INSERT INTO insert_tbl VALUES (null, null, null);
+SELECT '' AS nine, * FROM insert_tbl;
  nine | x |       y       | z  
 ------+---+---------------+----
       | 3 | Y             | -3
@@ -207,94 +207,94 @@ SELECT '' AS nine, * FROM INSERT_TBL;
 --
 -- Check constraints on system columns
 --
-CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool,
+CREATE TABLE sys_col_check_tbl (city text, state text, is_capital bool,
                   altitude int,
                   CHECK (NOT (is_capital AND tableoid::regclass::text = 'sys_col_check_tbl')));
-INSERT INTO SYS_COL_CHECK_TBL VALUES ('Seattle', 'Washington', false, 100);
-INSERT INTO SYS_COL_CHECK_TBL VALUES ('Olympia', 'Washington', true, 100);
+INSERT INTO sys_col_check_tbl VALUES ('Seattle', 'Washington', false, 100);
+INSERT INTO sys_col_check_tbl VALUES ('Olympia', 'Washington', true, 100);
 ERROR:  new row for relation "sys_col_check_tbl" violates check constraint "sys_col_check_tbl_check"
 DETAIL:  Failing row contains (Olympia, Washington, t, 100).
-SELECT *, tableoid::regclass::text FROM SYS_COL_CHECK_TBL;
+SELECT *, tableoid::regclass::text FROM sys_col_check_tbl;
   city   |   state    | is_capital | altitude |     tableoid      
 ---------+------------+------------+----------+-------------------
  Seattle | Washington | f          |      100 | sys_col_check_tbl
 (1 row)
 
-DROP TABLE SYS_COL_CHECK_TBL;
+DROP TABLE sys_col_check_tbl;
 --
 -- Check constraints on system columns other then TableOid should return error
 --
-CREATE TABLE SYS_COL_CHECK_TBL (city text, state text, is_capital bool,
+CREATE TABLE sys_col_check_tbl (city text, state text, is_capital bool,
                   altitude int,
 				  CHECK (NOT (is_capital AND ctid::text = 'sys_col_check_tbl')));
 ERROR:  system column "ctid" reference in check constraint is invalid
 --
 -- Check inheritance of defaults and constraints
 --
-CREATE TABLE INSERT_CHILD (cx INT default 42,
+CREATE TABLE insert_child (cx INT default 42,
 	cy INT CHECK (cy > x))
-	INHERITS (INSERT_TBL);
-INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,11);
-INSERT INTO INSERT_CHILD(x,z,cy) VALUES (7,-7,6);
+	INHERITS (insert_tbl);
+INSERT INTO insert_child(x,z,cy) VALUES (7,-7,11);
+INSERT INTO insert_child(x,z,cy) VALUES (7,-7,6);
 ERROR:  new row for relation "insert_child" violates check constraint "insert_child_check"
 DETAIL:  Failing row contains (7, -NULL-, -7, 42, 6).
-INSERT INTO INSERT_CHILD(x,z,cy) VALUES (6,-7,7);
+INSERT INTO insert_child(x,z,cy) VALUES (6,-7,7);
 ERROR:  new row for relation "insert_child" violates check constraint "insert_tbl_check"
 DETAIL:  Failing row contains (6, -NULL-, -7, 42, 7).
-INSERT INTO INSERT_CHILD(x,y,z,cy) VALUES (6,'check failed',-6,7);
+INSERT INTO insert_child(x,y,z,cy) VALUES (6,'check failed',-6,7);
 ERROR:  new row for relation "insert_child" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (6, check failed, -6, 42, 7).
-SELECT * FROM INSERT_CHILD;
+SELECT * FROM insert_child;
  x |   y    | z  | cx | cy 
 ---+--------+----+----+----
  7 | -NULL- | -7 | 42 | 11
 (1 row)
 
-DROP TABLE INSERT_CHILD;
+DROP TABLE insert_child;
 --
 -- Check NO INHERIT type of constraints and inheritance
 --
-CREATE TABLE ATACC1 (TEST INT
-	CHECK (TEST > 0) NO INHERIT);
-CREATE TABLE ATACC2 (TEST2 INT) INHERITS (ATACC1);
+CREATE TABLE atacc1 (test INT
+	CHECK (test > 0) NO INHERIT);
+CREATE TABLE atacc2 (test2 INT) INHERITS (atacc1);
 -- check constraint is not there on child
-INSERT INTO ATACC2 (TEST) VALUES (-3);
+INSERT INTO atacc2 (test) VALUES (-3);
 -- check constraint is there on parent
-INSERT INTO ATACC1 (TEST) VALUES (-3);
+INSERT INTO atacc1 (test) VALUES (-3);
 ERROR:  new row for relation "atacc1" violates check constraint "atacc1_test_check"
 DETAIL:  Failing row contains (-3).
-DROP TABLE ATACC1 CASCADE;
+DROP TABLE atacc1 CASCADE;
 NOTICE:  drop cascades to table atacc2
-CREATE TABLE ATACC1 (TEST INT, TEST2 INT
-	CHECK (TEST > 0), CHECK (TEST2 > 10) NO INHERIT);
-CREATE TABLE ATACC2 () INHERITS (ATACC1);
+CREATE TABLE atacc1 (test INT, test2 INT
+	CHECK (test > 0), CHECK (test2 > 10) NO INHERIT);
+CREATE TABLE atacc2 () INHERITS (atacc1);
 -- check constraint is there on child
-INSERT INTO ATACC2 (TEST) VALUES (-3);
+INSERT INTO atacc2 (test) VALUES (-3);
 ERROR:  new row for relation "atacc2" violates check constraint "atacc1_test_check"
 DETAIL:  Failing row contains (-3, null).
 -- check constraint is there on parent
-INSERT INTO ATACC1 (TEST) VALUES (-3);
+INSERT INTO atacc1 (test) VALUES (-3);
 ERROR:  new row for relation "atacc1" violates check constraint "atacc1_test_check"
 DETAIL:  Failing row contains (-3, null).
 -- check constraint is not there on child
-INSERT INTO ATACC2 (TEST2) VALUES (3);
+INSERT INTO atacc2 (test2) VALUES (3);
 -- check constraint is there on parent
-INSERT INTO ATACC1 (TEST2) VALUES (3);
+INSERT INTO atacc1 (test2) VALUES (3);
 ERROR:  new row for relation "atacc1" violates check constraint "atacc1_test2_check"
 DETAIL:  Failing row contains (null, 3).
-DROP TABLE ATACC1 CASCADE;
+DROP TABLE atacc1 CASCADE;
 NOTICE:  drop cascades to table atacc2
 --
 -- Check constraints on INSERT INTO
 --
-DELETE FROM INSERT_TBL;
-ALTER SEQUENCE INSERT_SEQ RESTART WITH 4;
+DELETE FROM insert_tbl;
+ALTER SEQUENCE insert_seq RESTART WITH 4;
 CREATE TABLE tmp (xd INT, yd TEXT, zd INT);
 INSERT INTO tmp VALUES (null, 'Y', null);
 INSERT INTO tmp VALUES (5, '!check failed', null);
 INSERT INTO tmp VALUES (null, 'try again', null);
-INSERT INTO INSERT_TBL(y) select yd from tmp;
-SELECT '' AS three, * FROM INSERT_TBL;
+INSERT INTO insert_tbl(y) select yd from tmp;
+SELECT '' AS three, * FROM insert_tbl;
  three | x |       y       | z  
 -------+---+---------------+----
        | 4 | Y             | -4
@@ -302,12 +302,12 @@ SELECT '' AS three, * FROM INSERT_TBL;
        | 6 | try again     | -6
 (3 rows)
 
-INSERT INTO INSERT_TBL SELECT * FROM tmp WHERE yd = 'try again';
-INSERT INTO INSERT_TBL(y,z) SELECT yd, -7 FROM tmp WHERE yd = 'try again';
-INSERT INTO INSERT_TBL(y,z) SELECT yd, -8 FROM tmp WHERE yd = 'try again';
+INSERT INTO insert_tbl SELECT * FROM tmp WHERE yd = 'try again';
+INSERT INTO insert_tbl(y,z) SELECT yd, -7 FROM tmp WHERE yd = 'try again';
+INSERT INTO insert_tbl(y,z) SELECT yd, -8 FROM tmp WHERE yd = 'try again';
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (8, try again, -8).
-SELECT '' AS four, * FROM INSERT_TBL;
+SELECT '' AS four, * FROM insert_tbl;
  four | x |       y       | z  
 ------+---+---------------+----
       | 4 | Y             | -4
@@ -321,13 +321,13 @@ DROP TABLE tmp;
 --
 -- Check constraints on UPDATE
 --
-UPDATE INSERT_TBL SET x = NULL WHERE x = 5;
-UPDATE INSERT_TBL SET x = 6 WHERE x = 6;
-UPDATE INSERT_TBL SET x = -z, z = -x;
-UPDATE INSERT_TBL SET x = z, z = x;
+UPDATE insert_tbl SET x = NULL WHERE x = 5;
+UPDATE insert_tbl SET x = 6 WHERE x = 6;
+UPDATE insert_tbl SET x = -z, z = -x;
+UPDATE insert_tbl SET x = z, z = x;
 ERROR:  new row for relation "insert_tbl" violates check constraint "insert_tbl_con"
 DETAIL:  Failing row contains (-4, Y, 4).
-SELECT * FROM INSERT_TBL;
+SELECT * FROM insert_tbl;
  x |       y       | z  
 ---+---------------+----
  4 | Y             | -4
@@ -337,26 +337,26 @@ SELECT * FROM INSERT_TBL;
  6 | try again     | -6
 (5 rows)
 
--- DROP TABLE INSERT_TBL;
+-- DROP TABLE insert_tbl;
 --
 -- Check constraints on COPY FROM
 --
-CREATE TABLE COPY_TBL (x INT, y TEXT, z INT,
-	CONSTRAINT COPY_CON
+CREATE TABLE copy_tbl (x INT, y TEXT, z INT,
+	CONSTRAINT copy_con
 	CHECK (x > 3 AND y <> 'check failed' AND x < 7 ));
-COPY COPY_TBL FROM '@abs_srcdir@/data/constro.data';
-SELECT '' AS two, * FROM COPY_TBL;
+COPY copy_tbl FROM '@abs_srcdir@/data/constro.data';
+SELECT '' AS two, * FROM copy_tbl;
  two | x |       y       | z 
 -----+---+---------------+---
      | 4 | !check failed | 5
      | 6 | OK            | 4
 (2 rows)
 
-COPY COPY_TBL FROM '@abs_srcdir@/data/constrf.data';
+COPY copy_tbl FROM '@abs_srcdir@/data/constrf.data';
 ERROR:  new row for relation "copy_tbl" violates check constraint "copy_con"
 DETAIL:  Failing row contains (7, check failed, 6).
 CONTEXT:  COPY copy_tbl, line 2: "7	check failed	6"
-SELECT * FROM COPY_TBL;
+SELECT * FROM copy_tbl;
  x |       y       | z 
 ---+---------------+---
  4 | !check failed | 5
@@ -366,18 +366,18 @@ SELECT * FROM COPY_TBL;
 --
 -- Primary keys
 --
-CREATE TABLE PRIMARY_TBL (i int PRIMARY KEY, t text);
-INSERT INTO PRIMARY_TBL VALUES (1, 'one');
-INSERT INTO PRIMARY_TBL VALUES (2, 'two');
-INSERT INTO PRIMARY_TBL VALUES (1, 'three');
+CREATE TABLE primary_tbl (i int PRIMARY KEY, t text);
+INSERT INTO primary_tbl VALUES (1, 'one');
+INSERT INTO primary_tbl VALUES (2, 'two');
+INSERT INTO primary_tbl VALUES (1, 'three');
 ERROR:  duplicate key value violates unique constraint "primary_tbl_pkey"
 DETAIL:  Key (i)=(1) already exists.
-INSERT INTO PRIMARY_TBL VALUES (4, 'three');
-INSERT INTO PRIMARY_TBL VALUES (5, 'one');
-INSERT INTO PRIMARY_TBL (t) VALUES ('six');
+INSERT INTO primary_tbl VALUES (4, 'three');
+INSERT INTO primary_tbl VALUES (5, 'one');
+INSERT INTO primary_tbl (t) VALUES ('six');
 ERROR:  null value in column "i" violates not-null constraint
 DETAIL:  Failing row contains (null, six).
-SELECT '' AS four, * FROM PRIMARY_TBL;
+SELECT '' AS four, * FROM primary_tbl;
  four | i |   t   
 ------+---+-------
       | 1 | one
@@ -386,18 +386,18 @@ SELECT '' AS four, * FROM PRIMARY_TBL;
       | 5 | one
 (4 rows)
 
-DROP TABLE PRIMARY_TBL;
-CREATE TABLE PRIMARY_TBL (i int, t text,
+DROP TABLE primary_tbl;
+CREATE TABLE primary_tbl (i int, t text,
 	PRIMARY KEY(i,t));
-INSERT INTO PRIMARY_TBL VALUES (1, 'one');
-INSERT INTO PRIMARY_TBL VALUES (2, 'two');
-INSERT INTO PRIMARY_TBL VALUES (1, 'three');
-INSERT INTO PRIMARY_TBL VALUES (4, 'three');
-INSERT INTO PRIMARY_TBL VALUES (5, 'one');
-INSERT INTO PRIMARY_TBL (t) VALUES ('six');
+INSERT INTO primary_tbl VALUES (1, 'one');
+INSERT INTO primary_tbl VALUES (2, 'two');
+INSERT INTO primary_tbl VALUES (1, 'three');
+INSERT INTO primary_tbl VALUES (4, 'three');
+INSERT INTO primary_tbl VALUES (5, 'one');
+INSERT INTO primary_tbl (t) VALUES ('six');
 ERROR:  null value in column "i" violates not-null constraint
 DETAIL:  Failing row contains (null, six).
-SELECT '' AS three, * FROM PRIMARY_TBL;
+SELECT '' AS three, * FROM primary_tbl;
  three | i |   t   
 -------+---+-------
        | 1 | one
@@ -407,27 +407,27 @@ SELECT '' AS three, * FROM PRIMARY_TBL;
        | 5 | one
 (5 rows)
 
-DROP TABLE PRIMARY_TBL;
+DROP TABLE primary_tbl;
 --
 -- Unique keys
 --
-CREATE TABLE UNIQUE_TBL (i int UNIQUE, t text);
-INSERT INTO UNIQUE_TBL VALUES (1, 'one');
-INSERT INTO UNIQUE_TBL VALUES (2, 'two');
-INSERT INTO UNIQUE_TBL VALUES (1, 'three');
+CREATE TABLE unique_tbl (i int UNIQUE, t text);
+INSERT INTO unique_tbl VALUES (1, 'one');
+INSERT INTO unique_tbl VALUES (2, 'two');
+INSERT INTO unique_tbl VALUES (1, 'three');
 ERROR:  duplicate key value violates unique constraint "unique_tbl_i_key"
 DETAIL:  Key (i)=(1) already exists.
-INSERT INTO UNIQUE_TBL VALUES (4, 'four');
-INSERT INTO UNIQUE_TBL VALUES (5, 'one');
-INSERT INTO UNIQUE_TBL (t) VALUES ('six');
-INSERT INTO UNIQUE_TBL (t) VALUES ('seven');
-INSERT INTO UNIQUE_TBL VALUES (5, 'five-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'five-upsert-update';
-INSERT INTO UNIQUE_TBL VALUES (6, 'six-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'six-upsert-update';
+INSERT INTO unique_tbl VALUES (4, 'four');
+INSERT INTO unique_tbl VALUES (5, 'one');
+INSERT INTO unique_tbl (t) VALUES ('six');
+INSERT INTO unique_tbl (t) VALUES ('seven');
+INSERT INTO unique_tbl VALUES (5, 'five-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'five-upsert-update';
+INSERT INTO unique_tbl VALUES (6, 'six-upsert-insert') ON CONFLICT (i) DO UPDATE SET t = 'six-upsert-update';
 -- should fail
-INSERT INTO UNIQUE_TBL VALUES (1, 'a'), (2, 'b'), (2, 'b') ON CONFLICT (i) DO UPDATE SET t = 'fails';
+INSERT INTO unique_tbl VALUES (1, 'a'), (2, 'b'), (2, 'b') ON CONFLICT (i) DO UPDATE SET t = 'fails';
 ERROR:  ON CONFLICT DO UPDATE command cannot affect row a second time
 HINT:  Ensure that no rows proposed for insertion within the same command have duplicate constrained values.
-SELECT '' AS five, * FROM UNIQUE_TBL;
+SELECT '' AS five, * FROM unique_tbl;
  five | i |         t          
 ------+---+--------------------
       | 1 | one
@@ -439,18 +439,18 @@ SELECT '' AS five, * FROM UNIQUE_TBL;
       | 6 | six-upsert-insert
 (7 rows)
 
-DROP TABLE UNIQUE_TBL;
-CREATE TABLE UNIQUE_TBL (i int, t text,
+DROP TABLE unique_tbl;
+CREATE TABLE unique_tbl (i int, t text,
 	UNIQUE(i,t));
-INSERT INTO UNIQUE_TBL VALUES (1, 'one');
-INSERT INTO UNIQUE_TBL VALUES (2, 'two');
-INSERT INTO UNIQUE_TBL VALUES (1, 'three');
-INSERT INTO UNIQUE_TBL VALUES (1, 'one');
+INSERT INTO unique_tbl VALUES (1, 'one');
+INSERT INTO unique_tbl VALUES (2, 'two');
+INSERT INTO unique_tbl VALUES (1, 'three');
+INSERT INTO unique_tbl VALUES (1, 'one');
 ERROR:  duplicate key value violates unique constraint "unique_tbl_i_t_key"
 DETAIL:  Key (i, t)=(1, one) already exists.
-INSERT INTO UNIQUE_TBL VALUES (5, 'one');
-INSERT INTO UNIQUE_TBL (t) VALUES ('six');
-SELECT '' AS five, * FROM UNIQUE_TBL;
+INSERT INTO unique_tbl VALUES (5, 'one');
+INSERT INTO unique_tbl (t) VALUES ('six');
+SELECT '' AS five, * FROM unique_tbl;
  five | i |   t   
 ------+---+-------
       | 1 | one
@@ -460,7 +460,7 @@ SELECT '' AS five, * FROM UNIQUE_TBL;
       |   | six
 (5 rows)
 
-DROP TABLE UNIQUE_TBL;
+DROP TABLE unique_tbl;
 --
 -- Deferrable unique constraints
 --
diff --git a/src/test/regress/sql/aggregates.sql b/src/test/regress/sql/aggregates.sql
index 2eeb3ee..b222851 100644
--- a/src/test/regress/sql/aggregates.sql
+++ b/src/test/regress/sql/aggregates.sql
@@ -498,10 +498,10 @@ select string_agg(a,'AB') from (values(null),(null),('bbbb'),('cccc')) g(a);
 select string_agg(a,',') from (values(null),(null)) g(a);
 
 -- check some implicit casting cases, as per bug #5564
-select string_agg(distinct f1, ',' order by f1) from varchar_tbl;  -- ok
-select string_agg(distinct f1::text, ',' order by f1) from varchar_tbl;  -- not ok
-select string_agg(distinct f1, ',' order by f1::text) from varchar_tbl;  -- not ok
-select string_agg(distinct f1::text, ',' order by f1::text) from varchar_tbl;  -- ok
+select string_agg(distinct f1, ',' order by f1) from VARCHAR_TBL;  -- ok
+select string_agg(distinct f1::text, ',' order by f1) from VARCHAR_TBL;  -- not ok
+select string_agg(distinct f1, ',' order by f1::text) from VARCHAR_TBL;  -- not ok
+select string_agg(distinct f1::text, ',' order by f1::text) from VARCHAR_TBL;  -- ok
 
 -- string_agg bytea tests
 create table bytea_test_table(v bytea);
diff --git a/src/test/regress/sql/alter_table.sql b/src/test/regress/sql/alter_table.sql
index 4a32f99..b73818d 100644
--- a/src/test/regress/sql/alter_table.sql
+++ b/src/test/regress/sql/alter_table.sql
@@ -304,7 +304,7 @@ ALTER TABLE tmp3 VALIDATE CONSTRAINT b_le_20;	-- succeeds
 CREATE FUNCTION boo(int) RETURNS int IMMUTABLE STRICT LANGUAGE plpgsql AS $$ BEGIN RAISE NOTICE 'boo: %', $1; RETURN $1; END; $$;
 INSERT INTO tmp7 VALUES (8, 18);
 ALTER TABLE tmp7 ADD CONSTRAINT identity CHECK (b = boo(b));
-ALTER TABLE tmp3 ADD CONSTRAINT IDENTITY check (b = boo(b)) NOT VALID;
+ALTER TABLE tmp3 ADD CONSTRAINT identity check (b = boo(b)) NOT VALID;
 ALTER TABLE tmp3 VALIDATE CONSTRAINT identity;
 
 -- Try (and fail) to create constraint from tmp5(a) to tmp4(a) - unique constraint on
@@ -353,84 +353,84 @@ alter table nv_parent add check (d between '2001-01-01'::date and '2099-12-31'::
 -- Note: these tables are TEMP to avoid name conflicts when this test
 -- is run in parallel with foreign_key.sql.
 
-CREATE TEMP TABLE PKTABLE (ptest1 int PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
-CREATE TEMP TABLE FKTABLE (ftest1 inet);
+CREATE TEMP TABLE pktable (ptest1 int PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
+CREATE TEMP TABLE fktable (ftest1 inet);
 -- This next should fail, because int=inet does not exist
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
 -- This should also fail for the same reason, but here we
 -- give the column name
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable(ptest1);
-DROP TABLE FKTABLE;
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable(ptest1);
+DROP TABLE fktable;
 -- This should succeed, even though they are different types,
 -- because int=int8 exists and is a member of the integer opfamily
-CREATE TEMP TABLE FKTABLE (ftest1 int8);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
+CREATE TEMP TABLE fktable (ftest1 int8);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
-DROP TABLE FKTABLE;
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
+DROP TABLE fktable;
 -- This should fail, because we'd have to cast numeric to int which is
 -- not an implicit coercion (or use numeric=numeric, but that's not part
 -- of the integer opfamily)
-CREATE TEMP TABLE FKTABLE (ftest1 numeric);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+CREATE TEMP TABLE fktable (ftest1 numeric);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
+DROP TABLE fktable;
+DROP TABLE pktable;
 -- On the other hand, this should work because int implicitly promotes to
 -- numeric, and we allow promotion on the FK side
-CREATE TEMP TABLE PKTABLE (ptest1 numeric PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
-CREATE TEMP TABLE FKTABLE (ftest1 int);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1) references pktable;
+CREATE TEMP TABLE pktable (ptest1 numeric PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
+CREATE TEMP TABLE fktable (ftest1 int);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1) references pktable;
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
+DROP TABLE fktable;
+DROP TABLE pktable;
 
-CREATE TEMP TABLE PKTABLE (ptest1 int, ptest2 inet,
+CREATE TEMP TABLE pktable (ptest1 int, ptest2 inet,
                            PRIMARY KEY(ptest1, ptest2));
 -- This should fail, because we just chose really odd types
-CREATE TEMP TABLE FKTABLE (ftest1 cidr, ftest2 timestamp);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1, ftest2) references pktable;
-DROP TABLE FKTABLE;
+CREATE TEMP TABLE fktable (ftest1 cidr, ftest2 timestamp);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1, ftest2) references pktable;
+DROP TABLE fktable;
 -- Again, so should this...
-CREATE TEMP TABLE FKTABLE (ftest1 cidr, ftest2 timestamp);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1, ftest2)
+CREATE TEMP TABLE fktable (ftest1 cidr, ftest2 timestamp);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1, ftest2)
      references pktable(ptest1, ptest2);
-DROP TABLE FKTABLE;
+DROP TABLE fktable;
 -- This fails because we mixed up the column ordering
-CREATE TEMP TABLE FKTABLE (ftest1 int, ftest2 inet);
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest1, ftest2)
+CREATE TEMP TABLE fktable (ftest1 int, ftest2 inet);
+ALTER TABLE fktable ADD FOREIGN KEY(ftest1, ftest2)
      references pktable(ptest2, ptest1);
 -- As does this...
-ALTER TABLE FKTABLE ADD FOREIGN KEY(ftest2, ftest1)
+ALTER TABLE fktable ADD FOREIGN KEY(ftest2, ftest1)
      references pktable(ptest1, ptest2);
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 -- Test that ALTER CONSTRAINT updates trigger deferrability properly
 
-CREATE TEMP TABLE PKTABLE (ptest1 int primary key);
-CREATE TEMP TABLE FKTABLE (ftest1 int);
+CREATE TEMP TABLE pktable (ptest1 int primary key);
+CREATE TEMP TABLE fktable (ftest1 int);
 
-ALTER TABLE FKTABLE ADD CONSTRAINT fknd FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ADD CONSTRAINT fknd FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdd FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ADD CONSTRAINT fkdd FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdi FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ADD CONSTRAINT fkdi FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY IMMEDIATE;
 
-ALTER TABLE FKTABLE ADD CONSTRAINT fknd2 FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ADD CONSTRAINT fknd2 FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION DEFERRABLE INITIALLY DEFERRED;
-ALTER TABLE FKTABLE ALTER CONSTRAINT fknd2 NOT DEFERRABLE;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdd2 FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ALTER CONSTRAINT fknd2 NOT DEFERRABLE;
+ALTER TABLE fktable ADD CONSTRAINT fkdd2 FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE;
-ALTER TABLE FKTABLE ALTER CONSTRAINT fkdd2 DEFERRABLE INITIALLY DEFERRED;
-ALTER TABLE FKTABLE ADD CONSTRAINT fkdi2 FOREIGN KEY(ftest1) REFERENCES pktable
+ALTER TABLE fktable ALTER CONSTRAINT fkdd2 DEFERRABLE INITIALLY DEFERRED;
+ALTER TABLE fktable ADD CONSTRAINT fkdi2 FOREIGN KEY(ftest1) REFERENCES pktable
   ON DELETE CASCADE ON UPDATE NO ACTION NOT DEFERRABLE;
-ALTER TABLE FKTABLE ALTER CONSTRAINT fkdi2 DEFERRABLE INITIALLY IMMEDIATE;
+ALTER TABLE fktable ALTER CONSTRAINT fkdi2 DEFERRABLE INITIALLY IMMEDIATE;
 
 SELECT conname, tgfoid::regproc, tgtype, tgdeferrable, tginitdeferred
 FROM pg_trigger JOIN pg_constraint con ON con.oid = tgconstraint
@@ -980,7 +980,7 @@ create table dropColumnChild (c int) inherits (dropColumn);
 create table dropColumnAnother (d int) inherits (dropColumnChild);
 
 -- these two should fail
-alter table dropColumnchild drop column a;
+alter table dropColumnChild drop column a;
 alter table only dropColumnChild drop column b;
 
 
@@ -1087,9 +1087,9 @@ alter table gc1 drop column name;
 alter table p2 drop column height;
 
 -- IF EXISTS test
-create table dropColumnExists ();
-alter table dropColumnExists drop column non_existing; --fail
-alter table dropColumnExists drop column if exists non_existing; --succeed
+create table dropcolumnexists ();
+alter table dropcolumnexists drop column non_existing; --fail
+alter table dropcolumnexists drop column if exists non_existing; --succeed
 
 select relname, attname, attinhcount, attislocal
 from pg_class join pg_attribute on (pg_class.oid = pg_attribute.attrelid)
diff --git a/src/test/regress/sql/arrays.sql b/src/test/regress/sql/arrays.sql
index 9de7207..f161681 100644
--- a/src/test/regress/sql/arrays.sql
+++ b/src/test/regress/sql/arrays.sql
@@ -129,10 +129,10 @@ INSERT INTO arrtest_s VALUES(NULL, NULL);
 UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';  -- fail, no good with null
 
 -- check with fixed-length-array type, such as point
-SELECT f1[0:1] FROM POINT_TBL;
-SELECT f1[0:] FROM POINT_TBL;
-SELECT f1[:1] FROM POINT_TBL;
-SELECT f1[:] FROM POINT_TBL;
+SELECT f1[0:1] FROM point_tbl;
+SELECT f1[0:] FROM point_tbl;
+SELECT f1[:1] FROM point_tbl;
+SELECT f1[:] FROM point_tbl;
 
 --
 -- test array extension
diff --git a/src/test/regress/sql/bit.sql b/src/test/regress/sql/bit.sql
index 419d47c..6732391 100644
--- a/src/test/regress/sql/bit.sql
+++ b/src/test/regress/sql/bit.sql
@@ -6,52 +6,52 @@
 -- Build tables for testing
 --
 
-CREATE TABLE BIT_TABLE(b BIT(11));
+CREATE TABLE bit_table(b BIT(11));
 
-INSERT INTO BIT_TABLE VALUES (B'10'); -- too short
-INSERT INTO BIT_TABLE VALUES (B'00000000000');
-INSERT INTO BIT_TABLE VALUES (B'11011000000');
-INSERT INTO BIT_TABLE VALUES (B'01010101010');
-INSERT INTO BIT_TABLE VALUES (B'101011111010'); -- too long
---INSERT INTO BIT_TABLE VALUES ('X554');
---INSERT INTO BIT_TABLE VALUES ('X555');
+INSERT INTO bit_table VALUES (B'10'); -- too short
+INSERT INTO bit_table VALUES (B'00000000000');
+INSERT INTO bit_table VALUES (B'11011000000');
+INSERT INTO bit_table VALUES (B'01010101010');
+INSERT INTO bit_table VALUES (B'101011111010'); -- too long
+--INSERT INTO bit_table VALUES ('X554');
+--INSERT INTO bit_table VALUES ('X555');
 
-SELECT * FROM BIT_TABLE;
+SELECT * FROM bit_table;
 
-CREATE TABLE VARBIT_TABLE(v BIT VARYING(11));
+CREATE TABLE varbit_table(v BIT VARYING(11));
 
-INSERT INTO VARBIT_TABLE VALUES (B'');
-INSERT INTO VARBIT_TABLE VALUES (B'0');
-INSERT INTO VARBIT_TABLE VALUES (B'010101');
-INSERT INTO VARBIT_TABLE VALUES (B'01010101010');
-INSERT INTO VARBIT_TABLE VALUES (B'101011111010'); -- too long
---INSERT INTO VARBIT_TABLE VALUES ('X554');
---INSERT INTO VARBIT_TABLE VALUES ('X555');
-SELECT * FROM VARBIT_TABLE;
+INSERT INTO varbit_table VALUES (B'');
+INSERT INTO varbit_table VALUES (B'0');
+INSERT INTO varbit_table VALUES (B'010101');
+INSERT INTO varbit_table VALUES (B'01010101010');
+INSERT INTO varbit_table VALUES (B'101011111010'); -- too long
+--INSERT INTO varbit_table VALUES ('X554');
+--INSERT INTO varbit_table VALUES ('X555');
+SELECT * FROM varbit_table;
 
 
 -- Concatenation
 SELECT v, b, (v || b) AS concat
-       FROM BIT_TABLE, VARBIT_TABLE
+       FROM bit_table, varbit_table
        ORDER BY 3;
 
 -- Length
 SELECT b, length(b) AS lb
-       FROM BIT_TABLE;
+       FROM bit_table;
 SELECT v, length(v) AS lv
-       FROM VARBIT_TABLE;
+       FROM varbit_table;
 
 -- Substring
 SELECT b,
        SUBSTRING(b FROM 2 FOR 4) AS sub_2_4,
        SUBSTRING(b FROM 7 FOR 13) AS sub_7_13,
        SUBSTRING(b FROM 6) AS sub_6
-       FROM BIT_TABLE;
+       FROM bit_table;
 SELECT v,
        SUBSTRING(v FROM 2 FOR 4) AS sub_2_4,
        SUBSTRING(v FROM 7 FOR 13) AS sub_7_13,
        SUBSTRING(v FROM 6) AS sub_6
-       FROM VARBIT_TABLE;
+       FROM varbit_table;
 
 --- Bit operations
 DROP TABLE varbit_table;
diff --git a/src/test/regress/sql/case.sql b/src/test/regress/sql/case.sql
index a7ae7b4..fbcfacc 100644
--- a/src/test/regress/sql/case.sql
+++ b/src/test/regress/sql/case.sql
@@ -64,7 +64,7 @@ SELECT CASE 1 WHEN 0 THEN 1/0 WHEN 1 THEN 1 ELSE 2/0 END;
 
 -- However we do not currently suppress folding of potentially
 -- reachable subexpressions
-SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM case_tbl;
+SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM CASE_TBL;
 
 -- Test for cases involving untyped literals in test expression
 SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END;
@@ -124,7 +124,7 @@ SELECT *
   FROM CASE_TBL a, CASE2_TBL b
   WHERE COALESCE(a.f, b.i, b.j) = 2;
 
-SELECT '' AS Five, NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
+SELECT '' AS five, NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
   NULLIF(b.i, 4) AS "NULLIF(b.i,4)"
   FROM CASE_TBL a, CASE2_TBL b;
 
diff --git a/src/test/regress/sql/circle.sql b/src/test/regress/sql/circle.sql
index c0284b2..c356189 100644
--- a/src/test/regress/sql/circle.sql
+++ b/src/test/regress/sql/circle.sql
@@ -2,44 +2,44 @@
 -- CIRCLE
 --
 
-CREATE TABLE CIRCLE_TBL (f1 circle);
+CREATE TABLE circle_tbl (f1 circle);
 
-INSERT INTO CIRCLE_TBL VALUES ('<(5,1),3>');
+INSERT INTO circle_tbl VALUES ('<(5,1),3>');
 
-INSERT INTO CIRCLE_TBL VALUES ('<(1,2),100>');
+INSERT INTO circle_tbl VALUES ('<(1,2),100>');
 
-INSERT INTO CIRCLE_TBL VALUES ('1,3,5');
+INSERT INTO circle_tbl VALUES ('1,3,5');
 
-INSERT INTO CIRCLE_TBL VALUES ('((1,2),3)');
+INSERT INTO circle_tbl VALUES ('((1,2),3)');
 
-INSERT INTO CIRCLE_TBL VALUES ('<(100,200),10>');
+INSERT INTO circle_tbl VALUES ('<(100,200),10>');
 
-INSERT INTO CIRCLE_TBL VALUES ('<(100,1),115>');
+INSERT INTO circle_tbl VALUES ('<(100,1),115>');
 
 -- bad values
 
-INSERT INTO CIRCLE_TBL VALUES ('<(-100,0),-100>');
+INSERT INTO circle_tbl VALUES ('<(-100,0),-100>');
 
-INSERT INTO CIRCLE_TBL VALUES ('1abc,3,5');
+INSERT INTO circle_tbl VALUES ('1abc,3,5');
 
-INSERT INTO CIRCLE_TBL VALUES ('(3,(1,2),3)');
+INSERT INTO circle_tbl VALUES ('(3,(1,2),3)');
 
-SELECT * FROM CIRCLE_TBL;
+SELECT * FROM circle_tbl;
 
 SELECT '' AS six, center(f1) AS center
-  FROM CIRCLE_TBL;
+  FROM circle_tbl;
 
 SELECT '' AS six, radius(f1) AS radius
-  FROM CIRCLE_TBL;
+  FROM circle_tbl;
 
 SELECT '' AS six, diameter(f1) AS diameter
-  FROM CIRCLE_TBL;
+  FROM circle_tbl;
 
-SELECT '' AS two, f1 FROM CIRCLE_TBL WHERE radius(f1) < 5;
+SELECT '' AS two, f1 FROM circle_tbl WHERE radius(f1) < 5;
 
-SELECT '' AS four, f1 FROM CIRCLE_TBL WHERE diameter(f1) >= 10;
+SELECT '' AS four, f1 FROM circle_tbl WHERE diameter(f1) >= 10;
 
 SELECT '' as five, c1.f1 AS one, c2.f1 AS two, (c1.f1 <-> c2.f1) AS distance
-  FROM CIRCLE_TBL c1, CIRCLE_TBL c2
+  FROM circle_tbl c1, circle_tbl c2
   WHERE (c1.f1 < c2.f1) AND ((c1.f1 <-> c2.f1) > 0)
   ORDER BY distance, area(c1.f1), area(c2.f1);
diff --git a/src/test/regress/sql/create_index.sql b/src/test/regress/sql/create_index.sql
index 60780fb..4f91c20 100644
--- a/src/test/regress/sql/create_index.sql
+++ b/src/test/regress/sql/create_index.sql
@@ -80,7 +80,7 @@ CREATE INDEX gpolygonind ON polygon_tbl USING gist (f1);
 
 CREATE INDEX gcircleind ON circle_tbl USING gist (f1);
 
-INSERT INTO POINT_TBL(f1) VALUES (NULL);
+INSERT INTO point_tbl(f1) VALUES (NULL);
 
 CREATE INDEX gpointind ON point_tbl USING gist (f1);
 
diff --git a/src/test/regress/sql/create_operator.sql b/src/test/regress/sql/create_operator.sql
index 0e5d635..329e582 100644
--- a/src/test/regress/sql/create_operator.sql
+++ b/src/test/regress/sql/create_operator.sql
@@ -45,7 +45,7 @@ CREATE OPERATOR => (
 BEGIN TRANSACTION;
 CREATE ROLE regress_rol_op1;
 CREATE SCHEMA schema_op1;
-GRANT USAGE ON SCHEMA schema_op1 TO PUBLIC;
+GRANT USAGE ON SCHEMA schema_op1 TO public;
 REVOKE USAGE ON SCHEMA schema_op1 FROM regress_rol_op1;
 SET ROLE regress_rol_op1;
 CREATE OPERATOR schema_op1.#*# (
@@ -117,7 +117,7 @@ RETURNS int8 AS $$
     SELECT NULL::int8;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE USAGE ON TYPE type_op3 FROM regress_rol_op3;
-REVOKE USAGE ON TYPE type_op3 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
+REVOKE USAGE ON TYPE type_op3 FROM public;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via public
 SET ROLE regress_rol_op3;
 CREATE OPERATOR #*# (
    leftarg = type_op3,
@@ -135,7 +135,7 @@ RETURNS int8 AS $$
     SELECT NULL::int8;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE USAGE ON TYPE type_op4 FROM regress_rol_op4;
-REVOKE USAGE ON TYPE type_op4 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
+REVOKE USAGE ON TYPE type_op4 FROM public;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via public
 SET ROLE regress_rol_op4;
 CREATE OPERATOR #*# (
    leftarg = int8,
@@ -153,7 +153,7 @@ RETURNS int8 AS $$
     SELECT NULL::int8;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM regress_rol_op5;
-REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM PUBLIC;-- Need to do this so that regress_rol_op3 is not allowed EXECUTE via PUBLIC
+REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM public;-- Need to do this so that regress_rol_op3 is not allowed EXECUTE via public
 SET ROLE regress_rol_op5;
 CREATE OPERATOR #*# (
    leftarg = int8,
@@ -171,7 +171,7 @@ RETURNS type_op6 AS $$
     SELECT NULL::type_op6;
 $$ LANGUAGE sql IMMUTABLE;
 REVOKE USAGE ON TYPE type_op6 FROM regress_rol_op6;
-REVOKE USAGE ON TYPE type_op6 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
+REVOKE USAGE ON TYPE type_op6 FROM public;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via public
 SET ROLE regress_rol_op6;
 CREATE OPERATOR #*# (
    leftarg = int8,
diff --git a/src/test/regress/sql/create_view.sql b/src/test/regress/sql/create_view.sql
index 5fe8b94..509b648 100644
--- a/src/test/regress/sql/create_view.sql
+++ b/src/test/regress/sql/create_view.sql
@@ -180,7 +180,7 @@ BETWEEN (SELECT d FROM tbl2 WHERE c = 1) AND (SELECT e FROM tbl3 WHERE f = 2)
 AND EXISTS (SELECT g FROM tbl4 LEFT JOIN tbl3 ON tbl4.h = tbl3.f);
 
 SELECT count(*) FROM pg_class where relname = 'pubview'
-AND relnamespace IN (SELECT OID FROM pg_namespace WHERE nspname = 'testviewschm2');
+AND relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname = 'testviewschm2');
 
 --Should be in temp object schema
 CREATE   VIEW  mytempview AS SELECT * FROM tbl1 WHERE tbl1.a
@@ -189,7 +189,7 @@ AND EXISTS (SELECT g FROM tbl4 LEFT JOIN tbl3 ON tbl4.h = tbl3.f)
 AND NOT EXISTS (SELECT g FROM tbl4 LEFT JOIN tmptbl ON tbl4.h = tmptbl.j);
 
 SELECT count(*) FROM pg_class where relname LIKE 'mytempview'
-And relnamespace IN (SELECT OID FROM pg_namespace WHERE nspname LIKE 'pg_temp%');
+And relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname LIKE 'pg_temp%');
 
 --
 -- CREATE VIEW and WITH(...) clause
diff --git a/src/test/regress/sql/date.sql b/src/test/regress/sql/date.sql
index 4553fd1..c44fb04 100644
--- a/src/test/regress/sql/date.sql
+++ b/src/test/regress/sql/date.sql
@@ -235,7 +235,7 @@ SELECT EXTRACT(CENTURY FROM DATE '1900-12-31');    -- 19
 SELECT EXTRACT(CENTURY FROM DATE '1901-01-01');    -- 20
 SELECT EXTRACT(CENTURY FROM DATE '2000-12-31');    -- 20
 SELECT EXTRACT(CENTURY FROM DATE '2001-01-01');    -- 21
-SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS True;     -- true
+SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS true;     -- true
 --
 -- millennium
 --
@@ -261,7 +261,7 @@ SELECT EXTRACT(DECADE FROM DATE '0012-12-31 BC'); --  -2
 -- some other types:
 --
 -- on a timestamp.
-SELECT EXTRACT(CENTURY FROM NOW())>=21 AS True;       -- true
+SELECT EXTRACT(CENTURY FROM NOW())>=21 AS true;       -- true
 SELECT EXTRACT(CENTURY FROM TIMESTAMP '1970-03-20 04:30:00.00000'); -- 20
 -- on an interval
 SELECT EXTRACT(CENTURY FROM INTERVAL '100 y');  -- 1
diff --git a/src/test/regress/sql/float8.sql b/src/test/regress/sql/float8.sql
index 215e7a4..c411227 100644
--- a/src/test/regress/sql/float8.sql
+++ b/src/test/regress/sql/float8.sql
@@ -2,13 +2,13 @@
 -- FLOAT8
 --
 
-CREATE TABLE FLOAT8_TBL(f1 float8);
+CREATE TABLE float8_tbl(f1 float8);
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('1004.30  ');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e+200');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e-200');
+INSERT INTO float8_tbl(f1) VALUES ('    0.0   ');
+INSERT INTO float8_tbl(f1) VALUES ('1004.30  ');
+INSERT INTO float8_tbl(f1) VALUES ('   -34.84');
+INSERT INTO float8_tbl(f1) VALUES ('1.2345678901234e+200');
+INSERT INTO float8_tbl(f1) VALUES ('1.2345678901234e-200');
 
 -- test for underflow and overflow handling
 SELECT '10e400'::float8;
@@ -17,14 +17,14 @@ SELECT '10e-400'::float8;
 SELECT '-10e-400'::float8;
 
 -- bad input
-INSERT INTO FLOAT8_TBL(f1) VALUES ('');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
-INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
+INSERT INTO float8_tbl(f1) VALUES ('');
+INSERT INTO float8_tbl(f1) VALUES ('     ');
+INSERT INTO float8_tbl(f1) VALUES ('xyz');
+INSERT INTO float8_tbl(f1) VALUES ('5.0.0');
+INSERT INTO float8_tbl(f1) VALUES ('5 . 0');
+INSERT INTO float8_tbl(f1) VALUES ('5.   0');
+INSERT INTO float8_tbl(f1) VALUES ('    - 3');
+INSERT INTO float8_tbl(f1) VALUES ('123           5');
 
 -- special inputs
 SELECT 'NaN'::float8;
@@ -42,50 +42,50 @@ SELECT 'Infinity'::float8 / 'Infinity'::float8;
 SELECT 'nan'::float8 / 'nan'::float8;
 SELECT 'nan'::numeric::float8;
 
-SELECT '' AS five, * FROM FLOAT8_TBL;
+SELECT '' AS five, * FROM float8_tbl;
 
-SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3';
+SELECT '' AS four, f.* FROM float8_tbl f WHERE f.f1 <> '1004.3';
 
-SELECT '' AS one, f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3';
+SELECT '' AS one, f.* FROM float8_tbl f WHERE f.f1 = '1004.3';
 
-SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1;
+SELECT '' AS three, f.* FROM float8_tbl f WHERE '1004.3' > f.f1;
 
-SELECT '' AS three, f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3';
+SELECT '' AS three, f.* FROM float8_tbl f WHERE  f.f1 < '1004.3';
 
-SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1;
+SELECT '' AS four, f.* FROM float8_tbl f WHERE '1004.3' >= f.f1;
 
-SELECT '' AS four, f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3';
+SELECT '' AS four, f.* FROM float8_tbl f WHERE  f.f1 <= '1004.3';
 
 SELECT '' AS three, f.f1, f.f1 * '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
 
 SELECT '' AS three, f.f1, f.f1 + '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
 
 SELECT '' AS three, f.f1, f.f1 / '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
 
 SELECT '' AS three, f.f1, f.f1 - '-10' AS x
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
 
 SELECT '' AS one, f.f1 ^ '2.0' AS square_f1
-   FROM FLOAT8_TBL f where f.f1 = '1004.3';
+   FROM float8_tbl f where f.f1 = '1004.3';
 
 -- absolute value
 SELECT '' AS five, f.f1, @f.f1 AS abs_f1
-   FROM FLOAT8_TBL f;
+   FROM float8_tbl f;
 
 -- truncate
 SELECT '' AS five, f.f1, trunc(f.f1) AS trunc_f1
-   FROM FLOAT8_TBL f;
+   FROM float8_tbl f;
 
 -- round
 SELECT '' AS five, f.f1, round(f.f1) AS round_f1
-   FROM FLOAT8_TBL f;
+   FROM float8_tbl f;
 
 -- ceil / ceiling
 select ceil(f1) as ceil_f1 from float8_tbl f;
@@ -103,7 +103,7 @@ SELECT sqrt(float8 '64') AS eight;
 SELECT |/ float8 '64' AS eight;
 
 SELECT '' AS three, f.f1, |/f.f1 AS sqrt_f1
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
 
 -- power
@@ -111,62 +111,62 @@ SELECT power(float8 '144', float8 '0.5');
 
 -- take exp of ln(f.f1)
 SELECT '' AS three, f.f1, exp(ln(f.f1)) AS exp_ln_f1
-   FROM FLOAT8_TBL f
+   FROM float8_tbl f
    WHERE f.f1 > '0.0';
 
 -- cube root
 SELECT ||/ float8 '27' AS three;
 
-SELECT '' AS five, f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f;
+SELECT '' AS five, f.f1, ||/f.f1 AS cbrt_f1 FROM float8_tbl f;
 
 
-SELECT '' AS five, * FROM FLOAT8_TBL;
+SELECT '' AS five, * FROM float8_tbl;
 
-UPDATE FLOAT8_TBL
-   SET f1 = FLOAT8_TBL.f1 * '-1'
-   WHERE FLOAT8_TBL.f1 > '0.0';
+UPDATE float8_tbl
+   SET f1 = float8_tbl.f1 * '-1'
+   WHERE float8_tbl.f1 > '0.0';
 
-SELECT '' AS bad, f.f1 * '1e200' from FLOAT8_TBL f;
+SELECT '' AS bad, f.f1 * '1e200' from float8_tbl f;
 
-SELECT '' AS bad, f.f1 ^ '1e200' from FLOAT8_TBL f;
+SELECT '' AS bad, f.f1 ^ '1e200' from float8_tbl f;
 
 SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;
 
-SELECT '' AS bad, ln(f.f1) from FLOAT8_TBL f where f.f1 = '0.0' ;
+SELECT '' AS bad, ln(f.f1) from float8_tbl f where f.f1 = '0.0' ;
 
-SELECT '' AS bad, ln(f.f1) from FLOAT8_TBL f where f.f1 < '0.0' ;
+SELECT '' AS bad, ln(f.f1) from float8_tbl f where f.f1 < '0.0' ;
 
-SELECT '' AS bad, exp(f.f1) from FLOAT8_TBL f;
+SELECT '' AS bad, exp(f.f1) from float8_tbl f;
 
-SELECT '' AS bad, f.f1 / '0.0' from FLOAT8_TBL f;
+SELECT '' AS bad, f.f1 / '0.0' from float8_tbl f;
 
-SELECT '' AS five, * FROM FLOAT8_TBL;
+SELECT '' AS five, * FROM float8_tbl;
 
 -- test for over- and underflow
-INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
+INSERT INTO float8_tbl(f1) VALUES ('10e400');
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
+INSERT INTO float8_tbl(f1) VALUES ('-10e400');
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
+INSERT INTO float8_tbl(f1) VALUES ('10e-400');
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
+INSERT INTO float8_tbl(f1) VALUES ('-10e-400');
 
 -- maintain external table consistency across platforms
 -- delete all values and reinsert well-behaved ones
 
-DELETE FROM FLOAT8_TBL;
+DELETE FROM float8_tbl;
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('0.0');
+INSERT INTO float8_tbl(f1) VALUES ('0.0');
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-34.84');
+INSERT INTO float8_tbl(f1) VALUES ('-34.84');
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-1004.30');
+INSERT INTO float8_tbl(f1) VALUES ('-1004.30');
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e+200');
+INSERT INTO float8_tbl(f1) VALUES ('-1.2345678901234e+200');
 
-INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e-200');
+INSERT INTO float8_tbl(f1) VALUES ('-1.2345678901234e-200');
 
-SELECT '' AS five, * FROM FLOAT8_TBL;
+SELECT '' AS five, * FROM float8_tbl;
 
 -- test exact cases for trigonometric functions in degrees
 SET extra_float_digits = 3;
diff --git a/src/test/regress/sql/foreign_key.sql b/src/test/regress/sql/foreign_key.sql
index 5f19dad..7a8d553 100644
--- a/src/test/regress/sql/foreign_key.sql
+++ b/src/test/regress/sql/foreign_key.sql
@@ -6,514 +6,514 @@
 --
 -- First test, check and cascade
 --
-CREATE TABLE PKTABLE ( ptest1 int PRIMARY KEY, ptest2 text );
-CREATE TABLE FKTABLE ( ftest1 int REFERENCES PKTABLE MATCH FULL ON DELETE CASCADE ON UPDATE CASCADE, ftest2 int );
+CREATE TABLE pktable ( ptest1 int PRIMARY KEY, ptest2 text );
+CREATE TABLE fktable ( ftest1 int REFERENCES pktable MATCH FULL ON DELETE CASCADE ON UPDATE CASCADE, ftest2 int );
 
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 'Test1');
-INSERT INTO PKTABLE VALUES (2, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 'Test5');
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 'Test1');
+INSERT INTO pktable VALUES (2, 'Test2');
+INSERT INTO pktable VALUES (3, 'Test3');
+INSERT INTO pktable VALUES (4, 'Test4');
+INSERT INTO pktable VALUES (5, 'Test5');
 
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2);
-INSERT INTO FKTABLE VALUES (2, 3);
-INSERT INTO FKTABLE VALUES (3, 4);
-INSERT INTO FKTABLE VALUES (NULL, 1);
+INSERT INTO fktable VALUES (1, 2);
+INSERT INTO fktable VALUES (2, 3);
+INSERT INTO fktable VALUES (3, 4);
+INSERT INTO fktable VALUES (NULL, 1);
 
 -- Insert a failed row into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2);
+INSERT INTO fktable VALUES (100, 2);
 
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
 
 -- Delete a row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=1;
+DELETE FROM pktable WHERE ptest1=1;
 
--- Check FKTABLE for removal of matched row
-SELECT * FROM FKTABLE;
+-- Check fktable for removal of matched row
+SELECT * FROM fktable;
 
 -- Update a row from PK TABLE
-UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
+UPDATE pktable SET ptest1=1 WHERE ptest1=2;
 
--- Check FKTABLE for update of matched row
-SELECT * FROM FKTABLE;
+-- Check fktable for update of matched row
+SELECT * FROM fktable;
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 --
 -- check set NULL and table constraint on multiple columns
 --
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
-CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, CONSTRAINT constrname FOREIGN KEY(ftest1, ftest2)
-                       REFERENCES PKTABLE MATCH FULL ON DELETE SET NULL ON UPDATE SET NULL);
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
+CREATE TABLE fktable ( ftest1 int, ftest2 int, ftest3 int, CONSTRAINT constrname FOREIGN KEY(ftest1, ftest2)
+                       REFERENCES pktable MATCH FULL ON DELETE SET NULL ON UPDATE SET NULL);
 
 -- Test comments
-COMMENT ON CONSTRAINT constrname_wrong ON FKTABLE IS 'fk constraint comment';
-COMMENT ON CONSTRAINT constrname ON FKTABLE IS 'fk constraint comment';
-COMMENT ON CONSTRAINT constrname ON FKTABLE IS NULL;
-
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 2, 'Test1');
-INSERT INTO PKTABLE VALUES (1, 3, 'Test1-2');
-INSERT INTO PKTABLE VALUES (2, 4, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 6, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 8, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 10, 'Test5');
+COMMENT ON CONSTRAINT constrname_wrong ON fktable IS 'fk constraint comment';
+COMMENT ON CONSTRAINT constrname ON fktable IS 'fk constraint comment';
+COMMENT ON CONSTRAINT constrname ON fktable IS NULL;
+
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 2, 'Test1');
+INSERT INTO pktable VALUES (1, 3, 'Test1-2');
+INSERT INTO pktable VALUES (2, 4, 'Test2');
+INSERT INTO pktable VALUES (3, 6, 'Test3');
+INSERT INTO pktable VALUES (4, 8, 'Test4');
+INSERT INTO pktable VALUES (5, 10, 'Test5');
 
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2, 4);
-INSERT INTO FKTABLE VALUES (1, 3, 5);
-INSERT INTO FKTABLE VALUES (2, 4, 8);
-INSERT INTO FKTABLE VALUES (3, 6, 12);
-INSERT INTO FKTABLE VALUES (NULL, NULL, 0);
+INSERT INTO fktable VALUES (1, 2, 4);
+INSERT INTO fktable VALUES (1, 3, 5);
+INSERT INTO fktable VALUES (2, 4, 8);
+INSERT INTO fktable VALUES (3, 6, 12);
+INSERT INTO fktable VALUES (NULL, NULL, 0);
 
 -- Insert failed rows into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2, 4);
-INSERT INTO FKTABLE VALUES (2, 2, 4);
-INSERT INTO FKTABLE VALUES (NULL, 2, 4);
-INSERT INTO FKTABLE VALUES (1, NULL, 4);
+INSERT INTO fktable VALUES (100, 2, 4);
+INSERT INTO fktable VALUES (2, 2, 4);
+INSERT INTO fktable VALUES (NULL, 2, 4);
+INSERT INTO fktable VALUES (1, NULL, 4);
 
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
 
 -- Delete a row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2;
+DELETE FROM pktable WHERE ptest1=1 and ptest2=2;
 
--- Check FKTABLE for removal of matched row
-SELECT * FROM FKTABLE;
+-- Check fktable for removal of matched row
+SELECT * FROM fktable;
 
 -- Delete another row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10;
+DELETE FROM pktable WHERE ptest1=5 and ptest2=10;
 
--- Check FKTABLE (should be no change)
-SELECT * FROM FKTABLE;
+-- Check fktable (should be no change)
+SELECT * FROM fktable;
 
 -- Update a row from PK TABLE
-UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
+UPDATE pktable SET ptest1=1 WHERE ptest1=2;
 
--- Check FKTABLE for update of matched row
-SELECT * FROM FKTABLE;
+-- Check fktable for update of matched row
+SELECT * FROM fktable;
 
 -- Try altering the column type where foreign keys are involved
-ALTER TABLE PKTABLE ALTER COLUMN ptest1 TYPE bigint;
-ALTER TABLE FKTABLE ALTER COLUMN ftest1 TYPE bigint;
-SELECT * FROM PKTABLE;
-SELECT * FROM FKTABLE;
+ALTER TABLE pktable ALTER COLUMN ptest1 TYPE bigint;
+ALTER TABLE fktable ALTER COLUMN ftest1 TYPE bigint;
+SELECT * FROM pktable;
+SELECT * FROM fktable;
 
-DROP TABLE PKTABLE CASCADE;
-DROP TABLE FKTABLE;
+DROP TABLE pktable CASCADE;
+DROP TABLE fktable;
 
 --
 -- check set default and table constraint on multiple columns
 --
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
-CREATE TABLE FKTABLE ( ftest1 int DEFAULT -1, ftest2 int DEFAULT -2, ftest3 int, CONSTRAINT constrname2 FOREIGN KEY(ftest1, ftest2)
-                       REFERENCES PKTABLE MATCH FULL ON DELETE SET DEFAULT ON UPDATE SET DEFAULT);
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
+CREATE TABLE fktable ( ftest1 int DEFAULT -1, ftest2 int DEFAULT -2, ftest3 int, CONSTRAINT constrname2 FOREIGN KEY(ftest1, ftest2)
+                       REFERENCES pktable MATCH FULL ON DELETE SET DEFAULT ON UPDATE SET DEFAULT);
 
--- Insert a value in PKTABLE for default
-INSERT INTO PKTABLE VALUES (-1, -2, 'The Default!');
+-- Insert a value in pktable for default
+INSERT INTO pktable VALUES (-1, -2, 'The Default!');
 
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 2, 'Test1');
-INSERT INTO PKTABLE VALUES (1, 3, 'Test1-2');
-INSERT INTO PKTABLE VALUES (2, 4, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 6, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 8, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 10, 'Test5');
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 2, 'Test1');
+INSERT INTO pktable VALUES (1, 3, 'Test1-2');
+INSERT INTO pktable VALUES (2, 4, 'Test2');
+INSERT INTO pktable VALUES (3, 6, 'Test3');
+INSERT INTO pktable VALUES (4, 8, 'Test4');
+INSERT INTO pktable VALUES (5, 10, 'Test5');
 
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2, 4);
-INSERT INTO FKTABLE VALUES (1, 3, 5);
-INSERT INTO FKTABLE VALUES (2, 4, 8);
-INSERT INTO FKTABLE VALUES (3, 6, 12);
-INSERT INTO FKTABLE VALUES (NULL, NULL, 0);
+INSERT INTO fktable VALUES (1, 2, 4);
+INSERT INTO fktable VALUES (1, 3, 5);
+INSERT INTO fktable VALUES (2, 4, 8);
+INSERT INTO fktable VALUES (3, 6, 12);
+INSERT INTO fktable VALUES (NULL, NULL, 0);
 
 -- Insert failed rows into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2, 4);
-INSERT INTO FKTABLE VALUES (2, 2, 4);
-INSERT INTO FKTABLE VALUES (NULL, 2, 4);
-INSERT INTO FKTABLE VALUES (1, NULL, 4);
+INSERT INTO fktable VALUES (100, 2, 4);
+INSERT INTO fktable VALUES (2, 2, 4);
+INSERT INTO fktable VALUES (NULL, 2, 4);
+INSERT INTO fktable VALUES (1, NULL, 4);
 
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
 
 -- Delete a row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2;
+DELETE FROM pktable WHERE ptest1=1 and ptest2=2;
 
--- Check FKTABLE to check for removal
-SELECT * FROM FKTABLE;
+-- Check fktable to check for removal
+SELECT * FROM fktable;
 
 -- Delete another row from PK TABLE
-DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10;
+DELETE FROM pktable WHERE ptest1=5 and ptest2=10;
 
--- Check FKTABLE (should be no change)
-SELECT * FROM FKTABLE;
+-- Check fktable (should be no change)
+SELECT * FROM fktable;
 
 -- Update a row from PK TABLE
-UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
+UPDATE pktable SET ptest1=1 WHERE ptest1=2;
 
--- Check FKTABLE for update of matched row
-SELECT * FROM FKTABLE;
+-- Check fktable for update of matched row
+SELECT * FROM fktable;
 
 -- this should fail for lack of CASCADE
-DROP TABLE PKTABLE;
-DROP TABLE PKTABLE CASCADE;
-DROP TABLE FKTABLE;
+DROP TABLE pktable;
+DROP TABLE pktable CASCADE;
+DROP TABLE fktable;
 
 
 --
 -- First test, check with no on delete or on update
 --
-CREATE TABLE PKTABLE ( ptest1 int PRIMARY KEY, ptest2 text );
-CREATE TABLE FKTABLE ( ftest1 int REFERENCES PKTABLE MATCH FULL, ftest2 int );
+CREATE TABLE pktable ( ptest1 int PRIMARY KEY, ptest2 text );
+CREATE TABLE fktable ( ftest1 int REFERENCES pktable MATCH FULL, ftest2 int );
 
--- Insert test data into PKTABLE
-INSERT INTO PKTABLE VALUES (1, 'Test1');
-INSERT INTO PKTABLE VALUES (2, 'Test2');
-INSERT INTO PKTABLE VALUES (3, 'Test3');
-INSERT INTO PKTABLE VALUES (4, 'Test4');
-INSERT INTO PKTABLE VALUES (5, 'Test5');
+-- Insert test data into pktable
+INSERT INTO pktable VALUES (1, 'Test1');
+INSERT INTO pktable VALUES (2, 'Test2');
+INSERT INTO pktable VALUES (3, 'Test3');
+INSERT INTO pktable VALUES (4, 'Test4');
+INSERT INTO pktable VALUES (5, 'Test5');
 
 -- Insert successful rows into FK TABLE
-INSERT INTO FKTABLE VALUES (1, 2);
-INSERT INTO FKTABLE VALUES (2, 3);
-INSERT INTO FKTABLE VALUES (3, 4);
-INSERT INTO FKTABLE VALUES (NULL, 1);
+INSERT INTO fktable VALUES (1, 2);
+INSERT INTO fktable VALUES (2, 3);
+INSERT INTO fktable VALUES (3, 4);
+INSERT INTO fktable VALUES (NULL, 1);
 
 -- Insert a failed row into FK TABLE
-INSERT INTO FKTABLE VALUES (100, 2);
+INSERT INTO fktable VALUES (100, 2);
 
--- Check FKTABLE
-SELECT * FROM FKTABLE;
+-- Check fktable
+SELECT * FROM fktable;
 
--- Check PKTABLE
-SELECT * FROM PKTABLE;
+-- Check pktable
+SELECT * FROM pktable;
 
 -- Delete a row from PK TABLE (should fail)
-DELETE FROM PKTABLE WHERE ptest1=1;
+DELETE FROM pktable WHERE ptest1=1;
 
 -- Delete a row from PK TABLE (should succeed)
-DELETE FROM PKTABLE WHERE ptest1=5;
+DELETE FROM pktable WHERE ptest1=5;
 
--- Check PKTABLE for deletes
-SELECT * FROM PKTABLE;
+-- Check pktable for deletes
+SELECT * FROM pktable;
 
 -- Update a row from PK TABLE (should fail)
-UPDATE PKTABLE SET ptest1=0 WHERE ptest1=2;
+UPDATE pktable SET ptest1=0 WHERE ptest1=2;
 
 -- Update a row from PK TABLE (should succeed)
-UPDATE PKTABLE SET ptest1=0 WHERE ptest1=4;
+UPDATE pktable SET ptest1=0 WHERE ptest1=4;
 
--- Check PKTABLE for updates
-SELECT * FROM PKTABLE;
+-- Check pktable for updates
+SELECT * FROM pktable;
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 
 -- MATCH SIMPLE
 
 -- Base test restricting update/delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE);
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable);
 
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
 
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
 
 -- Try to update something that should fail
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 
 -- Try to update something that should succeed
-UPDATE PKTABLE set ptest1=1 WHERE ptest2=3;
+UPDATE pktable set ptest1=1 WHERE ptest2=3;
 
 -- Try to delete something that should fail
-DELETE FROM PKTABLE where ptest1=1 and ptest2=2 and ptest3=3;
+DELETE FROM pktable where ptest1=1 and ptest2=2 and ptest3=3;
 
 -- Try to delete something that should work
-DELETE FROM PKTABLE where ptest1=2;
+DELETE FROM pktable where ptest1=2;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
 
-SELECT * from FKTABLE;
+SELECT * from fktable;
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 -- cascade update/delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable
 			ON DELETE CASCADE ON UPDATE CASCADE);
 
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
 
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
 
 -- Try to update something that will cascade
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 
 -- Try to update something that should not cascade
-UPDATE PKTABLE set ptest1=1 WHERE ptest2=3;
+UPDATE pktable set ptest1=1 WHERE ptest2=3;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
 -- Try to delete something that should cascade
-DELETE FROM PKTABLE where ptest1=1 and ptest2=5 and ptest3=3;
+DELETE FROM pktable where ptest1=1 and ptest2=5 and ptest3=3;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
 -- Try to delete something that should not have a cascade
-DELETE FROM PKTABLE where ptest1=2;
+DELETE FROM pktable where ptest1=2;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 -- set null update / set default delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int DEFAULT 0, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int DEFAULT 0, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable
 			ON DELETE SET DEFAULT ON UPDATE SET NULL);
 
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
 
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (2, 3, 4, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (2, 3, 4, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
 
 -- Try to update something that will set null
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 
 -- Try to update something that should not set null
-UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1;
+UPDATE pktable set ptest2=2 WHERE ptest2=3 and ptest1=1;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
 -- Try to delete something that should set default
-DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4;
+DELETE FROM pktable where ptest1=2 and ptest2=3 and ptest3=4;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
 -- Try to delete something that should not set default
-DELETE FROM PKTABLE where ptest2=5;
+DELETE FROM pktable where ptest2=5;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 -- set default update / set null delete
-CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
-CREATE TABLE FKTABLE ( ftest1 int DEFAULT 0, ftest2 int DEFAULT -1, ftest3 int DEFAULT -2, ftest4 int, CONSTRAINT constrname3
-			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
+CREATE TABLE pktable ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
+CREATE TABLE fktable ( ftest1 int DEFAULT 0, ftest2 int DEFAULT -1, ftest3 int DEFAULT -2, ftest4 int, CONSTRAINT constrname3
+			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES pktable
 			ON DELETE SET NULL ON UPDATE SET DEFAULT);
 
 -- Insert Primary Key values
-INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
-INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
-INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
-INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
-INSERT INTO PKTABLE VALUES (2, -1, 5, 'test5');
+INSERT INTO pktable VALUES (1, 2, 3, 'test1');
+INSERT INTO pktable VALUES (1, 3, 3, 'test2');
+INSERT INTO pktable VALUES (2, 3, 4, 'test3');
+INSERT INTO pktable VALUES (2, 4, 5, 'test4');
+INSERT INTO pktable VALUES (2, -1, 5, 'test5');
 
 -- Insert Foreign Key values
-INSERT INTO FKTABLE VALUES (1, 2, 3, 1);
-INSERT INTO FKTABLE VALUES (2, 3, 4, 1);
-INSERT INTO FKTABLE VALUES (2, 4, 5, 1);
-INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
-INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
-INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
-INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
+INSERT INTO fktable VALUES (1, 2, 3, 1);
+INSERT INTO fktable VALUES (2, 3, 4, 1);
+INSERT INTO fktable VALUES (2, 4, 5, 1);
+INSERT INTO fktable VALUES (NULL, 2, 3, 2);
+INSERT INTO fktable VALUES (2, NULL, 3, 3);
+INSERT INTO fktable VALUES (NULL, 2, 7, 4);
+INSERT INTO fktable VALUES (NULL, 3, 4, 5);
 
 -- Insert a failed values
-INSERT INTO FKTABLE VALUES (1, 2, 7, 6);
+INSERT INTO fktable VALUES (1, 2, 7, 6);
 
--- Show FKTABLE
-SELECT * from FKTABLE;
+-- Show fktable
+SELECT * from fktable;
 
 -- Try to update something that will fail
-UPDATE PKTABLE set ptest2=5 where ptest2=2;
+UPDATE pktable set ptest2=5 where ptest2=2;
 
 -- Try to update something that will set default
-UPDATE PKTABLE set ptest1=0, ptest2=-1, ptest3=-2 where ptest2=2;
-UPDATE PKTABLE set ptest2=10 where ptest2=4;
+UPDATE pktable set ptest1=0, ptest2=-1, ptest3=-2 where ptest2=2;
+UPDATE pktable set ptest2=10 where ptest2=4;
 
 -- Try to update something that should not set default
-UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1;
+UPDATE pktable set ptest2=2 WHERE ptest2=3 and ptest1=1;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
 -- Try to delete something that should set null
-DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4;
+DELETE FROM pktable where ptest1=2 and ptest2=3 and ptest3=4;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
 -- Try to delete something that should not set null
-DELETE FROM PKTABLE where ptest2=-1 and ptest3=5;
+DELETE FROM pktable where ptest2=-1 and ptest3=5;
 
--- Show PKTABLE and FKTABLE
-SELECT * from PKTABLE;
-SELECT * from FKTABLE;
+-- Show pktable and fktable
+SELECT * from pktable;
+SELECT * from fktable;
 
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+DROP TABLE fktable;
+DROP TABLE pktable;
 
-CREATE TABLE PKTABLE (ptest1 int PRIMARY KEY);
-CREATE TABLE FKTABLE_FAIL1 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest2) REFERENCES PKTABLE);
-CREATE TABLE FKTABLE_FAIL2 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest1) REFERENCES PKTABLE(ptest2));
+CREATE TABLE pktable (ptest1 int PRIMARY KEY);
+CREATE TABLE fktable_fail1 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest2) REFERENCES pktable);
+CREATE TABLE fktable_fail2 ( ftest1 int, CONSTRAINT fkfail1 FOREIGN KEY (ftest1) REFERENCES pktable(ptest2));
 
-DROP TABLE FKTABLE_FAIL1;
-DROP TABLE FKTABLE_FAIL2;
-DROP TABLE PKTABLE;
+DROP TABLE fktable_fail1;
+DROP TABLE fktable_fail2;
+DROP TABLE pktable;
 
 -- Test for referencing column number smaller than referenced constraint
-CREATE TABLE PKTABLE (ptest1 int, ptest2 int, UNIQUE(ptest1, ptest2));
-CREATE TABLE FKTABLE_FAIL1 (ftest1 int REFERENCES pktable(ptest1));
+CREATE TABLE pktable (ptest1 int, ptest2 int, UNIQUE(ptest1, ptest2));
+CREATE TABLE fktable_fail1 (ftest1 int REFERENCES pktable(ptest1));
 
-DROP TABLE FKTABLE_FAIL1;
-DROP TABLE PKTABLE;
+DROP TABLE fktable_fail1;
+DROP TABLE pktable;
 
 --
 -- Tests for mismatched types
 --
 -- Basic one column, two table setup
-CREATE TABLE PKTABLE (ptest1 int PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
+CREATE TABLE pktable (ptest1 int PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
 -- This next should fail, because int=inet does not exist
-CREATE TABLE FKTABLE (ftest1 inet REFERENCES pktable);
+CREATE TABLE fktable (ftest1 inet REFERENCES pktable);
 -- This should also fail for the same reason, but here we
 -- give the column name
-CREATE TABLE FKTABLE (ftest1 inet REFERENCES pktable(ptest1));
+CREATE TABLE fktable (ftest1 inet REFERENCES pktable(ptest1));
 -- This should succeed, even though they are different types,
 -- because int=int8 exists and is a member of the integer opfamily
-CREATE TABLE FKTABLE (ftest1 int8 REFERENCES pktable);
+CREATE TABLE fktable (ftest1 int8 REFERENCES pktable);
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
-UPDATE FKTABLE SET ftest1 = ftest1;	-- should succeed
-UPDATE FKTABLE SET ftest1 = ftest1 + 1;	-- should fail
-DROP TABLE FKTABLE;
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
+UPDATE fktable SET ftest1 = ftest1;	-- should succeed
+UPDATE fktable SET ftest1 = ftest1 + 1;	-- should fail
+DROP TABLE fktable;
 -- This should fail, because we'd have to cast numeric to int which is
 -- not an implicit coercion (or use numeric=numeric, but that's not part
 -- of the integer opfamily)
-CREATE TABLE FKTABLE (ftest1 numeric REFERENCES pktable);
-DROP TABLE PKTABLE;
+CREATE TABLE fktable (ftest1 numeric REFERENCES pktable);
+DROP TABLE pktable;
 -- On the other hand, this should work because int implicitly promotes to
 -- numeric, and we allow promotion on the FK side
-CREATE TABLE PKTABLE (ptest1 numeric PRIMARY KEY);
-INSERT INTO PKTABLE VALUES(42);
-CREATE TABLE FKTABLE (ftest1 int REFERENCES pktable);
+CREATE TABLE pktable (ptest1 numeric PRIMARY KEY);
+INSERT INTO pktable VALUES(42);
+CREATE TABLE fktable (ftest1 int REFERENCES pktable);
 -- Check it actually works
-INSERT INTO FKTABLE VALUES(42);		-- should succeed
-INSERT INTO FKTABLE VALUES(43);		-- should fail
-UPDATE FKTABLE SET ftest1 = ftest1;	-- should succeed
-UPDATE FKTABLE SET ftest1 = ftest1 + 1;	-- should fail
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+INSERT INTO fktable VALUES(42);		-- should succeed
+INSERT INTO fktable VALUES(43);		-- should fail
+UPDATE fktable SET ftest1 = ftest1;	-- should succeed
+UPDATE fktable SET ftest1 = ftest1 + 1;	-- should fail
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 -- Two columns, two tables
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, PRIMARY KEY(ptest1, ptest2));
+CREATE TABLE pktable (ptest1 int, ptest2 inet, PRIMARY KEY(ptest1, ptest2));
 -- This should fail, because we just chose really odd types
-CREATE TABLE FKTABLE (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable);
+CREATE TABLE fktable (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable);
 -- Again, so should this...
-CREATE TABLE FKTABLE (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
+CREATE TABLE fktable (ftest1 cidr, ftest2 timestamp, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
 -- This fails because we mixed up the column ordering
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable);
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable);
 -- As does this...
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest1, ptest2));
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest1, ptest2));
 -- And again..
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest2, ptest1));
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest2, ptest1));
 -- This works...
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest2, ptest1));
-DROP TABLE FKTABLE;
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest2, ptest1));
+DROP TABLE fktable;
 -- As does this
-CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
-DROP TABLE FKTABLE;
-DROP TABLE PKTABLE;
+CREATE TABLE fktable (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
+DROP TABLE fktable;
+DROP TABLE pktable;
 
 -- Two columns, same table
 -- Make sure this still works...
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
 ptest4) REFERENCES pktable(ptest1, ptest2));
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 -- And this,
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
 ptest4) REFERENCES pktable);
-DROP TABLE PKTABLE;
+DROP TABLE pktable;
 -- This shouldn't (mixed up columns)
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
 ptest4) REFERENCES pktable(ptest2, ptest1));
 -- Nor should this... (same reason, we have 4,3 referencing 1,2 which mismatches types
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
 ptest3) REFERENCES pktable(ptest1, ptest2));
 -- Not this one either... Same as the last one except we didn't defined the columns being referenced.
-CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
+CREATE TABLE pktable (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest4,
 ptest3) REFERENCES pktable);
 
 --
diff --git a/src/test/regress/sql/geometry.sql b/src/test/regress/sql/geometry.sql
index 1429ee7..0bf0a4b 100644
--- a/src/test/regress/sql/geometry.sql
+++ b/src/test/regress/sql/geometry.sql
@@ -17,33 +17,33 @@ SELECT '' AS four, (@@ f1) AS center
    FROM BOX_TBL;
 
 SELECT '' AS six, point(f1) AS center
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
 
 SELECT '' AS six, (@@ f1) AS center
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
 
 SELECT '' AS two, (@@ f1) AS center
-   FROM POLYGON_TBL
+   FROM polygon_tbl
    WHERE (# f1) > 2;
 
 -- "is horizontal" function
 SELECT '' AS two, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE ishorizontal(p1.f1, point '(0,0)');
 
 -- "is horizontal" operator
 SELECT '' AS two, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE p1.f1 ?- point '(0,0)';
 
 -- "is vertical" function
 SELECT '' AS one, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE isvertical(p1.f1, point '(5.1,34.5)');
 
 -- "is vertical" operator
 SELECT '' AS one, p1.f1
-   FROM POINT_TBL p1
+   FROM point_tbl p1
    WHERE p1.f1 ?| point '(5.1,34.5)';
 
 --
@@ -52,35 +52,35 @@ SELECT '' AS one, p1.f1
 
 -- intersection
 SELECT '' AS count, p.f1, l.s, l.s # p.f1 AS intersection
-   FROM LSEG_TBL l, POINT_TBL p;
+   FROM LSEG_TBL l, point_tbl p;
 
 -- closest point
 SELECT '' AS thirty, p.f1, l.s, p.f1 ## l.s AS closest
-   FROM LSEG_TBL l, POINT_TBL p;
+   FROM LSEG_TBL l, point_tbl p;
 
 --
 -- Boxes
 --
 
-SELECT '' as six, box(f1) AS box FROM CIRCLE_TBL;
+SELECT '' as six, box(f1) AS box FROM circle_tbl;
 
 -- translation
 SELECT '' AS twentyfour, b.f1 + p.f1 AS translation
-   FROM BOX_TBL b, POINT_TBL p;
+   FROM BOX_TBL b, point_tbl p;
 
 SELECT '' AS twentyfour, b.f1 - p.f1 AS translation
-   FROM BOX_TBL b, POINT_TBL p;
+   FROM BOX_TBL b, point_tbl p;
 
 -- scaling and rotation
 SELECT '' AS twentyfour, b.f1 * p.f1 AS rotation
-   FROM BOX_TBL b, POINT_TBL p;
+   FROM BOX_TBL b, point_tbl p;
 
 SELECT '' AS twenty, b.f1 / p.f1 AS rotation
-   FROM BOX_TBL b, POINT_TBL p
+   FROM BOX_TBL b, point_tbl p
    WHERE (p.f1 <-> point '(0,0)') >= 1;
 
 SELECT f1::box
-	FROM POINT_TBL;
+	FROM point_tbl;
 
 SELECT bound_box(a.f1, b.f1)
 	FROM BOX_TBL a, BOX_TBL b;
@@ -91,7 +91,7 @@ SELECT bound_box(a.f1, b.f1)
 
 SELECT '' AS eight, npoints(f1) AS npoints, f1 AS path FROM PATH_TBL;
 
-SELECT '' AS four, path(f1) FROM POLYGON_TBL;
+SELECT '' AS four, path(f1) FROM polygon_tbl;
 
 -- translation
 SELECT '' AS eight, p1.f1 + point '(10,10)' AS dist_add
@@ -107,13 +107,13 @@ SELECT '' AS eight, p1.f1 * point '(2,-1)' AS dist_mul
 
 -- containment
 SELECT '' AS twentyfour, p.f1, poly.f1, poly.f1 @> p.f1 AS contains
-   FROM POLYGON_TBL poly, POINT_TBL p;
+   FROM polygon_tbl poly, point_tbl p;
 
 SELECT '' AS twentyfour, p.f1, poly.f1, p.f1 <@ poly.f1 AS contained
-   FROM POLYGON_TBL poly, POINT_TBL p;
+   FROM polygon_tbl poly, point_tbl p;
 
 SELECT '' AS four, npoints(f1) AS npoints, f1 AS polygon
-   FROM POLYGON_TBL;
+   FROM polygon_tbl;
 
 SELECT '' AS four, polygon(f1)
    FROM BOX_TBL;
@@ -127,27 +127,27 @@ SELECT '' AS four, f1 AS open_path, polygon( pclose(f1)) AS polygon
 
 -- convert circles to polygons using the default number of points
 SELECT '' AS six, polygon(f1)
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
 
 -- convert the circle to an 8-point polygon
 SELECT '' AS six, polygon(8, f1)
-   FROM CIRCLE_TBL;
+   FROM circle_tbl;
 
 --
 -- Circles
 --
 
 SELECT '' AS six, circle(f1, 50.0)
-   FROM POINT_TBL;
+   FROM point_tbl;
 
 SELECT '' AS four, circle(f1)
    FROM BOX_TBL;
 
 SELECT '' AS two, circle(f1)
-   FROM POLYGON_TBL
+   FROM polygon_tbl
    WHERE (# f1) >= 3;
 
 SELECT '' AS twentyfour, c1.f1 AS circle, p1.f1 AS point, (p1.f1 <-> c1.f1) AS distance
-   FROM CIRCLE_TBL c1, POINT_TBL p1
+   FROM circle_tbl c1, point_tbl p1
    WHERE (p1.f1 <-> c1.f1) > 0
    ORDER BY distance, area(c1.f1), p1.f1[0];
diff --git a/src/test/regress/sql/graphid.sql b/src/test/regress/sql/graphid.sql
index 1d988f9..dde6c3c 100644
--- a/src/test/regress/sql/graphid.sql
+++ b/src/test/regress/sql/graphid.sql
@@ -24,7 +24,7 @@ SELECT g.* FROM GRAPHID_TBL g WHERE g.f1 <= '12345.123'::graphid;
 
 -- Index
 
-CREATE INDEX GRAPHID_TBL_IDX ON GRAPHID_TBL USING GIN (f1);
+CREATE INDEX GRAPHID_TBL_IDX ON GRAPHID_TBL USING gin (f1);
 
 SET enable_seqscan = off;
 SELECT g.* FROM GRAPHID_TBL g WHERE g.f1 =  '12345.123'::graphid;
diff --git a/src/test/regress/sql/horology.sql b/src/test/regress/sql/horology.sql
index c81437b..dbecf60 100644
--- a/src/test/regress/sql/horology.sql
+++ b/src/test/regress/sql/horology.sql
@@ -167,17 +167,17 @@ SELECT CAST(cast(date 'today' + time with time zone '03:30'
   + interval '1 month 04:01' as timestamp without time zone) AS time) AS "07:31:00";
 
 SELECT t.d1 AS t, i.f1 AS i, t.d1 + i.f1 AS "add", t.d1 - i.f1 AS "subtract"
-  FROM TIMESTAMP_TBL t, INTERVAL_TBL i
+  FROM TIMESTAMP_TBL t, interval_tbl i
   WHERE t.d1 BETWEEN '1990-01-01' AND '2001-01-01'
     AND i.f1 BETWEEN '00:00' AND '23:00'
   ORDER BY 1,2;
 
 SELECT t.f1 AS t, i.f1 AS i, t.f1 + i.f1 AS "add", t.f1 - i.f1 AS "subtract"
-  FROM TIME_TBL t, INTERVAL_TBL i
+  FROM TIME_TBL t, interval_tbl i
   ORDER BY 1,2;
 
 SELECT t.f1 AS t, i.f1 AS i, t.f1 + i.f1 AS "add", t.f1 - i.f1 AS "subtract"
-  FROM TIMETZ_TBL t, INTERVAL_TBL i
+  FROM TIMETZ_TBL t, interval_tbl i
   ORDER BY 1,2;
 
 -- SQL9x OVERLAPS operator
@@ -249,11 +249,11 @@ SELECT '' AS "16", f1 AS "timestamp"
   ORDER BY "timestamp";
 
 SELECT '' AS "160", d.f1 AS "timestamp", t.f1 AS "interval", d.f1 + t.f1 AS plus
-  FROM TEMP_TIMESTAMP d, INTERVAL_TBL t
+  FROM TEMP_TIMESTAMP d, interval_tbl t
   ORDER BY plus, "timestamp", "interval";
 
 SELECT '' AS "160", d.f1 AS "timestamp", t.f1 AS "interval", d.f1 - t.f1 AS minus
-  FROM TEMP_TIMESTAMP d, INTERVAL_TBL t
+  FROM TEMP_TIMESTAMP d, interval_tbl t
   WHERE isfinite(d.f1)
   ORDER BY minus, "timestamp", "interval";
 
@@ -321,7 +321,7 @@ SELECT '' AS three, f1 as abstime, cast(f1 as timestamp) AS "timestamp"
   FROM ABSTIME_TBL WHERE NOT isfinite(f1);
 
 SELECT '' AS ten, f1 AS interval, reltime(f1) AS reltime
-  FROM INTERVAL_TBL;
+  FROM interval_tbl;
 
 SELECT '' AS six, f1 as reltime, CAST(f1 AS interval) AS interval
   FROM RELTIME_TBL;
diff --git a/src/test/regress/sql/inet.sql b/src/test/regress/sql/inet.sql
index 007741e..2401c14 100644
--- a/src/test/regress/sql/inet.sql
+++ b/src/test/regress/sql/inet.sql
@@ -4,48 +4,48 @@
 
 -- prepare the table...
 
-DROP TABLE INET_TBL;
-CREATE TABLE INET_TBL (c cidr, i inet);
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.226/24');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1.0/26', '192.168.1.226');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.0/24');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.0/25');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.255/24');
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1', '192.168.1.255/25');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '10.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10.0.0.0', '10.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10.1.2.3', '10.1.2.3/32');
-INSERT INTO INET_TBL (c, i) VALUES ('10.1.2', '10.1.2.3/24');
-INSERT INTO INET_TBL (c, i) VALUES ('10.1', '10.1.2.3/16');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '10.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '11.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10', '9.1.2.3/8');
-INSERT INTO INET_TBL (c, i) VALUES ('10:23::f1', '10:23::f1/64');
-INSERT INTO INET_TBL (c, i) VALUES ('10:23::8000/113', '10:23::ffff');
-INSERT INTO INET_TBL (c, i) VALUES ('::ffff:1.2.3.4', '::4.3.2.1/24');
+DROP TABLE inet_tbl;
+CREATE TABLE inet_tbl (c cidr, i inet);
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.226/24');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1.0/26', '192.168.1.226');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.0/24');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.0/25');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.255/24');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1', '192.168.1.255/25');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '10.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10.0.0.0', '10.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10.1.2.3', '10.1.2.3/32');
+INSERT INTO inet_tbl (c, i) VALUES ('10.1.2', '10.1.2.3/24');
+INSERT INTO inet_tbl (c, i) VALUES ('10.1', '10.1.2.3/16');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '10.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '11.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '9.1.2.3/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10:23::f1', '10:23::f1/64');
+INSERT INTO inet_tbl (c, i) VALUES ('10:23::8000/113', '10:23::ffff');
+INSERT INTO inet_tbl (c, i) VALUES ('::ffff:1.2.3.4', '::4.3.2.1/24');
 -- check that CIDR rejects invalid input:
-INSERT INTO INET_TBL (c, i) VALUES ('192.168.1.2/30', '192.168.1.226');
-INSERT INTO INET_TBL (c, i) VALUES ('1234::1234::1234', '::1.2.3.4');
+INSERT INTO inet_tbl (c, i) VALUES ('192.168.1.2/30', '192.168.1.226');
+INSERT INTO inet_tbl (c, i) VALUES ('1234::1234::1234', '::1.2.3.4');
 -- check that CIDR rejects invalid input when converting from text:
-INSERT INTO INET_TBL (c, i) VALUES (cidr('192.168.1.2/30'), '192.168.1.226');
-INSERT INTO INET_TBL (c, i) VALUES (cidr('ffff:ffff:ffff:ffff::/24'), '::192.168.1.226');
-SELECT '' AS ten, c AS cidr, i AS inet FROM INET_TBL;
+INSERT INTO inet_tbl (c, i) VALUES (cidr('192.168.1.2/30'), '192.168.1.226');
+INSERT INTO inet_tbl (c, i) VALUES (cidr('ffff:ffff:ffff:ffff::/24'), '::192.168.1.226');
+SELECT '' AS ten, c AS cidr, i AS inet FROM inet_tbl;
 
 -- now test some support functions
 
-SELECT '' AS ten, i AS inet, host(i), text(i), family(i) FROM INET_TBL;
+SELECT '' AS ten, i AS inet, host(i), text(i), family(i) FROM inet_tbl;
 SELECT '' AS ten, c AS cidr, broadcast(c),
-  i AS inet, broadcast(i) FROM INET_TBL;
+  i AS inet, broadcast(i) FROM inet_tbl;
 SELECT '' AS ten, c AS cidr, network(c) AS "network(cidr)",
-  i AS inet, network(i) AS "network(inet)" FROM INET_TBL;
+  i AS inet, network(i) AS "network(inet)" FROM inet_tbl;
 SELECT '' AS ten, c AS cidr, masklen(c) AS "masklen(cidr)",
-  i AS inet, masklen(i) AS "masklen(inet)" FROM INET_TBL;
+  i AS inet, masklen(i) AS "masklen(inet)" FROM inet_tbl;
 
 SELECT '' AS four, c AS cidr, masklen(c) AS "masklen(cidr)",
-  i AS inet, masklen(i) AS "masklen(inet)" FROM INET_TBL
+  i AS inet, masklen(i) AS "masklen(inet)" FROM inet_tbl
   WHERE masklen(c) <= 8;
 
-SELECT '' AS six, c AS cidr, i AS inet FROM INET_TBL
+SELECT '' AS six, c AS cidr, i AS inet FROM inet_tbl
   WHERE c = i;
 
 SELECT '' AS ten, i, c,
@@ -54,13 +54,13 @@ SELECT '' AS ten, i, c,
   i << c AS sb, i <<= c AS sbe,
   i >> c AS sup, i >>= c AS spe,
   i && c AS ovr
-  FROM INET_TBL;
+  FROM inet_tbl;
 
-SELECT max(i) AS max, min(i) AS min FROM INET_TBL;
-SELECT max(c) AS max, min(c) AS min FROM INET_TBL;
+SELECT max(i) AS max, min(i) AS min FROM inet_tbl;
+SELECT max(c) AS max, min(c) AS min FROM inet_tbl;
 
 -- check the conversion to/from text and set_netmask
-SELECT '' AS ten, set_masklen(inet(text(i)), 24) FROM INET_TBL;
+SELECT '' AS ten, set_masklen(inet(text(i)), 24) FROM inet_tbl;
 
 -- check that btree index works correctly
 CREATE INDEX inet_idx1 ON inet_tbl(i);
@@ -118,8 +118,8 @@ SELECT '127::1'::inet + 10000000000;
 SELECT '127::1'::inet - '127::2'::inet;
 
 -- insert one more row with addressed from different families
-INSERT INTO INET_TBL (c, i) VALUES ('10', '10::/8');
+INSERT INTO inet_tbl (c, i) VALUES ('10', '10::/8');
 -- now, this one should fail
-SELECT inet_merge(c, i) FROM INET_TBL;
+SELECT inet_merge(c, i) FROM inet_tbl;
 -- fix it by inet_same_family() condition
-SELECT inet_merge(c, i) FROM INET_TBL WHERE inet_same_family(c, i);
+SELECT inet_merge(c, i) FROM inet_tbl WHERE inet_same_family(c, i);
diff --git a/src/test/regress/sql/int2.sql b/src/test/regress/sql/int2.sql
index 7dbafb6..10e7541 100644
--- a/src/test/regress/sql/int2.sql
+++ b/src/test/regress/sql/int2.sql
@@ -2,87 +2,87 @@
 -- INT2
 --
 
-CREATE TABLE INT2_TBL(f1 int2);
+CREATE TABLE int2_tbl(f1 int2);
 
-INSERT INTO INT2_TBL(f1) VALUES ('0   ');
+INSERT INTO int2_tbl(f1) VALUES ('0   ');
 
-INSERT INTO INT2_TBL(f1) VALUES ('  1234 ');
+INSERT INTO int2_tbl(f1) VALUES ('  1234 ');
 
-INSERT INTO INT2_TBL(f1) VALUES ('    -1234');
+INSERT INTO int2_tbl(f1) VALUES ('    -1234');
 
-INSERT INTO INT2_TBL(f1) VALUES ('34.5');
+INSERT INTO int2_tbl(f1) VALUES ('34.5');
 
 -- largest and smallest values
-INSERT INTO INT2_TBL(f1) VALUES ('32767');
+INSERT INTO int2_tbl(f1) VALUES ('32767');
 
-INSERT INTO INT2_TBL(f1) VALUES ('-32767');
+INSERT INTO int2_tbl(f1) VALUES ('-32767');
 
 -- bad input values -- should give errors
-INSERT INTO INT2_TBL(f1) VALUES ('100000');
-INSERT INTO INT2_TBL(f1) VALUES ('asdf');
-INSERT INTO INT2_TBL(f1) VALUES ('    ');
-INSERT INTO INT2_TBL(f1) VALUES ('- 1234');
-INSERT INTO INT2_TBL(f1) VALUES ('4 444');
-INSERT INTO INT2_TBL(f1) VALUES ('123 dt');
-INSERT INTO INT2_TBL(f1) VALUES ('');
+INSERT INTO int2_tbl(f1) VALUES ('100000');
+INSERT INTO int2_tbl(f1) VALUES ('asdf');
+INSERT INTO int2_tbl(f1) VALUES ('    ');
+INSERT INTO int2_tbl(f1) VALUES ('- 1234');
+INSERT INTO int2_tbl(f1) VALUES ('4 444');
+INSERT INTO int2_tbl(f1) VALUES ('123 dt');
+INSERT INTO int2_tbl(f1) VALUES ('');
 
 
-SELECT '' AS five, * FROM INT2_TBL;
+SELECT '' AS five, * FROM int2_tbl;
 
-SELECT '' AS four, i.* FROM INT2_TBL i WHERE i.f1 <> int2 '0';
+SELECT '' AS four, i.* FROM int2_tbl i WHERE i.f1 <> int2 '0';
 
-SELECT '' AS four, i.* FROM INT2_TBL i WHERE i.f1 <> int4 '0';
+SELECT '' AS four, i.* FROM int2_tbl i WHERE i.f1 <> int4 '0';
 
-SELECT '' AS one, i.* FROM INT2_TBL i WHERE i.f1 = int2 '0';
+SELECT '' AS one, i.* FROM int2_tbl i WHERE i.f1 = int2 '0';
 
-SELECT '' AS one, i.* FROM INT2_TBL i WHERE i.f1 = int4 '0';
+SELECT '' AS one, i.* FROM int2_tbl i WHERE i.f1 = int4 '0';
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 < int2 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 < int2 '0';
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 < int4 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 < int4 '0';
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 <= int2 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 <= int2 '0';
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 <= int4 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 <= int4 '0';
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 > int2 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 > int2 '0';
 
-SELECT '' AS two, i.* FROM INT2_TBL i WHERE i.f1 > int4 '0';
+SELECT '' AS two, i.* FROM int2_tbl i WHERE i.f1 > int4 '0';
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 >= int2 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 >= int2 '0';
 
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE i.f1 >= int4 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE i.f1 >= int4 '0';
 
 -- positive odds
-SELECT '' AS one, i.* FROM INT2_TBL i WHERE (i.f1 % int2 '2') = int2 '1';
+SELECT '' AS one, i.* FROM int2_tbl i WHERE (i.f1 % int2 '2') = int2 '1';
 
 -- any evens
-SELECT '' AS three, i.* FROM INT2_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
+SELECT '' AS three, i.* FROM int2_tbl i WHERE (i.f1 % int4 '2') = int2 '0';
 
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int2_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT2_TBL i
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int2_tbl i
 WHERE abs(f1) < 16384;
 
-SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM int2_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int2_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT2_TBL i
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int2_tbl i
 WHERE f1 < 32766;
 
-SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM int2_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int2_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT2_TBL i
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int2_tbl i
 WHERE f1 > -32767;
 
-SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM int2_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM int2_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM INT2_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM int2_tbl i;
 
 -- corner cases
 SELECT (-1::int2<<15)::text;
diff --git a/src/test/regress/sql/int4.sql b/src/test/regress/sql/int4.sql
index f014cb2..949ceab 100644
--- a/src/test/regress/sql/int4.sql
+++ b/src/test/regress/sql/int4.sql
@@ -2,96 +2,96 @@
 -- INT4
 --
 
-CREATE TABLE INT4_TBL(f1 int4);
+CREATE TABLE int4_tbl(f1 int4);
 
-INSERT INTO INT4_TBL(f1) VALUES ('   0  ');
+INSERT INTO int4_tbl(f1) VALUES ('   0  ');
 
-INSERT INTO INT4_TBL(f1) VALUES ('123456     ');
+INSERT INTO int4_tbl(f1) VALUES ('123456     ');
 
-INSERT INTO INT4_TBL(f1) VALUES ('    -123456');
+INSERT INTO int4_tbl(f1) VALUES ('    -123456');
 
-INSERT INTO INT4_TBL(f1) VALUES ('34.5');
+INSERT INTO int4_tbl(f1) VALUES ('34.5');
 
 -- largest and smallest values
-INSERT INTO INT4_TBL(f1) VALUES ('2147483647');
+INSERT INTO int4_tbl(f1) VALUES ('2147483647');
 
-INSERT INTO INT4_TBL(f1) VALUES ('-2147483647');
+INSERT INTO int4_tbl(f1) VALUES ('-2147483647');
 
 -- bad input values -- should give errors
-INSERT INTO INT4_TBL(f1) VALUES ('1000000000000');
-INSERT INTO INT4_TBL(f1) VALUES ('asdf');
-INSERT INTO INT4_TBL(f1) VALUES ('     ');
-INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
-INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
-INSERT INTO INT4_TBL(f1) VALUES ('123       5');
-INSERT INTO INT4_TBL(f1) VALUES ('');
+INSERT INTO int4_tbl(f1) VALUES ('1000000000000');
+INSERT INTO int4_tbl(f1) VALUES ('asdf');
+INSERT INTO int4_tbl(f1) VALUES ('     ');
+INSERT INTO int4_tbl(f1) VALUES ('   asdf   ');
+INSERT INTO int4_tbl(f1) VALUES ('- 1234');
+INSERT INTO int4_tbl(f1) VALUES ('123       5');
+INSERT INTO int4_tbl(f1) VALUES ('');
 
 
-SELECT '' AS five, * FROM INT4_TBL;
+SELECT '' AS five, * FROM int4_tbl;
 
-SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> int2 '0';
+SELECT '' AS four, i.* FROM int4_tbl i WHERE i.f1 <> int2 '0';
 
-SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> int4 '0';
+SELECT '' AS four, i.* FROM int4_tbl i WHERE i.f1 <> int4 '0';
 
-SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = int2 '0';
+SELECT '' AS one, i.* FROM int4_tbl i WHERE i.f1 = int2 '0';
 
-SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = int4 '0';
+SELECT '' AS one, i.* FROM int4_tbl i WHERE i.f1 = int4 '0';
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < int2 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 < int2 '0';
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < int4 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 < int4 '0';
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= int2 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 <= int2 '0';
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= int4 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 <= int4 '0';
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > int2 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 > int2 '0';
 
-SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > int4 '0';
+SELECT '' AS two, i.* FROM int4_tbl i WHERE i.f1 > int4 '0';
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= int2 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 >= int2 '0';
 
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= int4 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE i.f1 >= int4 '0';
 
 -- positive odds
-SELECT '' AS one, i.* FROM INT4_TBL i WHERE (i.f1 % int2 '2') = int2 '1';
+SELECT '' AS one, i.* FROM int4_tbl i WHERE (i.f1 % int2 '2') = int2 '1';
 
 -- any evens
-SELECT '' AS three, i.* FROM INT4_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
+SELECT '' AS three, i.* FROM int4_tbl i WHERE (i.f1 % int4 '2') = int2 '0';
 
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int4_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 * int2 '2' AS x FROM int4_tbl i
 WHERE abs(f1) < 1073741824;
 
-SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM int4_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 * int4 '2' AS x FROM int4_tbl i
 WHERE abs(f1) < 1073741824;
 
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int4_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 + int2 '2' AS x FROM int4_tbl i
 WHERE f1 < 2147483646;
 
-SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM int4_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 + int4 '2' AS x FROM int4_tbl i
 WHERE f1 < 2147483646;
 
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int4_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 - int2 '2' AS x FROM int4_tbl i
 WHERE f1 > -2147483647;
 
-SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM int4_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i
+SELECT '' AS five, i.f1, i.f1 - int4 '2' AS x FROM int4_tbl i
 WHERE f1 > -2147483647;
 
-SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int2 '2' AS x FROM int4_tbl i;
 
-SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM INT4_TBL i;
+SELECT '' AS five, i.f1, i.f1 / int4 '2' AS x FROM int4_tbl i;
 
 --
 -- more complex expressions
diff --git a/src/test/regress/sql/int8.sql b/src/test/regress/sql/int8.sql
index e890452..bf5f7c7 100644
--- a/src/test/regress/sql/int8.sql
+++ b/src/test/regress/sql/int8.sql
@@ -2,125 +2,125 @@
 -- INT8
 -- Test int8 64-bit integers.
 --
-CREATE TABLE INT8_TBL(q1 int8, q2 int8);
+CREATE TABLE int8_tbl(q1 int8, q2 int8);
 
-INSERT INTO INT8_TBL VALUES('  123   ','  456');
-INSERT INTO INT8_TBL VALUES('123   ','4567890123456789');
-INSERT INTO INT8_TBL VALUES('4567890123456789','123');
-INSERT INTO INT8_TBL VALUES(+4567890123456789,'4567890123456789');
-INSERT INTO INT8_TBL VALUES('+4567890123456789','-4567890123456789');
+INSERT INTO int8_tbl VALUES('  123   ','  456');
+INSERT INTO int8_tbl VALUES('123   ','4567890123456789');
+INSERT INTO int8_tbl VALUES('4567890123456789','123');
+INSERT INTO int8_tbl VALUES(+4567890123456789,'4567890123456789');
+INSERT INTO int8_tbl VALUES('+4567890123456789','-4567890123456789');
 
 -- bad inputs
-INSERT INTO INT8_TBL(q1) VALUES ('      ');
-INSERT INTO INT8_TBL(q1) VALUES ('xxx');
-INSERT INTO INT8_TBL(q1) VALUES ('3908203590239580293850293850329485');
-INSERT INTO INT8_TBL(q1) VALUES ('-1204982019841029840928340329840934');
-INSERT INTO INT8_TBL(q1) VALUES ('- 123');
-INSERT INTO INT8_TBL(q1) VALUES ('  345     5');
-INSERT INTO INT8_TBL(q1) VALUES ('');
+INSERT INTO int8_tbl(q1) VALUES ('      ');
+INSERT INTO int8_tbl(q1) VALUES ('xxx');
+INSERT INTO int8_tbl(q1) VALUES ('3908203590239580293850293850329485');
+INSERT INTO int8_tbl(q1) VALUES ('-1204982019841029840928340329840934');
+INSERT INTO int8_tbl(q1) VALUES ('- 123');
+INSERT INTO int8_tbl(q1) VALUES ('  345     5');
+INSERT INTO int8_tbl(q1) VALUES ('');
 
-SELECT * FROM INT8_TBL;
+SELECT * FROM int8_tbl;
 
 -- int8/int8 cmp
-SELECT * FROM INT8_TBL WHERE q2 = 4567890123456789;
-SELECT * FROM INT8_TBL WHERE q2 <> 4567890123456789;
-SELECT * FROM INT8_TBL WHERE q2 < 4567890123456789;
-SELECT * FROM INT8_TBL WHERE q2 > 4567890123456789;
-SELECT * FROM INT8_TBL WHERE q2 <= 4567890123456789;
-SELECT * FROM INT8_TBL WHERE q2 >= 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 = 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 <> 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 < 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 > 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 <= 4567890123456789;
+SELECT * FROM int8_tbl WHERE q2 >= 4567890123456789;
 
 -- int8/int4 cmp
-SELECT * FROM INT8_TBL WHERE q2 = 456;
-SELECT * FROM INT8_TBL WHERE q2 <> 456;
-SELECT * FROM INT8_TBL WHERE q2 < 456;
-SELECT * FROM INT8_TBL WHERE q2 > 456;
-SELECT * FROM INT8_TBL WHERE q2 <= 456;
-SELECT * FROM INT8_TBL WHERE q2 >= 456;
+SELECT * FROM int8_tbl WHERE q2 = 456;
+SELECT * FROM int8_tbl WHERE q2 <> 456;
+SELECT * FROM int8_tbl WHERE q2 < 456;
+SELECT * FROM int8_tbl WHERE q2 > 456;
+SELECT * FROM int8_tbl WHERE q2 <= 456;
+SELECT * FROM int8_tbl WHERE q2 >= 456;
 
 -- int4/int8 cmp
-SELECT * FROM INT8_TBL WHERE 123 = q1;
-SELECT * FROM INT8_TBL WHERE 123 <> q1;
-SELECT * FROM INT8_TBL WHERE 123 < q1;
-SELECT * FROM INT8_TBL WHERE 123 > q1;
-SELECT * FROM INT8_TBL WHERE 123 <= q1;
-SELECT * FROM INT8_TBL WHERE 123 >= q1;
+SELECT * FROM int8_tbl WHERE 123 = q1;
+SELECT * FROM int8_tbl WHERE 123 <> q1;
+SELECT * FROM int8_tbl WHERE 123 < q1;
+SELECT * FROM int8_tbl WHERE 123 > q1;
+SELECT * FROM int8_tbl WHERE 123 <= q1;
+SELECT * FROM int8_tbl WHERE 123 >= q1;
 
 -- int8/int2 cmp
-SELECT * FROM INT8_TBL WHERE q2 = '456'::int2;
-SELECT * FROM INT8_TBL WHERE q2 <> '456'::int2;
-SELECT * FROM INT8_TBL WHERE q2 < '456'::int2;
-SELECT * FROM INT8_TBL WHERE q2 > '456'::int2;
-SELECT * FROM INT8_TBL WHERE q2 <= '456'::int2;
-SELECT * FROM INT8_TBL WHERE q2 >= '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 = '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 <> '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 < '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 > '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 <= '456'::int2;
+SELECT * FROM int8_tbl WHERE q2 >= '456'::int2;
 
 -- int2/int8 cmp
-SELECT * FROM INT8_TBL WHERE '123'::int2 = q1;
-SELECT * FROM INT8_TBL WHERE '123'::int2 <> q1;
-SELECT * FROM INT8_TBL WHERE '123'::int2 < q1;
-SELECT * FROM INT8_TBL WHERE '123'::int2 > q1;
-SELECT * FROM INT8_TBL WHERE '123'::int2 <= q1;
-SELECT * FROM INT8_TBL WHERE '123'::int2 >= q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 = q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 <> q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 < q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 > q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 <= q1;
+SELECT * FROM int8_tbl WHERE '123'::int2 >= q1;
 
 
-SELECT '' AS five, q1 AS plus, -q1 AS minus FROM INT8_TBL;
+SELECT '' AS five, q1 AS plus, -q1 AS minus FROM int8_tbl;
 
-SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM INT8_TBL;
-SELECT '' AS five, q1, q2, q1 - q2 AS minus FROM INT8_TBL;
-SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM INT8_TBL;
-SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM INT8_TBL
+SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM int8_tbl;
+SELECT '' AS five, q1, q2, q1 - q2 AS minus FROM int8_tbl;
+SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM int8_tbl;
+SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM int8_tbl
  WHERE q1 < 1000 or (q2 > 0 and q2 < 1000);
-SELECT '' AS five, q1, q2, q1 / q2 AS divide, q1 % q2 AS mod FROM INT8_TBL;
+SELECT '' AS five, q1, q2, q1 / q2 AS divide, q1 % q2 AS mod FROM int8_tbl;
 
-SELECT '' AS five, q1, float8(q1) FROM INT8_TBL;
-SELECT '' AS five, q2, float8(q2) FROM INT8_TBL;
+SELECT '' AS five, q1, float8(q1) FROM int8_tbl;
+SELECT '' AS five, q2, float8(q2) FROM int8_tbl;
 
-SELECT 37 + q1 AS plus4 FROM INT8_TBL;
-SELECT 37 - q1 AS minus4 FROM INT8_TBL;
-SELECT '' AS five, 2 * q1 AS "twice int4" FROM INT8_TBL;
-SELECT '' AS five, q1 * 2 AS "twice int4" FROM INT8_TBL;
+SELECT 37 + q1 AS plus4 FROM int8_tbl;
+SELECT 37 - q1 AS minus4 FROM int8_tbl;
+SELECT '' AS five, 2 * q1 AS "twice int4" FROM int8_tbl;
+SELECT '' AS five, q1 * 2 AS "twice int4" FROM int8_tbl;
 
 -- int8 op int4
-SELECT q1 + 42::int4 AS "8plus4", q1 - 42::int4 AS "8minus4", q1 * 42::int4 AS "8mul4", q1 / 42::int4 AS "8div4" FROM INT8_TBL;
+SELECT q1 + 42::int4 AS "8plus4", q1 - 42::int4 AS "8minus4", q1 * 42::int4 AS "8mul4", q1 / 42::int4 AS "8div4" FROM int8_tbl;
 -- int4 op int8
-SELECT 246::int4 + q1 AS "4plus8", 246::int4 - q1 AS "4minus8", 246::int4 * q1 AS "4mul8", 246::int4 / q1 AS "4div8" FROM INT8_TBL;
+SELECT 246::int4 + q1 AS "4plus8", 246::int4 - q1 AS "4minus8", 246::int4 * q1 AS "4mul8", 246::int4 / q1 AS "4div8" FROM int8_tbl;
 
 -- int8 op int2
-SELECT q1 + 42::int2 AS "8plus2", q1 - 42::int2 AS "8minus2", q1 * 42::int2 AS "8mul2", q1 / 42::int2 AS "8div2" FROM INT8_TBL;
+SELECT q1 + 42::int2 AS "8plus2", q1 - 42::int2 AS "8minus2", q1 * 42::int2 AS "8mul2", q1 / 42::int2 AS "8div2" FROM int8_tbl;
 -- int2 op int8
-SELECT 246::int2 + q1 AS "2plus8", 246::int2 - q1 AS "2minus8", 246::int2 * q1 AS "2mul8", 246::int2 / q1 AS "2div8" FROM INT8_TBL;
+SELECT 246::int2 + q1 AS "2plus8", 246::int2 - q1 AS "2minus8", 246::int2 * q1 AS "2mul8", 246::int2 / q1 AS "2div8" FROM int8_tbl;
 
-SELECT q2, abs(q2) FROM INT8_TBL;
-SELECT min(q1), min(q2) FROM INT8_TBL;
-SELECT max(q1), max(q2) FROM INT8_TBL;
+SELECT q2, abs(q2) FROM int8_tbl;
+SELECT min(q1), min(q2) FROM int8_tbl;
+SELECT max(q1), max(q2) FROM int8_tbl;
 
 
 -- TO_CHAR()
 --
 SELECT '' AS to_char_1, to_char(q1, '9G999G999G999G999G999'), to_char(q2, '9,999,999,999,999,999')
-	FROM INT8_TBL;
+	FROM int8_tbl;
 
 SELECT '' AS to_char_2, to_char(q1, '9G999G999G999G999G999D999G999'), to_char(q2, '9,999,999,999,999,999.999,999')
-	FROM INT8_TBL;
+	FROM int8_tbl;
 
 SELECT '' AS to_char_3, to_char( (q1 * -1), '9999999999999999PR'), to_char( (q2 * -1), '9999999999999999.999PR')
-	FROM INT8_TBL;
+	FROM int8_tbl;
 
 SELECT '' AS to_char_4, to_char( (q1 * -1), '9999999999999999S'), to_char( (q2 * -1), 'S9999999999999999')
-	FROM INT8_TBL;
-
-SELECT '' AS to_char_5,  to_char(q2, 'MI9999999999999999')     FROM INT8_TBL;
-SELECT '' AS to_char_6,  to_char(q2, 'FMS9999999999999999')    FROM INT8_TBL;
-SELECT '' AS to_char_7,  to_char(q2, 'FM9999999999999999THPR') FROM INT8_TBL;
-SELECT '' AS to_char_8,  to_char(q2, 'SG9999999999999999th')   FROM INT8_TBL;
-SELECT '' AS to_char_9,  to_char(q2, '0999999999999999')       FROM INT8_TBL;
-SELECT '' AS to_char_10, to_char(q2, 'S0999999999999999')      FROM INT8_TBL;
-SELECT '' AS to_char_11, to_char(q2, 'FM0999999999999999')     FROM INT8_TBL;
-SELECT '' AS to_char_12, to_char(q2, 'FM9999999999999999.000') FROM INT8_TBL;
-SELECT '' AS to_char_13, to_char(q2, 'L9999999999999999.000')  FROM INT8_TBL;
-SELECT '' AS to_char_14, to_char(q2, 'FM9999999999999999.999') FROM INT8_TBL;
-SELECT '' AS to_char_15, to_char(q2, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9') FROM INT8_TBL;
-SELECT '' AS to_char_16, to_char(q2, E'99999 "text" 9999 "9999" 999 "\\"text between quote marks\\"" 9999') FROM INT8_TBL;
-SELECT '' AS to_char_17, to_char(q2, '999999SG9999999999')     FROM INT8_TBL;
+	FROM int8_tbl;
+
+SELECT '' AS to_char_5,  to_char(q2, 'MI9999999999999999')     FROM int8_tbl;
+SELECT '' AS to_char_6,  to_char(q2, 'FMS9999999999999999')    FROM int8_tbl;
+SELECT '' AS to_char_7,  to_char(q2, 'FM9999999999999999THPR') FROM int8_tbl;
+SELECT '' AS to_char_8,  to_char(q2, 'SG9999999999999999th')   FROM int8_tbl;
+SELECT '' AS to_char_9,  to_char(q2, '0999999999999999')       FROM int8_tbl;
+SELECT '' AS to_char_10, to_char(q2, 'S0999999999999999')      FROM int8_tbl;
+SELECT '' AS to_char_11, to_char(q2, 'FM0999999999999999')     FROM int8_tbl;
+SELECT '' AS to_char_12, to_char(q2, 'FM9999999999999999.000') FROM int8_tbl;
+SELECT '' AS to_char_13, to_char(q2, 'L9999999999999999.000')  FROM int8_tbl;
+SELECT '' AS to_char_14, to_char(q2, 'FM9999999999999999.999') FROM int8_tbl;
+SELECT '' AS to_char_15, to_char(q2, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9') FROM int8_tbl;
+SELECT '' AS to_char_16, to_char(q2, E'99999 "text" 9999 "9999" 999 "\\"text between quote marks\\"" 9999') FROM int8_tbl;
+SELECT '' AS to_char_17, to_char(q2, '999999SG9999999999')     FROM int8_tbl;
 
 -- check min/max values and overflow behavior
 
@@ -171,18 +171,18 @@ SELECT CAST(q1 AS int2) FROM int8_tbl WHERE q2 <> 456;
 
 SELECT CAST('42'::int2 AS int8), CAST('-37'::int2 AS int8);
 
-SELECT CAST(q1 AS float4), CAST(q2 AS float8) FROM INT8_TBL;
+SELECT CAST(q1 AS float4), CAST(q2 AS float8) FROM int8_tbl;
 SELECT CAST('36854775807.0'::float4 AS int8);
 SELECT CAST('922337203685477580700.0'::float8 AS int8);
 
-SELECT CAST(q1 AS oid) FROM INT8_TBL;
+SELECT CAST(q1 AS oid) FROM int8_tbl;
 SELECT oid::int8 FROM pg_class WHERE relname = 'pg_class';
 
 
 -- bit operations
 
-SELECT q1, q2, q1 & q2 AS "and", q1 | q2 AS "or", q1 # q2 AS "xor", ~q1 AS "not" FROM INT8_TBL;
-SELECT q1, q1 << 2 AS "shl", q1 >> 3 AS "shr" FROM INT8_TBL;
+SELECT q1, q2, q1 & q2 AS "and", q1 | q2 AS "or", q1 # q2 AS "xor", ~q1 AS "not" FROM int8_tbl;
+SELECT q1, q1 << 2 AS "shl", q1 >> 3 AS "shr" FROM int8_tbl;
 
 
 -- generate_series
diff --git a/src/test/regress/sql/interval.sql b/src/test/regress/sql/interval.sql
index cff9ada..5b3bef1 100644
--- a/src/test/regress/sql/interval.sql
+++ b/src/test/regress/sql/interval.sql
@@ -15,47 +15,47 @@ SELECT INTERVAL '1.5 weeks' AS "Ten days twelve hours";
 SELECT INTERVAL '1.5 months' AS "One month 15 days";
 SELECT INTERVAL '10 years -11 month -12 days +13:14' AS "9 years...";
 
-CREATE TABLE INTERVAL_TBL (f1 interval);
-
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 1 minute');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 5 hour');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 10 day');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 34 year');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 3 months');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 14 seconds ago');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('1 day 2 hours 3 minutes 4 seconds');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('6 years');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('5 months');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('5 months 12 hours');
+CREATE TABLE interval_tbl (f1 interval);
+
+INSERT INTO interval_tbl (f1) VALUES ('@ 1 minute');
+INSERT INTO interval_tbl (f1) VALUES ('@ 5 hour');
+INSERT INTO interval_tbl (f1) VALUES ('@ 10 day');
+INSERT INTO interval_tbl (f1) VALUES ('@ 34 year');
+INSERT INTO interval_tbl (f1) VALUES ('@ 3 months');
+INSERT INTO interval_tbl (f1) VALUES ('@ 14 seconds ago');
+INSERT INTO interval_tbl (f1) VALUES ('1 day 2 hours 3 minutes 4 seconds');
+INSERT INTO interval_tbl (f1) VALUES ('6 years');
+INSERT INTO interval_tbl (f1) VALUES ('5 months');
+INSERT INTO interval_tbl (f1) VALUES ('5 months 12 hours');
 
 -- badly formatted interval
-INSERT INTO INTERVAL_TBL (f1) VALUES ('badly formatted interval');
-INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 30 eons ago');
+INSERT INTO interval_tbl (f1) VALUES ('badly formatted interval');
+INSERT INTO interval_tbl (f1) VALUES ('@ 30 eons ago');
 
 -- test interval operators
 
-SELECT '' AS ten, * FROM INTERVAL_TBL;
+SELECT '' AS ten, * FROM interval_tbl;
 
-SELECT '' AS nine, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 <> interval '@ 10 days';
+SELECT '' AS nine, * FROM interval_tbl
+   WHERE interval_tbl.f1 <> interval '@ 10 days';
 
-SELECT '' AS three, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 <= interval '@ 5 hours';
+SELECT '' AS three, * FROM interval_tbl
+   WHERE interval_tbl.f1 <= interval '@ 5 hours';
 
-SELECT '' AS three, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 < interval '@ 1 day';
+SELECT '' AS three, * FROM interval_tbl
+   WHERE interval_tbl.f1 < interval '@ 1 day';
 
-SELECT '' AS one, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 = interval '@ 34 years';
+SELECT '' AS one, * FROM interval_tbl
+   WHERE interval_tbl.f1 = interval '@ 34 years';
 
-SELECT '' AS five, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 >= interval '@ 1 month';
+SELECT '' AS five, * FROM interval_tbl
+   WHERE interval_tbl.f1 >= interval '@ 1 month';
 
-SELECT '' AS nine, * FROM INTERVAL_TBL
-   WHERE INTERVAL_TBL.f1 > interval '@ 3 seconds ago';
+SELECT '' AS nine, * FROM interval_tbl
+   WHERE interval_tbl.f1 > interval '@ 3 seconds ago';
 
 SELECT '' AS fortyfive, r1.*, r2.*
-   FROM INTERVAL_TBL r1, INTERVAL_TBL r2
+   FROM interval_tbl r1, interval_tbl r2
    WHERE r1.f1 > r2.f1
    ORDER BY r1.f1, r2.f1;
 
@@ -97,7 +97,7 @@ DROP TABLE INTERVAL_MULDIV_TBL;
 SET DATESTYLE = 'postgres';
 SET IntervalStyle to postgres_verbose;
 
-SELECT '' AS ten, * FROM INTERVAL_TBL;
+SELECT '' AS ten, * FROM interval_tbl;
 
 -- test avg(interval), which is somewhat fragile since people have been
 -- known to change the allowed input syntax for type interval without
diff --git a/src/test/regress/sql/numerology.sql b/src/test/regress/sql/numerology.sql
index 980d0d7..aa09667 100644
--- a/src/test/regress/sql/numerology.sql
+++ b/src/test/regress/sql/numerology.sql
@@ -12,10 +12,10 @@
 CREATE TABLE TEMP_FLOAT (f1 FLOAT8);
 
 INSERT INTO TEMP_FLOAT (f1)
-  SELECT float8(f1) FROM INT4_TBL;
+  SELECT float8(f1) FROM int4_tbl;
 
 INSERT INTO TEMP_FLOAT (f1)
-  SELECT float8(f1) FROM INT2_TBL;
+  SELECT float8(f1) FROM int2_tbl;
 
 SELECT '' AS ten, f1 FROM TEMP_FLOAT
   ORDER BY f1;
@@ -25,11 +25,11 @@ SELECT '' AS ten, f1 FROM TEMP_FLOAT
 CREATE TABLE TEMP_INT4 (f1 INT4);
 
 INSERT INTO TEMP_INT4 (f1)
-  SELECT int4(f1) FROM FLOAT8_TBL
+  SELECT int4(f1) FROM float8_tbl
   WHERE (f1 > -2147483647) AND (f1 < 2147483647);
 
 INSERT INTO TEMP_INT4 (f1)
-  SELECT int4(f1) FROM INT2_TBL;
+  SELECT int4(f1) FROM int2_tbl;
 
 SELECT '' AS nine, f1 FROM TEMP_INT4
   ORDER BY f1;
@@ -39,11 +39,11 @@ SELECT '' AS nine, f1 FROM TEMP_INT4
 CREATE TABLE TEMP_INT2 (f1 INT2);
 
 INSERT INTO TEMP_INT2 (f1)
-  SELECT int2(f1) FROM FLOAT8_TBL
+  SELECT int2(f1) FROM float8_tbl
   WHERE (f1 >= -32767) AND (f1 <= 32767);
 
 INSERT INTO TEMP_INT2 (f1)
-  SELECT int2(f1) FROM INT4_TBL
+  SELECT int2(f1) FROM int4_tbl
   WHERE (f1 >= -32767) AND (f1 <= 32767);
 
 SELECT '' AS five, f1 FROM TEMP_INT2
@@ -57,11 +57,11 @@ CREATE TABLE TEMP_GROUP (f1 INT4, f2 INT4, f3 FLOAT8);
 
 INSERT INTO TEMP_GROUP
   SELECT 1, (- i.f1), (- f.f1)
-  FROM INT4_TBL i, FLOAT8_TBL f;
+  FROM int4_tbl i, float8_tbl f;
 
 INSERT INTO TEMP_GROUP
   SELECT 2, i.f1, f.f1
-  FROM INT4_TBL i, FLOAT8_TBL f;
+  FROM int4_tbl i, float8_tbl f;
 
 SELECT DISTINCT f1 AS two FROM TEMP_GROUP ORDER BY 1;
 
diff --git a/src/test/regress/sql/plpgsql.sql b/src/test/regress/sql/plpgsql.sql
index af4aa3a..fb14982 100644
--- a/src/test/regress/sql/plpgsql.sql
+++ b/src/test/regress/sql/plpgsql.sql
@@ -45,7 +45,7 @@ create table PField (
     comment	text
 );
 
-create unique index PField_name on PField using btree (name text_ops);
+create unique index pfield_name on PField using btree (name text_ops);
 
 
 create table PSlot (
@@ -84,16 +84,16 @@ create table HSlot (
     slotlink	char(20)
 );
 
-create unique index HSlot_name on HSlot using btree (slotname bpchar_ops);
+create unique index hslot_name on HSlot using btree (slotname bpchar_ops);
 create index HSlot_hubname on HSlot using btree (hubname bpchar_ops);
 
 
-create table System (
+create table system (
     name	text,
     comment	text
 );
 
-create unique index System_name on System using btree (name text_ops);
+create unique index system_name on system using btree (name text_ops);
 
 
 create table IFace (
@@ -226,7 +226,7 @@ create trigger tg_pslot_biu before insert or update
 
 
 -- ************************************************************
--- * AFTER UPDATE on System
+-- * AFTER UPDATE on system
 -- *	- If system name changes let interfaces follow
 -- ************************************************************
 create function tg_system_au() returns trigger as '
@@ -239,7 +239,7 @@ end;
 ' language plpgsql;
 
 create trigger tg_system_au after update
-    on System for each row execute procedure tg_system_au();
+    on system for each row execute procedure tg_system_au();
 
 
 -- ************************************************************
@@ -1114,11 +1114,11 @@ begin
     end if;
     if sltype = ''IF'' then
 	declare
-	    syrow	System%RowType;
+	    syrow	system%RowType;
 	    ifrow	IFace%ROWTYPE;
         begin
 	    select into ifrow * from IFace where slotname = rec.slotlink;
-	    select into syrow * from System where name = ifrow.sysname;
+	    select into syrow * from system where name = ifrow.sysname;
 	    retval := syrow.name || '' IF '';
 	    retval := retval || ifrow.ifname;
 	    if syrow.comment != '''' then
@@ -1138,7 +1138,7 @@ end;
 -- ************************************************************
 -- * View of a patchfield describing backside and patches
 -- ************************************************************
-create view Pfield_v1 as select PF.pfname, PF.slotname,
+create view pfield_v1 as select PF.pfname, PF.slotname,
 	pslot_backlink_view(PF.slotname) as backside,
 	pslot_slotlink_view(PF.slotname) as patch
     from PSlot PF;
@@ -1393,15 +1393,15 @@ update PSlot set slotlink = 'PS.base.ta2' where slotname = 'PS.base.a3';
 -- ethernet interface into the wall and patch it to the hub.
 --
 insert into Hub values ('base.hub1', 'Patchfield PF0_1 hub', 16);
-insert into System values ('orion', 'PC');
+insert into system values ('orion', 'PC');
 insert into IFace values ('IF', 'orion', 'eth0', 'WS.002.1b');
 update PSlot set slotlink = 'HS.base.hub1.1' where slotname = 'PS.base.b2';
 
 --
 -- Now we take a look at the patchfield
 --
-select * from PField_v1 where pfname = 'PF0_1' order by slotname;
-select * from PField_v1 where pfname = 'PF0_2' order by slotname;
+select * from pfield_v1 where pfname = 'PF0_1' order by slotname;
+select * from pfield_v1 where pfname = 'PF0_2' order by slotname;
 
 --
 -- Finally we want errors
diff --git a/src/test/regress/sql/point.sql b/src/test/regress/sql/point.sql
index 63a803a..74e11c7 100644
--- a/src/test/regress/sql/point.sql
+++ b/src/test/regress/sql/point.sql
@@ -2,82 +2,82 @@
 -- POINT
 --
 
-CREATE TABLE POINT_TBL(f1 point);
+CREATE TABLE point_tbl(f1 point);
 
-INSERT INTO POINT_TBL(f1) VALUES ('(0.0,0.0)');
+INSERT INTO point_tbl(f1) VALUES ('(0.0,0.0)');
 
-INSERT INTO POINT_TBL(f1) VALUES ('(-10.0,0.0)');
+INSERT INTO point_tbl(f1) VALUES ('(-10.0,0.0)');
 
-INSERT INTO POINT_TBL(f1) VALUES ('(-3.0,4.0)');
+INSERT INTO point_tbl(f1) VALUES ('(-3.0,4.0)');
 
-INSERT INTO POINT_TBL(f1) VALUES ('(5.1, 34.5)');
+INSERT INTO point_tbl(f1) VALUES ('(5.1, 34.5)');
 
-INSERT INTO POINT_TBL(f1) VALUES ('(-5.0,-12.0)');
+INSERT INTO point_tbl(f1) VALUES ('(-5.0,-12.0)');
 
 -- bad format points
-INSERT INTO POINT_TBL(f1) VALUES ('asdfasdf');
+INSERT INTO point_tbl(f1) VALUES ('asdfasdf');
 
-INSERT INTO POINT_TBL(f1) VALUES ('10.0,10.0');
+INSERT INTO point_tbl(f1) VALUES ('10.0,10.0');
 
-INSERT INTO POINT_TBL(f1) VALUES ('(10.0 10.0)');
+INSERT INTO point_tbl(f1) VALUES ('(10.0 10.0)');
 
-INSERT INTO POINT_TBL(f1) VALUES ('(10.0,10.0');
+INSERT INTO point_tbl(f1) VALUES ('(10.0,10.0');
 
 
-SELECT '' AS six, * FROM POINT_TBL;
+SELECT '' AS six, * FROM point_tbl;
 
 -- left of
-SELECT '' AS three, p.* FROM POINT_TBL p WHERE p.f1 << '(0.0, 0.0)';
+SELECT '' AS three, p.* FROM point_tbl p WHERE p.f1 << '(0.0, 0.0)';
 
 -- right of
-SELECT '' AS three, p.* FROM POINT_TBL p WHERE '(0.0,0.0)' >> p.f1;
+SELECT '' AS three, p.* FROM point_tbl p WHERE '(0.0,0.0)' >> p.f1;
 
 -- above
-SELECT '' AS one, p.* FROM POINT_TBL p WHERE '(0.0,0.0)' >^ p.f1;
+SELECT '' AS one, p.* FROM point_tbl p WHERE '(0.0,0.0)' >^ p.f1;
 
 -- below
-SELECT '' AS one, p.* FROM POINT_TBL p WHERE p.f1 <^ '(0.0, 0.0)';
+SELECT '' AS one, p.* FROM point_tbl p WHERE p.f1 <^ '(0.0, 0.0)';
 
 -- equal
-SELECT '' AS one, p.* FROM POINT_TBL p WHERE p.f1 ~= '(5.1, 34.5)';
+SELECT '' AS one, p.* FROM point_tbl p WHERE p.f1 ~= '(5.1, 34.5)';
 
 -- point in box
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE p.f1 <@ box '(0,0,100,100)';
 
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE box '(0,0,100,100)' @> p.f1;
 
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE not p.f1 <@ box '(0,0,100,100)';
 
-SELECT '' AS two, p.* FROM POINT_TBL p
+SELECT '' AS two, p.* FROM point_tbl p
    WHERE p.f1 <@ path '[(0,0),(-10,0),(-10,10)]';
 
-SELECT '' AS three, p.* FROM POINT_TBL p
+SELECT '' AS three, p.* FROM point_tbl p
    WHERE not box '(0,0,100,100)' @> p.f1;
 
 SELECT '' AS six, p.f1, p.f1 <-> point '(0,0)' AS dist
-   FROM POINT_TBL p
+   FROM point_tbl p
    ORDER BY dist;
 
 SELECT '' AS thirtysix, p1.f1 AS point1, p2.f1 AS point2, p1.f1 <-> p2.f1 AS dist
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    ORDER BY dist, p1.f1[0], p2.f1[0];
 
 SELECT '' AS thirty, p1.f1 AS point1, p2.f1 AS point2
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    WHERE (p1.f1 <-> p2.f1) > 3;
 
 -- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
 SELECT '' AS fifteen, p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1
    ORDER BY distance, p1.f1[0], p2.f1[0];
 
 -- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
 SELECT '' AS three, p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
-   FROM POINT_TBL p1, POINT_TBL p2
+   FROM point_tbl p1, point_tbl p2
    WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1 and p1.f1 >^ p2.f1
    ORDER BY distance;
 
diff --git a/src/test/regress/sql/polygon.sql b/src/test/regress/sql/polygon.sql
index 7ac8079..3627e5d 100644
--- a/src/test/regress/sql/polygon.sql
+++ b/src/test/regress/sql/polygon.sql
@@ -4,70 +4,70 @@
 -- polygon logic
 --
 
-CREATE TABLE POLYGON_TBL(f1 polygon);
+CREATE TABLE polygon_tbl(f1 polygon);
 
 
-INSERT INTO POLYGON_TBL(f1) VALUES ('(2.0,0.0),(2.0,4.0),(0.0,0.0)');
+INSERT INTO polygon_tbl(f1) VALUES ('(2.0,0.0),(2.0,4.0),(0.0,0.0)');
 
-INSERT INTO POLYGON_TBL(f1) VALUES ('(3.0,1.0),(3.0,3.0),(1.0,0.0)');
+INSERT INTO polygon_tbl(f1) VALUES ('(3.0,1.0),(3.0,3.0),(1.0,0.0)');
 
 -- degenerate polygons
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0,0.0)');
+INSERT INTO polygon_tbl(f1) VALUES ('(0.0,0.0)');
 
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0,1.0),(0.0,1.0)');
+INSERT INTO polygon_tbl(f1) VALUES ('(0.0,1.0),(0.0,1.0)');
 
 -- bad polygon input strings
-INSERT INTO POLYGON_TBL(f1) VALUES ('0.0');
+INSERT INTO polygon_tbl(f1) VALUES ('0.0');
 
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0 0.0');
+INSERT INTO polygon_tbl(f1) VALUES ('(0.0 0.0');
 
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2)');
+INSERT INTO polygon_tbl(f1) VALUES ('(0,1,2)');
 
-INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2,3');
+INSERT INTO polygon_tbl(f1) VALUES ('(0,1,2,3');
 
-INSERT INTO POLYGON_TBL(f1) VALUES ('asdf');
+INSERT INTO polygon_tbl(f1) VALUES ('asdf');
 
 
-SELECT '' AS four, * FROM POLYGON_TBL;
+SELECT '' AS four, * FROM polygon_tbl;
 
 -- overlap
 SELECT '' AS three, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 && '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 -- left overlap
 SELECT '' AS four, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 &< '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 -- right overlap
 SELECT '' AS two, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 &> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 -- left of
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 << '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 -- right of
 SELECT '' AS zero, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 >> '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 -- contained
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 <@ polygon '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 -- same
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 ~= polygon '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 -- contains
 SELECT '' AS one, p.*
-   FROM POLYGON_TBL p
+   FROM polygon_tbl p
    WHERE p.f1 @> polygon '(3.0,1.0),(3.0,3.0),(1.0,0.0)';
 
 --
diff --git a/src/test/regress/sql/privileges.sql b/src/test/regress/sql/privileges.sql
index 00dc7bd..59e60af 100644
--- a/src/test/regress/sql/privileges.sql
+++ b/src/test/regress/sql/privileges.sql
@@ -54,7 +54,7 @@ BEGIN;
 LOCK atest1 IN ACCESS EXCLUSIVE MODE;
 COMMIT;
 
-REVOKE ALL ON atest1 FROM PUBLIC;
+REVOKE ALL ON atest1 FROM public;
 SELECT * FROM atest1;
 
 GRANT ALL ON atest1 TO regress_user2;
@@ -88,7 +88,7 @@ BEGIN;
 LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- fail
 COMMIT;
 COPY atest2 FROM stdin; -- fail
-GRANT ALL ON atest1 TO PUBLIC; -- fail
+GRANT ALL ON atest1 TO public; -- fail
 
 -- checks in subquery, both ok
 SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
@@ -358,16 +358,16 @@ SELECT oid FROM atestp2; -- ok
 -- switch to superuser
 \c -
 
-REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM PUBLIC;
+REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM public;
 GRANT USAGE ON LANGUAGE sql TO regress_user1; -- ok
-GRANT USAGE ON LANGUAGE c TO PUBLIC; -- fail
+GRANT USAGE ON LANGUAGE c TO public; -- fail
 
 SET SESSION AUTHORIZATION regress_user1;
 GRANT USAGE ON LANGUAGE sql TO regress_user2; -- fail
 CREATE FUNCTION testfunc1(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql;
 CREATE FUNCTION testfunc2(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
 
-REVOKE ALL ON FUNCTION testfunc1(int), testfunc2(int) FROM PUBLIC;
+REVOKE ALL ON FUNCTION testfunc1(int), testfunc2(int) FROM public;
 GRANT EXECUTE ON FUNCTION testfunc1(int), testfunc2(int) TO regress_user2;
 GRANT USAGE ON FUNCTION testfunc1(int) TO regress_user3; -- semantic error
 GRANT ALL PRIVILEGES ON FUNCTION testfunc1(int) TO regress_user4;
@@ -396,7 +396,7 @@ DROP FUNCTION testfunc1(int); -- fail
 
 DROP FUNCTION testfunc1(int); -- ok
 -- restore to sanity
-GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC;
+GRANT ALL PRIVILEGES ON LANGUAGE sql TO public;
 
 -- privileges on types
 
@@ -404,13 +404,13 @@ GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC;
 \c -
 
 CREATE TYPE testtype1 AS (a int, b text);
-REVOKE USAGE ON TYPE testtype1 FROM PUBLIC;
+REVOKE USAGE ON TYPE testtype1 FROM public;
 GRANT USAGE ON TYPE testtype1 TO regress_user2;
 GRANT USAGE ON TYPE _testtype1 TO regress_user2; -- fail
 GRANT USAGE ON DOMAIN testtype1 TO regress_user2; -- fail
 
 CREATE DOMAIN testdomain1 AS int;
-REVOKE USAGE on DOMAIN testdomain1 FROM PUBLIC;
+REVOKE USAGE on DOMAIN testdomain1 FROM public;
 GRANT USAGE ON DOMAIN testdomain1 TO regress_user2;
 GRANT USAGE ON TYPE testdomain1 TO regress_user2; -- ok
 
@@ -449,7 +449,7 @@ ALTER TYPE test8a ALTER ATTRIBUTE b TYPE testdomain1;
 
 CREATE TABLE test11a AS (SELECT 1::testdomain1 AS a);
 
-REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
+REVOKE ALL ON TYPE testtype1 FROM public;
 
 SET SESSION AUTHORIZATION regress_user2;
 
@@ -484,7 +484,7 @@ ALTER TYPE test8b ALTER ATTRIBUTE b TYPE testdomain1;
 
 CREATE TABLE test11b AS (SELECT 1::testdomain1 AS a);
 
-REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
+REVOKE ALL ON TYPE testtype1 FROM public;
 
 \c -
 DROP AGGREGATE testagg1b(testdomain1);
@@ -693,15 +693,15 @@ SELECT lo_create(1003);
 SELECT lo_create(1004);
 SELECT lo_create(1005);
 
-GRANT ALL ON LARGE OBJECT 1001 TO PUBLIC;
+GRANT ALL ON LARGE OBJECT 1001 TO public;
 GRANT SELECT ON LARGE OBJECT 1003 TO regress_user2;
 GRANT SELECT,UPDATE ON LARGE OBJECT 1004 TO regress_user2;
 GRANT ALL ON LARGE OBJECT 1005 TO regress_user2;
 GRANT SELECT ON LARGE OBJECT 1005 TO regress_user2 WITH GRANT OPTION;
 
-GRANT SELECT, INSERT ON LARGE OBJECT 1001 TO PUBLIC;	-- to be failed
+GRANT SELECT, INSERT ON LARGE OBJECT 1001 TO public;	-- to be failed
 GRANT SELECT, UPDATE ON LARGE OBJECT 1001 TO nosuchuser;	-- to be failed
-GRANT SELECT, UPDATE ON LARGE OBJECT  999 TO PUBLIC;	-- to be failed
+GRANT SELECT, UPDATE ON LARGE OBJECT  999 TO public;	-- to be failed
 
 \c -
 SET SESSION AUTHORIZATION regress_user2;
@@ -721,7 +721,7 @@ SELECT lowrite(lo_open(1004, x'20000'::int), 'abcd');
 
 GRANT SELECT ON LARGE OBJECT 1005 TO regress_user3;
 GRANT UPDATE ON LARGE OBJECT 1006 TO regress_user3;	-- to be denied
-REVOKE ALL ON LARGE OBJECT 2001, 2002 FROM PUBLIC;
+REVOKE ALL ON LARGE OBJECT 2001, 2002 FROM public;
 GRANT ALL ON LARGE OBJECT 2001 TO regress_user3;
 
 SELECT lo_unlink(1001);		-- to be denied
@@ -873,7 +873,7 @@ CREATE FUNCTION testns.testfunc(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sq
 
 SELECT has_function_privilege('regress_user1', 'testns.testfunc(int)', 'EXECUTE'); -- true by default
 
-REVOKE ALL ON ALL FUNCTIONS IN SCHEMA testns FROM PUBLIC;
+REVOKE ALL ON ALL FUNCTIONS IN SCHEMA testns FROM public;
 
 SELECT has_function_privilege('regress_user1', 'testns.testfunc(int)', 'EXECUTE'); -- false
 
diff --git a/src/test/regress/sql/rangetypes.sql b/src/test/regress/sql/rangetypes.sql
index a60df90..0b19000 100644
--- a/src/test/regress/sql/rangetypes.sql
+++ b/src/test/regress/sql/rangetypes.sql
@@ -1,6 +1,6 @@
 -- Tests for range data types.
 
-create type textrange as range (subtype=text, collation="C");
+create type textrange as range (subtype=text, collation='C');
 
 --
 -- test input parser
@@ -380,8 +380,8 @@ drop domain restrictedrange;
 -- Test multiple range types over the same subtype
 --
 
-create type textrange1 as range(subtype=text, collation="C");
-create type textrange2 as range(subtype=text, collation="C");
+create type textrange1 as range(subtype=text, collation='C');
+create type textrange2 as range(subtype=text, collation='C');
 
 select textrange1('a','Z') @> 'b'::text;
 select textrange2('a','z') @> 'b'::text;
diff --git a/src/test/regress/sql/rolenames.sql b/src/test/regress/sql/rolenames.sql
index 4c5706b..3a53cf6 100644
--- a/src/test/regress/sql/rolenames.sql
+++ b/src/test/regress/sql/rolenames.sql
@@ -299,7 +299,7 @@ CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"'
 CREATE USER MAPPING FOR USER SERVER sv3 OPTIONS (user 'USER');
 CREATE USER MAPPING FOR "user" SERVER sv4 OPTIONS (user '"USER"');
 CREATE USER MAPPING FOR SESSION_USER SERVER sv5 OPTIONS (user 'SESSION_USER');
-CREATE USER MAPPING FOR PUBLIC SERVER sv6 OPTIONS (user 'PUBLIC');
+CREATE USER MAPPING FOR public SERVER sv6 OPTIONS (user 'PUBLIC');
 CREATE USER MAPPING FOR "Public" SERVER sv7 OPTIONS (user '"Public"');
 CREATE USER MAPPING FOR regress_testrolx SERVER sv8 OPTIONS (user 'regress_testrolx');
 
@@ -321,7 +321,7 @@ ALTER USER MAPPING FOR "user" SERVER sv4
  OPTIONS (SET user '"user"_alt');
 ALTER USER MAPPING FOR SESSION_USER SERVER sv5
  OPTIONS (SET user 'SESSION_USER_alt');
-ALTER USER MAPPING FOR PUBLIC SERVER sv6
+ALTER USER MAPPING FOR public SERVER sv6
  OPTIONS (SET user 'public_alt');
 ALTER USER MAPPING FOR "Public" SERVER sv7
  OPTIONS (SET user '"Public"_alt');
@@ -341,7 +341,7 @@ DROP USER MAPPING FOR "current_user" SERVER sv2;
 DROP USER MAPPING FOR USER SERVER sv3;
 DROP USER MAPPING FOR "user" SERVER sv4;
 DROP USER MAPPING FOR SESSION_USER SERVER sv5;
-DROP USER MAPPING FOR PUBLIC SERVER sv6;
+DROP USER MAPPING FOR public SERVER sv6;
 DROP USER MAPPING FOR "Public" SERVER sv7;
 DROP USER MAPPING FOR regress_testrolx SERVER sv8;
 
@@ -354,7 +354,7 @@ CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"'
 CREATE USER MAPPING FOR USER SERVER sv3 OPTIONS (user 'USER');
 CREATE USER MAPPING FOR "user" SERVER sv4 OPTIONS (user '"USER"');
 CREATE USER MAPPING FOR SESSION_USER SERVER sv5 OPTIONS (user 'SESSION_USER');
-CREATE USER MAPPING FOR PUBLIC SERVER sv6 OPTIONS (user 'PUBLIC');
+CREATE USER MAPPING FOR public SERVER sv6 OPTIONS (user 'PUBLIC');
 CREATE USER MAPPING FOR "Public" SERVER sv7 OPTIONS (user '"Public"');
 CREATE USER MAPPING FOR regress_testrolx SERVER sv8 OPTIONS (user 'regress_testrolx');
 SELECT * FROM chkumapping();
@@ -370,7 +370,7 @@ DROP USER MAPPING IF EXISTS FOR "user" SERVER sv4;
 SELECT * FROM chkumapping();
 DROP USER MAPPING IF EXISTS FOR SESSION_USER SERVER sv5;
 SELECT * FROM chkumapping();
-DROP USER MAPPING IF EXISTS FOR PUBLIC SERVER sv6;
+DROP USER MAPPING IF EXISTS FOR public SERVER sv6;
 SELECT * FROM chkumapping();
 DROP USER MAPPING IF EXISTS FOR "Public" SERVER sv7;
 SELECT * FROM chkumapping();
@@ -391,16 +391,16 @@ SET ROLE regress_testrol2;
 UPDATE pg_proc SET proacl = null WHERE proname LIKE 'testagg_';
 SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
 
-REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM PUBLIC;
-REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2) FROM PUBLIC;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM public;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2) FROM public;
 
-GRANT ALL PRIVILEGES ON FUNCTION testagg1(int2) TO PUBLIC;
+GRANT ALL PRIVILEGES ON FUNCTION testagg1(int2) TO public;
 GRANT ALL PRIVILEGES ON FUNCTION testagg2(int2) TO CURRENT_USER;
 GRANT ALL PRIVILEGES ON FUNCTION testagg3(int2) TO "current_user";
 GRANT ALL PRIVILEGES ON FUNCTION testagg4(int2) TO SESSION_USER;
@@ -419,7 +419,7 @@ GRANT ALL PRIVILEGES ON FUNCTION testagg9(int2) TO "none"; --error
 
 SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
 
-REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
+REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM public;
 REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM CURRENT_USER;
 REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM "current_user";
 REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM SESSION_USER;
diff --git a/src/test/regress/sql/rowsecurity.sql b/src/test/regress/sql/rowsecurity.sql
index 7fcefe4..d430e7d 100644
--- a/src/test/regress/sql/rowsecurity.sql
+++ b/src/test/regress/sql/rowsecurity.sql
@@ -226,8 +226,8 @@ COPY t3(a,b,c) FROM stdin WITH (oids);
 303	3	zzz	Z
 \.
 
-CREATE POLICY p1 ON t1 FOR ALL TO PUBLIC USING (a % 2 = 0); -- be even number
-CREATE POLICY p2 ON t2 FOR ALL TO PUBLIC USING (a % 2 = 1); -- be odd number
+CREATE POLICY p1 ON t1 FOR ALL TO public USING (a % 2 = 0); -- be even number
+CREATE POLICY p2 ON t2 FOR ALL TO public USING (a % 2 = 1); -- be odd number
 
 ALTER TABLE t1 ENABLE ROW LEVEL SECURITY;
 ALTER TABLE t2 ENABLE ROW LEVEL SECURITY;
@@ -279,7 +279,7 @@ CREATE TABLE dependee (x integer, y integer);
 
 CREATE TABLE dependent (x integer, y integer);
 CREATE POLICY d1 ON dependent FOR ALL
-    TO PUBLIC
+    TO public
     USING (x = (SELECT d.x FROM dependee d WHERE d.y = y));
 
 DROP TABLE dependee; -- Should fail without CASCADE due to dependency on row security qual?
@@ -738,7 +738,7 @@ DROP VIEW rls_view;
 SET SESSION AUTHORIZATION regress_rls_alice;
 
 CREATE TABLE x1 (a int, b text, c text);
-GRANT ALL ON x1 TO PUBLIC;
+GRANT ALL ON x1 TO public;
 
 INSERT INTO x1 VALUES
     (1, 'abc', 'regress_rls_bob'),
@@ -1130,7 +1130,7 @@ DROP TABLE copy_rel_to CASCADE;
 SET SESSION AUTHORIZATION regress_rls_alice;
 
 CREATE TABLE current_check (currentid int, payload text, rlsuser text);
-GRANT ALL ON current_check TO PUBLIC;
+GRANT ALL ON current_check TO public;
 
 INSERT INTO current_check VALUES
     (1, 'abc', 'regress_rls_bob'),
@@ -1216,7 +1216,7 @@ CREATE ROLE regress_rls_eve;
 CREATE ROLE regress_rls_frank;
 CREATE TABLE tbl1 (c) AS VALUES ('bar'::text);
 GRANT SELECT ON TABLE tbl1 TO regress_rls_eve;
-CREATE POLICY P ON tbl1 TO regress_rls_eve, regress_rls_frank USING (true);
+CREATE POLICY p ON tbl1 TO regress_rls_eve, regress_rls_frank USING (true);
 SELECT refclassid::regclass, deptype
   FROM pg_depend
   WHERE classid = 'pg_policy'::regclass
diff --git a/src/test/regress/sql/rules.sql b/src/test/regress/sql/rules.sql
index 90dc9ce..87e0091 100644
--- a/src/test/regress/sql/rules.sql
+++ b/src/test/regress/sql/rules.sql
@@ -420,15 +420,15 @@ create table rtest_view1 (a int4, b text, v bool);
 create table rtest_view2 (a int4);
 create table rtest_view3 (a int4, b text);
 create table rtest_view4 (a int4, b text, c int4);
-create view rtest_vview1 as select a, b from rtest_view1 X
-	where 0 < (select count(*) from rtest_view2 Y where Y.a = X.a);
+create view rtest_vview1 as select a, b from rtest_view1 x
+	where 0 < (select count(*) from rtest_view2 y where y.a = x.a);
 create view rtest_vview2 as select a, b from rtest_view1 where v;
-create view rtest_vview3 as select a, b from rtest_vview2 X
-	where 0 < (select count(*) from rtest_view2 Y where Y.a = X.a);
-create view rtest_vview4 as select X.a, X.b, count(Y.a) as refcount
-	from rtest_view1 X, rtest_view2 Y
-	where X.a = Y.a
-	group by X.a, X.b;
+create view rtest_vview3 as select a, b from rtest_vview2 x
+	where 0 < (select count(*) from rtest_view2 y where y.a = x.a);
+create view rtest_vview4 as select x.a, x.b, count(y.a) as refcount
+	from rtest_view1 x, rtest_view2 y
+	where x.a = y.a
+	group by x.a, x.b;
 create function rtest_viewfunc1(int4) returns int4 as
 	'select count(*)::int4 from rtest_view2 where a = $1'
 	language sql;
@@ -494,9 +494,9 @@ create table rtest_unitfact (
 );
 
 create view rtest_vcomp as
-	select X.part, (X.size * Y.factor) as size_in_cm
-			from rtest_comp X, rtest_unitfact Y
-			where X.unit = Y.unit;
+	select x.part, (x.size * y.factor) as size_in_cm
+			from rtest_comp x, rtest_unitfact y
+			where x.unit = y.unit;
 
 
 insert into rtest_unitfact values ('m', 100.0);
@@ -1009,12 +1009,12 @@ create rule r5 as on update to rules_src do instead UPDATE rules_log AS trgt SET
 CREATE TABLE rule_t1 (a INT);
 CREATE VIEW rule_v1 AS SELECT * FROM rule_t1;
 
-CREATE RULE InsertRule AS
+CREATE RULE insertrule AS
     ON INSERT TO rule_v1
     DO INSTEAD
         INSERT INTO rule_t1 VALUES(new.a);
 
-ALTER RULE InsertRule ON rule_v1 RENAME to NewInsertRule;
+ALTER RULE insertrule ON rule_v1 RENAME to newinsertrule;
 
 INSERT INTO rule_v1 VALUES(1);
 SELECT * FROM rule_v1;
@@ -1024,8 +1024,8 @@ SELECT * FROM rule_v1;
 --
 -- error conditions for alter rename rule
 --
-ALTER RULE InsertRule ON rule_v1 RENAME TO NewInsertRule; -- doesn't exist
-ALTER RULE NewInsertRule ON rule_v1 RENAME TO "_RETURN"; -- already exists
+ALTER RULE insertrule ON rule_v1 RENAME TO newinsertrule; -- doesn't exist
+ALTER RULE newinsertrule ON rule_v1 RENAME TO "_RETURN"; -- already exists
 ALTER RULE "_RETURN" ON rule_v1 RENAME TO abc; -- ON SELECT rule cannot be renamed
 
 DROP VIEW rule_v1;
diff --git a/src/test/regress/sql/select_distinct.sql b/src/test/regress/sql/select_distinct.sql
index a605e86..262fab4 100644
--- a/src/test/regress/sql/select_distinct.sql
+++ b/src/test/regress/sql/select_distinct.sql
@@ -51,10 +51,10 @@ SELECT count(*) FROM
 --
 
 CREATE TEMP TABLE disttable (f1 integer);
-INSERT INTO DISTTABLE VALUES(1);
-INSERT INTO DISTTABLE VALUES(2);
-INSERT INTO DISTTABLE VALUES(3);
-INSERT INTO DISTTABLE VALUES(NULL);
+INSERT INTO disttable VALUES(1);
+INSERT INTO disttable VALUES(2);
+INSERT INTO disttable VALUES(3);
+INSERT INTO disttable VALUES(NULL);
 
 -- basic cases
 SELECT f1, f1 IS DISTINCT FROM 2 as "not 2" FROM disttable;
diff --git a/src/test/regress/sql/sequence.sql b/src/test/regress/sql/sequence.sql
index 98a2e7d..da0b9f8 100644
--- a/src/test/regress/sql/sequence.sql
+++ b/src/test/regress/sql/sequence.sql
@@ -2,54 +2,54 @@
 --- test creation of SERIAL column
 ---
 
-CREATE TABLE serialTest (f1 text, f2 serial);
+CREATE TABLE serialtest (f1 text, f2 serial);
 
-INSERT INTO serialTest VALUES ('foo');
-INSERT INTO serialTest VALUES ('bar');
-INSERT INTO serialTest VALUES ('force', 100);
-INSERT INTO serialTest VALUES ('wrong', NULL);
+INSERT INTO serialtest VALUES ('foo');
+INSERT INTO serialtest VALUES ('bar');
+INSERT INTO serialtest VALUES ('force', 100);
+INSERT INTO serialtest VALUES ('wrong', NULL);
 
-SELECT * FROM serialTest;
+SELECT * FROM serialtest;
 
 -- test smallserial / bigserial
-CREATE TABLE serialTest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
+CREATE TABLE serialtest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
   f5 bigserial, f6 serial8);
 
-INSERT INTO serialTest2 (f1)
+INSERT INTO serialtest2 (f1)
   VALUES ('test_defaults');
 
-INSERT INTO serialTest2 (f1, f2, f3, f4, f5, f6)
+INSERT INTO serialtest2 (f1, f2, f3, f4, f5, f6)
   VALUES ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807,
           9223372036854775807),
          ('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808,
           -9223372036854775808);
 
 -- All these INSERTs should fail:
-INSERT INTO serialTest2 (f1, f3)
+INSERT INTO serialtest2 (f1, f3)
   VALUES ('bogus', -32769);
 
-INSERT INTO serialTest2 (f1, f4)
+INSERT INTO serialtest2 (f1, f4)
   VALUES ('bogus', -32769);
 
-INSERT INTO serialTest2 (f1, f3)
+INSERT INTO serialtest2 (f1, f3)
   VALUES ('bogus', 32768);
 
-INSERT INTO serialTest2 (f1, f4)
+INSERT INTO serialtest2 (f1, f4)
   VALUES ('bogus', 32768);
 
-INSERT INTO serialTest2 (f1, f5)
+INSERT INTO serialtest2 (f1, f5)
   VALUES ('bogus', -9223372036854775809);
 
-INSERT INTO serialTest2 (f1, f6)
+INSERT INTO serialtest2 (f1, f6)
   VALUES ('bogus', -9223372036854775809);
 
-INSERT INTO serialTest2 (f1, f5)
+INSERT INTO serialtest2 (f1, f5)
   VALUES ('bogus', 9223372036854775808);
 
-INSERT INTO serialTest2 (f1, f6)
+INSERT INTO serialtest2 (f1, f6)
   VALUES ('bogus', 9223372036854775808);
 
-SELECT * FROM serialTest2 ORDER BY f2 ASC;
+SELECT * FROM serialtest2 ORDER BY f2 ASC;
 
 SELECT nextval('serialTest2_f2_seq');
 SELECT nextval('serialTest2_f3_seq');
@@ -89,8 +89,8 @@ DROP SEQUENCE foo_seq_new;
 
 -- renaming serial sequences
 ALTER TABLE serialtest_f2_seq RENAME TO serialtest_f2_foo;
-INSERT INTO serialTest VALUES ('more');
-SELECT * FROM serialTest;
+INSERT INTO serialtest VALUES ('more');
+SELECT * FROM serialtest;
 
 --
 -- Check dependencies of serial and ordinary sequences
@@ -252,7 +252,7 @@ SELECT lastval();
 ROLLBACK;
 
 -- Sequences should get wiped out as well:
-DROP TABLE serialTest, serialTest2;
+DROP TABLE serialtest, serialtest2;
 
 -- Make sure sequences are gone:
 SELECT * FROM information_schema.sequences WHERE sequence_name IN
diff --git a/src/test/regress/sql/strings.sql b/src/test/regress/sql/strings.sql
index f9cfaeb..ddf32ca 100644
--- a/src/test/regress/sql/strings.sql
+++ b/src/test/regress/sql/strings.sql
@@ -76,16 +76,16 @@ SELECT CAST(f1 AS text) AS "text(varchar)" FROM VARCHAR_TBL;
 SELECT CAST(name 'namefield' AS text) AS "text(name)";
 
 -- since this is an explicit cast, it should truncate w/o error:
-SELECT CAST(f1 AS char(10)) AS "char(text)" FROM TEXT_TBL;
+SELECT CAST(f1 AS char(10)) AS "char(text)" FROM text_tbl;
 -- note: implicit-cast case is tested in char.sql
 
-SELECT CAST(f1 AS char(20)) AS "char(text)" FROM TEXT_TBL;
+SELECT CAST(f1 AS char(20)) AS "char(text)" FROM text_tbl;
 
 SELECT CAST(f1 AS char(10)) AS "char(varchar)" FROM VARCHAR_TBL;
 
 SELECT CAST(name 'namefield' AS char(10)) AS "char(name)";
 
-SELECT CAST(f1 AS varchar) AS "varchar(text)" FROM TEXT_TBL;
+SELECT CAST(f1 AS varchar) AS "varchar(text)" FROM text_tbl;
 
 SELECT CAST(f1 AS varchar) AS "varchar(char)" FROM CHAR_TBL;
 
diff --git a/src/test/regress/sql/subselect.sql b/src/test/regress/sql/subselect.sql
index 6e81ffe..d08ed1e 100644
--- a/src/test/regress/sql/subselect.sql
+++ b/src/test/regress/sql/subselect.sql
@@ -86,7 +86,7 @@ SELECT '' AS five, f1 AS "Correlated Field"
 
 SELECT '' AS eight, ss.f1 AS "Correlated Field", ss.f3 AS "Second Field"
   FROM SUBSELECT_TBL ss
-  WHERE f1 NOT IN (SELECT f1+1 FROM INT4_TBL
+  WHERE f1 NOT IN (SELECT f1+1 FROM int4_tbl
                    WHERE f1 != ss.f1 AND f1 < 2147483647);
 
 select q1, float8(count(*)) / (select count(*) from int8_tbl)
diff --git a/src/test/regress/sql/text.sql b/src/test/regress/sql/text.sql
index 60c15b5..5f986ee 100644
--- a/src/test/regress/sql/text.sql
+++ b/src/test/regress/sql/text.sql
@@ -6,12 +6,12 @@ SELECT text 'this is a text string' = text 'this is a text string' AS true;
 
 SELECT text 'this is a text string' = text 'this is a text strin' AS false;
 
-CREATE TABLE TEXT_TBL (f1 text);
+CREATE TABLE text_tbl (f1 text);
 
-INSERT INTO TEXT_TBL VALUES ('doh!');
-INSERT INTO TEXT_TBL VALUES ('hi de ho neighbor');
+INSERT INTO text_tbl VALUES ('doh!');
+INSERT INTO text_tbl VALUES ('hi de ho neighbor');
 
-SELECT '' AS two, * FROM TEXT_TBL;
+SELECT '' AS two, * FROM text_tbl;
 
 -- As of 8.3 we have removed most implicit casts to text, so that for example
 -- this no longer works:
diff --git a/src/test/regress/sql/timestamp.sql b/src/test/regress/sql/timestamp.sql
index b7957cb..31e3cb6 100644
--- a/src/test/regress/sql/timestamp.sql
+++ b/src/test/regress/sql/timestamp.sql
@@ -26,10 +26,10 @@ INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow');
 INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow EST');
 INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow zulu');
 
-SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today';
-SELECT count(*) AS Three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow';
-SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'yesterday';
-SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now';
+SELECT count(*) AS one FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today';
+SELECT count(*) AS three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow';
+SELECT count(*) AS one FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'yesterday';
+SELECT count(*) AS one FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now';
 
 COMMIT;
 
diff --git a/src/test/regress/sql/timestamptz.sql b/src/test/regress/sql/timestamptz.sql
index ab86622..e0fb1ac 100644
--- a/src/test/regress/sql/timestamptz.sql
+++ b/src/test/regress/sql/timestamptz.sql
@@ -25,10 +25,10 @@ INSERT INTO TIMESTAMPTZ_TBL VALUES ('tomorrow');
 INSERT INTO TIMESTAMPTZ_TBL VALUES ('tomorrow EST');
 INSERT INTO TIMESTAMPTZ_TBL VALUES ('tomorrow zulu');
 
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'today';
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow';
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'yesterday';
-SELECT count(*) AS One FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp(2) with time zone 'now';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'today';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'tomorrow';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp with time zone 'yesterday';
+SELECT count(*) AS one FROM TIMESTAMPTZ_TBL WHERE d1 = timestamp(2) with time zone 'now';
 
 COMMIT;
 
diff --git a/src/test/regress/sql/union.sql b/src/test/regress/sql/union.sql
index 9ff1551..9a645a5 100644
--- a/src/test/regress/sql/union.sql
+++ b/src/test/regress/sql/union.sql
@@ -44,28 +44,28 @@ SELECT 1.1 AS two UNION (SELECT 2 UNION ALL SELECT 2);
 -- Try testing from tables...
 --
 
-SELECT f1 AS five FROM FLOAT8_TBL
+SELECT f1 AS five FROM float8_tbl
 UNION
-SELECT f1 FROM FLOAT8_TBL
+SELECT f1 FROM float8_tbl
 ORDER BY 1;
 
-SELECT f1 AS ten FROM FLOAT8_TBL
+SELECT f1 AS ten FROM float8_tbl
 UNION ALL
-SELECT f1 FROM FLOAT8_TBL;
+SELECT f1 FROM float8_tbl;
 
-SELECT f1 AS nine FROM FLOAT8_TBL
+SELECT f1 AS nine FROM float8_tbl
 UNION
-SELECT f1 FROM INT4_TBL
+SELECT f1 FROM int4_tbl
 ORDER BY 1;
 
-SELECT f1 AS ten FROM FLOAT8_TBL
+SELECT f1 AS ten FROM float8_tbl
 UNION ALL
-SELECT f1 FROM INT4_TBL;
+SELECT f1 FROM int4_tbl;
 
-SELECT f1 AS five FROM FLOAT8_TBL
+SELECT f1 AS five FROM float8_tbl
   WHERE f1 BETWEEN -1e6 AND 1e6
 UNION
-SELECT f1 FROM INT4_TBL
+SELECT f1 FROM int4_tbl
   WHERE f1 BETWEEN 0 AND 1000000;
 
 SELECT CAST(f1 AS char(4)) AS three FROM VARCHAR_TBL
@@ -82,7 +82,7 @@ SELECT f1 AS eight FROM VARCHAR_TBL
 UNION ALL
 SELECT f1 FROM CHAR_TBL;
 
-SELECT f1 AS five FROM TEXT_TBL
+SELECT f1 AS five FROM text_tbl
 UNION
 SELECT f1 FROM VARCHAR_TBL
 UNION
@@ -161,9 +161,9 @@ SELECT q1 FROM int8_tbl EXCEPT (((SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1)))
 -- usage has worked, so test we don't break it.
 --
 
-SELECT a.f1 FROM (SELECT 'test' AS f1 FROM varchar_tbl) a
+SELECT a.f1 FROM (SELECT 'test' AS f1 FROM VARCHAR_TBL) a
 UNION
-SELECT b.f1 FROM (SELECT f1 FROM varchar_tbl) b
+SELECT b.f1 FROM (SELECT f1 FROM VARCHAR_TBL) b
 ORDER BY 1;
 
 -- This should fail, but it should produce an error cursor
diff --git a/src/test/regress/sql/uuid.sql b/src/test/regress/sql/uuid.sql
index 518d2b7..cd2f660 100644
--- a/src/test/regress/sql/uuid.sql
+++ b/src/test/regress/sql/uuid.sql
@@ -54,11 +54,11 @@ SELECT COUNT(*) FROM guid1 WHERE guid_field > '22222222-2222-2222-2222-222222222
 SELECT COUNT(*) FROM guid1 WHERE guid_field >= '22222222-2222-2222-2222-222222222222';
 
 -- btree and hash index creation test
-CREATE INDEX guid1_btree ON guid1 USING BTREE (guid_field);
-CREATE INDEX guid1_hash  ON guid1 USING HASH  (guid_field);
+CREATE INDEX guid1_btree ON guid1 USING btree (guid_field);
+CREATE INDEX guid1_hash  ON guid1 USING hash  (guid_field);
 
 -- unique index test
-CREATE UNIQUE INDEX guid1_unique_BTREE ON guid1 USING BTREE (guid_field);
+CREATE UNIQUE INDEX guid1_unique_btree ON guid1 USING btree (guid_field);
 -- should fail
 INSERT INTO guid1(guid_field) VALUES('11111111-1111-1111-1111-111111111111');
 
diff --git a/src/test/regress/sql/window.sql b/src/test/regress/sql/window.sql
index e2a1a1c..89dcb4f 100644
--- a/src/test/regress/sql/window.sql
+++ b/src/test/regress/sql/window.sql
@@ -394,7 +394,7 @@ FROM (VALUES
 	(2, 2, 'x'),
 	(3, 1, 'z')
 ) AS t(p, i, v)
-WINDOW wnd AS (PARTITION BY P ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
+WINDOW wnd AS (PARTITION BY p ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
 ORDER BY p, i;
 
 -- and again, but with filter
@@ -628,7 +628,7 @@ SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
 
 -- ensure aggregate over numeric properly recovers from NaN values
 SELECT a, b,
-       SUM(b) OVER(ORDER BY A ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
+       SUM(b) OVER(ORDER BY a ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
 FROM (VALUES(1,1::numeric),(2,2),(3,'NaN'),(4,3),(5,4)) t(a,b);
 
 -- It might be tempting for someone to add an inverse trans function for
