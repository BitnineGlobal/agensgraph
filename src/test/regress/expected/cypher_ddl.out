--
-- Cypher Query Language - DDL
--
-- setup
DROP ROLE IF EXISTS graph_role;
NOTICE:  role "graph_role" does not exist, skipping
CREATE ROLE graph_role SUPERUSER;
SET ROLE graph_role;
--
-- CREATE GRAPH
--
SHOW graph_path;
 graph_path 
------------
 
(1 row)

CREATE GRAPH g;
SHOW graph_path;
 graph_path 
------------
 g
(1 row)

CREATE GRAPH g;
ERROR:  graph "g" already exists
CREATE GRAPH IF NOT EXISTS g;
NOTICE:  graph "g" already exists, skipping
-- check default graph objects
\dGl
             List of labels
 Graph |   Name    |  Type  |   Owner    
-------+-----------+--------+------------
 g     | ag_edge   | edge   | graph_role
 g     | ag_vertex | vertex | graph_role
(2 rows)

--
-- ALTER GRAPH
--
CREATE ROLE temp;
ALTER GRAPH g RENAME TO p;
\dG
  List of graphs
 Name |   Owner    
------+------------
 p    | graph_role
(1 row)

ALTER GRAPH p RENAME TO g;
ALTER GRAPH g OWNER TO temp;
\dG
List of graphs
 Name | Owner 
------+-------
 g    | temp
(1 row)

ALTER GRAPH g OWNER TO graph_role;
-- ALTER GRAPH IF EXISTS is not supported
--
-- SET graph_path
--
SET graph_path = n;
ERROR:  invalid value for parameter "graph_path": "n"
DETAIL:  graph "n" does not exist.
SET graph_path = n, m;
ERROR:  SET graph_path takes only one argument
--
-- CREATE label
--
CREATE VLABEL v0;
CREATE VLABEL v00 INHERITS (v0);
CREATE VLABEL v01 INHERITS (v0);
CREATE VLABEL v1 INHERITS (v00, v01);
CREATE ELABEL e0;
CREATE ELABEL e01 INHERITS (e0);
CREATE ELABEL e1;
SELECT labname, labkind FROM pg_catalog.ag_label;
  labname  | labkind 
-----------+---------
 ag_vertex | v
 ag_edge   | e
 v0        | v
 v00       | v
 v01       | v
 v1        | v
 e0        | e
 e01       | e
 e1        | e
(9 rows)

SELECT child.labname AS child, parent.labname AS parent
FROM pg_catalog.ag_label AS parent,
     pg_catalog.ag_label AS child,
     pg_catalog.pg_inherits AS inh
WHERE child.relid = inh.inhrelid AND parent.relid = inh.inhparent
ORDER BY 1, 2;
 child |  parent   
-------+-----------
 e0    | ag_edge
 e01   | e0
 e1    | ag_edge
 v0    | ag_vertex
 v00   | v0
 v01   | v0
 v1    | v00
 v1    | v01
(8 rows)

-- IF NOT EXISTS
CREATE VLABEL v0;
ERROR:  label "v0" already exists
CREATE VLABEL IF NOT EXISTS v0;
NOTICE:  label "v0" already exists, skipping
CREATE ELABEL e0;
ERROR:  label "e0" already exists
CREATE ELABEL IF NOT EXISTS e0;
NOTICE:  label "e0" already exists, skipping
-- wrong cases
CREATE VLABEL wrong_parent INHERITS (e1);
ERROR:  parent graph label "e1" is not vertex label.
CREATE ELABEL wrong_parent INHERITS (v1);
ERROR:  parent graph label "v1" is not edge label.
-- CREATE UNLOGGED
CREATE UNLOGGED VLABEL unlog;
SELECT l.labname as name, c.relpersistence as persistence
FROM pg_catalog.ag_label l
     LEFT JOIN pg_catalog.pg_class c ON c.oid = l.relid
ORDER BY 1;
   name    | persistence 
-----------+-------------
 ag_edge   | p
 ag_vertex | p
 e0        | p
 e01       | p
 e1        | p
 unlog     | u
 v0        | p
 v00       | p
 v01       | p
 v1        | p
(10 rows)

-- WITH
CREATE VLABEL stor
WITH (fillfactor=90, autovacuum_enabled, autovacuum_vacuum_threshold=100);
SELECT l.labname as name, c.reloptions as options
FROM pg_catalog.ag_label l
     LEFT JOIN pg_catalog.pg_class c ON c.oid = l.relid
ORDER BY 1;
   name    |                                 options                                 
-----------+-------------------------------------------------------------------------
 ag_edge   | 
 ag_vertex | 
 e0        | 
 e01       | 
 e1        | 
 stor      | {fillfactor=90,autovacuum_enabled=true,autovacuum_vacuum_threshold=100}
 unlog     | 
 v0        | 
 v00       | 
 v01       | 
 v1        | 
(11 rows)

-- TABLESPACE
CREATE VLABEL tblspc TABLESPACE pg_default;
-- DISABLE INDEX
CREATE VLABEL vdi disable index;
\d g.vdi
                                                   Table "g.vdi"
   Column   |  Type   |                                         Modifiers                                          
------------+---------+--------------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(graph_labid('g.vdi'::cstring), nextval('g.vdi_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "vdi_pkey" PRIMARY KEY, btree (id) INVALID
Inherits: g.ag_vertex

-- REINDEX
REINDEX VLABEL vdi;
\d g.vdi
                                                   Table "g.vdi"
   Column   |  Type   |                                         Modifiers                                          
------------+---------+--------------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(graph_labid('g.vdi'::cstring), nextval('g.vdi_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "vdi_pkey" PRIMARY KEY, btree (id)
Inherits: g.ag_vertex

-- REINDEX wrong case
REINDEX ELABEL vdi;
ERROR:  REINDEX ELABEL cannot REINDEX vertex label
REINDEX VLABEL g.vdi;
ERROR:  syntax error at or near "."
LINE 1: REINDEX VLABEL g.vdi;
                        ^
-- check default attstattarget of edge label
SELECT attname, attstattarget FROM pg_attribute
WHERE attrelid = 'g.e1'::regclass;
  attname   | attstattarget 
------------+---------------
 tableoid   |             0
 cmax       |             0
 xmax       |             0
 cmin       |             0
 xmin       |             0
 ctid       |             0
 id         |            -1
 start      |         10000
 end        |         10000
 properties |            -1
(10 rows)

--
-- COMMENT and \dG commands
--
COMMENT ON GRAPH g IS 'a graph for regression tests';
COMMENT ON VLABEL v1 IS 'multiple inheritance test';
\dG+
                            List of graphs
 Name |   Owner    | Access privileges |         Description          
------+------------+-------------------+------------------------------
 g    | graph_role |                   | a graph for regression tests
(1 row)

\dGv+
                                   List of labels
 Graph |   Name    |  Type  |   Owner    |    Size    |         Description          
-------+-----------+--------+------------+------------+------------------------------
 g     | ag_vertex | vertex | graph_role | 8192 bytes | base vertex label of graph g
 g     | stor      | vertex | graph_role | 8192 bytes | 
 g     | tblspc    | vertex | graph_role | 8192 bytes | 
 g     | unlog     | vertex | graph_role | 16 kB      | 
 g     | v0        | vertex | graph_role | 8192 bytes | 
 g     | v00       | vertex | graph_role | 8192 bytes | 
 g     | v01       | vertex | graph_role | 8192 bytes | 
 g     | v1        | vertex | graph_role | 8192 bytes | multiple inheritance test
 g     | vdi       | vertex | graph_role | 8192 bytes | 
(9 rows)

Vertex label "g.ag_vertex"
--
Child labels: g.stor,
              g.tblspc,
              g.unlog,
              g.v0,
              g.vdi

Vertex label "g.stor"
--
Inherits: g.ag_vertex

Vertex label "g.tblspc"
--
Inherits: g.ag_vertex

Vertex label "g.unlog"
--
Inherits: g.ag_vertex

Vertex label "g.v0"
--
Inherits: g.ag_vertex
Child labels: g.v00,
              g.v01

Vertex label "g.v00"
--
Inherits: g.v0
Child labels: g.v1

Vertex label "g.v01"
--
Inherits: g.v0
Child labels: g.v1

Vertex label "g.v1"
--
Inherits: g.v00,
          g.v01

Vertex label "g.vdi"
--
Inherits: g.ag_vertex

\dGe+
                                List of labels
 Graph |  Name   | Type |   Owner    |    Size    |        Description         
-------+---------+------+------------+------------+----------------------------
 g     | ag_edge | edge | graph_role | 8192 bytes | base edge label of graph g
 g     | e0      | edge | graph_role | 8192 bytes | 
 g     | e01     | edge | graph_role | 8192 bytes | 
 g     | e1      | edge | graph_role | 8192 bytes | 
(4 rows)

Edge label "g.ag_edge"
--
Child labels: g.e0,
              g.e1

Edge label "g.e0"
--
Inherits: g.ag_edge
Child labels: g.e01

Edge label "g.e01"
--
Inherits: g.e0

Edge label "g.e1"
--
Inherits: g.ag_edge

--
-- ALTER LABEL
--
-- skip alter tablespace test, tablespace location must be an absolute path
ALTER VLABEL v0 SET STORAGE external;
\d+ g.v0
                                                                      Table "g.v0"
   Column   |  Type   |                                        Modifiers                                         | Storage  | Stats target | Description 
------------+---------+------------------------------------------------------------------------------------------+----------+--------------+-------------
 id         | graphid | not null default graphid(graph_labid('g.v0'::cstring), nextval('g.v0_id_seq'::regclass)) | plain    |              | 
 properties | jsonb   | not null default jsonb_build_object()                                                    | external |              | 
Indexes:
    "v0_pkey" PRIMARY KEY, btree (id)
Inherits: g.ag_vertex
Child tables: g.v00,
              g.v01

ALTER VLABEL v0 RENAME TO vv;
\dGv
             List of labels
 Graph |   Name    |  Type  |   Owner    
-------+-----------+--------+------------
 g     | ag_vertex | vertex | graph_role
 g     | stor      | vertex | graph_role
 g     | tblspc    | vertex | graph_role
 g     | unlog     | vertex | graph_role
 g     | v00       | vertex | graph_role
 g     | v01       | vertex | graph_role
 g     | v1        | vertex | graph_role
 g     | vdi       | vertex | graph_role
 g     | vv        | vertex | graph_role
(9 rows)

Vertex label "g.ag_vertex"
--
Child labels: g.stor,
              g.tblspc,
              g.unlog,
              g.vdi,
              g.vv

Vertex label "g.stor"
--
Inherits: g.ag_vertex

Vertex label "g.tblspc"
--
Inherits: g.ag_vertex

Vertex label "g.unlog"
--
Inherits: g.ag_vertex

Vertex label "g.v00"
--
Inherits: g.vv
Child labels: g.v1

Vertex label "g.v01"
--
Inherits: g.vv
Child labels: g.v1

Vertex label "g.v1"
--
Inherits: g.v00,
          g.v01

Vertex label "g.vdi"
--
Inherits: g.ag_vertex

Vertex label "g.vv"
--
Inherits: g.ag_vertex
Child labels: g.v00,
              g.v01

ALTER VLABEL vv RENAME TO v0;
SELECT relname, rolname FROM pg_class c, pg_roles r
WHERE relname='v0' AND c.relowner = r.oid;
 relname |  rolname   
---------+------------
 v0      | graph_role
(1 row)

ALTER VLABEL v0 owner TO temp;
SELECT relname, rolname FROM pg_class c, pg_roles r
WHERE relname='v0' AND c.relowner = r.oid;
 relname | rolname 
---------+---------
 v0      | temp
(1 row)

ALTER VLABEL v0 owner TO graph_role;
DROP ROLE temp;
SELECT indisclustered FROM pg_index WHERE indrelid = 'g.v0'::regclass;
 indisclustered 
----------------
 f
(1 row)

ALTER VLABEL v0 CLUSTER ON v0_pkey;
SELECT indisclustered FROM pg_index WHERE indrelid = 'g.v0'::regclass ORDER BY indexrelid;
 indisclustered 
----------------
 t
(1 row)

ALTER VLABEL v0 SET WITHOUT CLUSTER;
SELECT indisclustered FROM pg_index WHERE indrelid = 'g.v0'::regclass;
 indisclustered 
----------------
 f
(1 row)

SELECT relpersistence FROM pg_class WHERE relname = 'v0';
 relpersistence 
----------------
 p
(1 row)

ALTER VLABEL v0 SET UNLOGGED;
SELECT relpersistence FROM pg_class WHERE relname = 'v0';
 relpersistence 
----------------
 u
(1 row)

ALTER VLABEL v0 SET LOGGED;
SELECT relpersistence FROM pg_class WHERE relname = 'v0';
 relpersistence 
----------------
 p
(1 row)

\d g.v1
                                                  Table "g.v1"
   Column   |  Type   |                                        Modifiers                                         
------------+---------+------------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(graph_labid('g.v1'::cstring), nextval('g.v1_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "v1_pkey" PRIMARY KEY, btree (id)
Inherits: g.v00,
          g.v01

ALTER VLABEL v1 NO INHERIT v00;
\d g.v1
                                                  Table "g.v1"
   Column   |  Type   |                                        Modifiers                                         
------------+---------+------------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(graph_labid('g.v1'::cstring), nextval('g.v1_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "v1_pkey" PRIMARY KEY, btree (id)
Inherits: g.v01

ALTER VLABEL v1 INHERIT v00;
\d g.v1
                                                  Table "g.v1"
   Column   |  Type   |                                        Modifiers                                         
------------+---------+------------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(graph_labid('g.v1'::cstring), nextval('g.v1_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "v1_pkey" PRIMARY KEY, btree (id)
Inherits: g.v01,
          g.v00

ALTER VLABEL v1 INHERIT ag_vertex;		--should fail
ERROR:  cannot ALTER inheritance with base label
ALTER VLABEL v1 NO INHERIT ag_vertex;	--should fail
ERROR:  cannot ALTER inheritance with base label
SELECT relreplident FROM pg_class WHERE relname = 'v0';
 relreplident 
--------------
 d
(1 row)

ALTER VLABEL v0 REPLICA IDENTITY full;
SELECT relreplident FROM pg_class WHERE relname = 'v0';
 relreplident 
--------------
 f
(1 row)

ALTER VLABEL v0 REPLICA IDENTITY default;
ALTER VLABEL vdi disable index;
\d g.vdi
                                                   Table "g.vdi"
   Column   |  Type   |                                         Modifiers                                          
------------+---------+--------------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(graph_labid('g.vdi'::cstring), nextval('g.vdi_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "vdi_pkey" PRIMARY KEY, btree (id) INVALID
Inherits: g.ag_vertex

-- IF EXISTS
ALTER VLABEL IF EXISTS v0 SET LOGGED;
ALTER VLABEL IF EXISTS unknown SET LOGGED;
NOTICE:  graph label "unknown" does not exist, skipping
--
-- DROP LABEL
--
-- wrong cases
DROP TABLE g.v1;
ERROR:  cannot drop table g.v1 because label v1 requires it
HINT:  You can drop label v1 instead.
DROP TABLE g.e1;
ERROR:  cannot drop table g.e1 because label e1 requires it
HINT:  You can drop label e1 instead.
DROP VLABEL unknown;
ERROR:  graph label "unknown" does not exist
DROP ELABEL unknown;
ERROR:  graph label "unknown" does not exist
DROP VLABEL IF EXISTS unknown;
NOTICE:  vlabel "unknown" does not exist, skipping
DROP ELABEL IF EXISTS unknown;
NOTICE:  elabel "unknown" does not exist, skipping
DROP VLABEL e1;
ERROR:  DROP VLABEL cannot DROP edge label
DROP ELABEL v1;
ERROR:  DROP ELABEL cannot DROP vertex label
DROP VLABEL IF EXISTS e1;
ERROR:  DROP VLABEL cannot DROP edge label
DROP ELABEL IF EXISTS v1;
ERROR:  DROP ELABEL cannot DROP vertex label
DROP VLABEL v0;
ERROR:  cannot drop label v0 because other objects depend on it
DETAIL:  label v00 depends on label v0
label v01 depends on label v0
label v1 depends on label v01
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VLABEL v00;
ERROR:  cannot drop label v00 because other objects depend on it
DETAIL:  label v1 depends on label v00
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP ELABEL e0;
ERROR:  cannot drop label e0 because other objects depend on it
DETAIL:  label e01 depends on label e0
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VLABEL ag_vertex CASCADE;
ERROR:  DROP base vertex label is prohibited
DROP ELABEL ag_edge CASCADE;
ERROR:  DROP base edge label is prohibited
-- drop all
DROP VLABEL v01 CASCADE;
NOTICE:  drop cascades to label v1
SELECT labname, labkind FROM pg_catalog.ag_label ORDER BY 2, 1;
  labname  | labkind 
-----------+---------
 ag_edge   | e
 e0        | e
 e01       | e
 e1        | e
 ag_vertex | v
 stor      | v
 tblspc    | v
 unlog     | v
 v0        | v
 v00       | v
 vdi       | v
(11 rows)

DROP VLABEL v0 CASCADE;
NOTICE:  drop cascades to label v00
DROP ELABEL e0 CASCADE;
NOTICE:  drop cascades to label e01
DROP ELABEL e1;
SELECT labname, labkind FROM pg_catalog.ag_label;
  labname  | labkind 
-----------+---------
 ag_vertex | v
 ag_edge   | e
 unlog     | v
 stor      | v
 tblspc    | v
 vdi       | v
(6 rows)

--
-- CONSTRAINT
--
\set VERBOSITY terse
-- simple unique constraint
CREATE VLABEL regv1;
CREATE CONSTRAINT ON regv1 ASSERT a.b IS UNIQUE;
\dGv+ regv1
                         List of labels
 Graph | Name  |  Type  |   Owner    |    Size    | Description 
-------+-------+--------+------------+------------+-------------
 g     | regv1 | vertex | graph_role | 8192 bytes | 
(1 row)

Vertex label "g.regv1"
--
Constraints:
    "regv1_unique_constraint" UNIQUE USING btree (a.b)
Inherits: g.ag_vertex

CREATE (:regv1 {'a':{'b':'agens', 'c':'graph'}});
CREATE (:regv1 {'a':{'b':'agens', 'c':'graph'}});
ERROR:  conflicting key value violates exclusion constraint "regv1_unique_constraint"
CREATE (:regv1 {'a':{'b':'agens'}});
ERROR:  conflicting key value violates exclusion constraint "regv1_unique_constraint"
CREATE (:regv1 {'a':{'b':'c'}});
CREATE (:regv1 {'a':'b'});
CREATE (:regv1 {'a':'agens-graph'});
DROP VLABEL regv1;
-- expr unique constraint
CREATE ELABEL rege1;
CREATE CONSTRAINT ON rege1 ASSERT c || d IS UNIQUE;
\dGe+ rege1
                        List of labels
 Graph | Name  | Type |   Owner    |    Size    | Description 
-------+-------+------+------------+------------+-------------
 g     | rege1 | edge | graph_role | 8192 bytes | 
(1 row)

Edge label "g.rege1"
--
Constraints:
    "rege1_unique_constraint" UNIQUE USING btree ((c) || (d))
Inherits: g.ag_edge

CREATE ()-[:rege1 {'c':'agens', 'd':'graph'}]->();
CREATE ()-[:rege1 {'c':'agens', 'd':'graph'}]->();
ERROR:  conflicting key value violates exclusion constraint "rege1_unique_constraint"
CREATE ()-[:rege1 {'c':'agens', 'd':'rdb'}]->();
CREATE ()-[:rege1 {'c':'agen', 'd':'sgraph'}]->();
ERROR:  conflicting key value violates exclusion constraint "rege1_unique_constraint"
DROP ELABEL rege1;
-- simple not null constraint
CREATE VLABEL regv2;
CREATE CONSTRAINT ON regv2 ASSERT name IS NOT NULL;
\dGv+ regv2
                         List of labels
 Graph | Name  |  Type  |   Owner    |    Size    | Description 
-------+-------+--------+------------+------------+-------------
 g     | regv2 | vertex | graph_role | 8192 bytes | 
(1 row)

Vertex label "g.regv2"
--
Constraints:
    "regv2_properties_check" CHECK ((name) IS NOT NULL)
Inherits: g.ag_vertex

CREATE (:regv2 {'name':'agens'});
CREATE (:regv2 {'age':'0'});
ERROR:  new row for relation "regv2" violates check constraint "regv2_properties_check"
CREATE (:regv2 {'age':'0', 'name':'graph'});
CREATE (:regv2 {'name':NULL});
ERROR:  new row for relation "regv2" violates check constraint "regv2_properties_check"
DROP VLABEL regv2;
-- multi not null constraint
CREATE VLABEL regv3;
CREATE CONSTRAINT ON regv3 ASSERT (name.first, name.last) IS NOT NULL;
\dGv+ regv3
                         List of labels
 Graph | Name  |  Type  |   Owner    |    Size    | Description 
-------+-------+--------+------------+------------+-------------
 g     | regv3 | vertex | graph_role | 8192 bytes | 
(1 row)

Vertex label "g.regv3"
--
Constraints:
    "regv3_properties_check" CHECK (ROW(name.first, name.last) IS NOT NULL)
Inherits: g.ag_vertex

CREATE (:regv3 {'name':'agens'});
ERROR:  new row for relation "regv3" violates check constraint "regv3_properties_check"
CREATE (:regv3 {'name':{'first':'agens', 'last':'graph'}});
CREATE (:regv3 {'name':{'first':'agens'}});
ERROR:  new row for relation "regv3" violates check constraint "regv3_properties_check"
CREATE (:regv3 {'name':{'last':'graph'}});
ERROR:  new row for relation "regv3" violates check constraint "regv3_properties_check"
CREATE (:regv3 {'name':{'first':NULL, 'last':NULL}});
ERROR:  new row for relation "regv3" violates check constraint "regv3_properties_check"
DROP VLABEL regv3;
-- simple check constraint
CREATE ELABEL rege2;
CREATE CONSTRAINT ON rege2 ASSERT a != b;
\dGe+ rege2
                        List of labels
 Graph | Name  | Type |   Owner    |    Size    | Description 
-------+-------+------+------------+------------+-------------
 g     | rege2 | edge | graph_role | 8192 bytes | 
(1 row)

Edge label "g.rege2"
--
Constraints:
    "rege2_properties_check" CHECK ((a) <> (b))
Inherits: g.ag_edge

CREATE ()-[:rege2 {'a':'agens', 'b':'graph'}]->();
CREATE ()-[:rege2 {'a':'agens', 'b':'agens'}]->();
ERROR:  new row for relation "rege2" violates check constraint "rege2_properties_check"
CREATE ()-[:rege2 {'a':'agens', 'b':'AGENS'}]->();
CREATE ()-[:rege2 {'a':'agens', 'd':'graph'}]->();
DROP ELABEL rege2;
-- expression check constraint
CREATE VLABEL regv4;
CREATE CONSTRAINT ON regv4 ASSERT (length(password) > 8 AND length(password) < 16);
\dGv+ regv4
                         List of labels
 Graph | Name  |  Type  |   Owner    |    Size    | Description 
-------+-------+--------+------------+------------+-------------
 g     | regv4 | vertex | graph_role | 8192 bytes | 
(1 row)

Vertex label "g.regv4"
--
Constraints:
    "regv4_properties_check" CHECK (length(password) > 8 AND length(password) < 16)
Inherits: g.ag_vertex

CREATE (:regv4 {'password':'12345678'});
ERROR:  new row for relation "regv4" violates check constraint "regv4_properties_check"
CREATE (:regv4 {'password':'123456789'});
CREATE (:regv4 {'password':'123456789012345'});
CREATE (:regv4 {'password':'1234567890123456'});
ERROR:  new row for relation "regv4" violates check constraint "regv4_properties_check"
DROP VLABEL regv4;
-- IN check constraint
CREATE ELABEL rege3;
CREATE CONSTRAINT ON rege3 ASSERT type IN ('friend','lover','parent');
\dGe+ rege3
                        List of labels
 Graph | Name  | Type |   Owner    |    Size    | Description 
-------+-------+------+------------+------------+-------------
 g     | rege3 | edge | graph_role | 8192 bytes | 
(1 row)

Edge label "g.rege3"
--
Constraints:
    "rege3_properties_check" CHECK ((type) = ANY (ARRAY['friend'::text, 'lover'::text, 'parent'::text]))
Inherits: g.ag_edge

CREATE ()-[:rege3 {'type':'friend', 'name':'agens'}]->();
CREATE ()-[:rege3 {'type':'love', 'name':'graph'}]->();
ERROR:  new row for relation "rege3" violates check constraint "rege3_properties_check"
CREATE ()-[:rege3 {'type':'parents', 'name':'AGENS'}]->();
ERROR:  new row for relation "rege3" violates check constraint "rege3_properties_check"
CREATE ()-[:rege3 {'type':'lover', 'name':'GRAPH'}]->();
DROP ELABEL rege3;
-- case check constraint
CREATE VLABEL regv5;
CREATE CONSTRAINT ON regv5 ASSERT lower(btrim(id)) IS UNIQUE;
\dGv+ regv5
                         List of labels
 Graph | Name  |  Type  |   Owner    |    Size    | Description 
-------+-------+--------+------------+------------+-------------
 g     | regv5 | vertex | graph_role | 8192 bytes | 
(1 row)

Vertex label "g.regv5"
--
Constraints:
    "regv5_unique_constraint" UNIQUE USING btree (lower(btrim(id)))
Inherits: g.ag_vertex

CREATE (:regv5 {'id':'agens'});
CREATE (:regv5 {'id':' agens'});
ERROR:  conflicting key value violates exclusion constraint "regv5_unique_constraint"
CREATE (:regv5 {'id':'agens '});
ERROR:  conflicting key value violates exclusion constraint "regv5_unique_constraint"
CREATE (:regv5 {'id':'AGENS'});
ERROR:  conflicting key value violates exclusion constraint "regv5_unique_constraint"
CREATE (:regv5 {'id':' AGENS '});
ERROR:  conflicting key value violates exclusion constraint "regv5_unique_constraint"
CREATE (:regv5 {'id':'GRAPH'});
CREATE (:regv5 {'id':' graph '});
ERROR:  conflicting key value violates exclusion constraint "regv5_unique_constraint"
DROP VLABEL regv5;
-- typecast check constraint
CREATE VLABEL regv6;
CREATE CONSTRAINT ON regv6 ASSERT age::int > 0 AND age::int < 128;
\dGv+ regv6
                         List of labels
 Graph | Name  |  Type  |   Owner    |    Size    | Description 
-------+-------+--------+------------+------------+-------------
 g     | regv6 | vertex | graph_role | 8192 bytes | 
(1 row)

Vertex label "g.regv6"
--
Constraints:
    "regv6_properties_check" CHECK (((age)::integer) > 0 AND ((age)::integer) < 128)
Inherits: g.ag_vertex

CREATE (:regv6 {'age':'0'});
ERROR:  new row for relation "regv6" violates check constraint "regv6_properties_check"
CREATE (:regv6 {'age':'1'});
CREATE (:regv6 {'age':'127'});
CREATE (:regv6 {'age':'128'});
ERROR:  new row for relation "regv6" violates check constraint "regv6_properties_check"
CREATE (:regv6 {'age':'-10'});
ERROR:  new row for relation "regv6" violates check constraint "regv6_properties_check"
CREATE (:regv6 {'age':1 + 1});
CREATE (:regv6 {'age':1 + 127});
ERROR:  new row for relation "regv6" violates check constraint "regv6_properties_check"
DROP VLABEL regv6;
-- IS NULL constraint
CREATE ELABEL rege4;
CREATE CONSTRAINT rege4_name_isnull_constraint ON rege4 ASSERT id IS NULL;
\dGe+ rege4
                        List of labels
 Graph | Name  | Type |   Owner    |    Size    | Description 
-------+-------+------+------------+------------+-------------
 g     | rege4 | edge | graph_role | 8192 bytes | 
(1 row)

Edge label "g.rege4"
--
Constraints:
    "rege4_name_isnull_constraint" CHECK ((id) IS NULL)
Inherits: g.ag_edge

CREATE ()-[:rege4 {'id':NULL, 'name':'agens'}]->();
CREATE ()-[:rege4 {'id':10, 'name':'agens'}]->();
ERROR:  new row for relation "rege4" violates check constraint "rege4_name_isnull_constraint"
CREATE ()-[:rege4 {'name':'graph'}]->();
DROP CONSTRAINT rege4_name_isnull_constraint ON ag_edge;
ERROR:  constraint "rege4_name_isnull_constraint" of relation "ag_edge" does not exist
DROP CONSTRAINT ON rege4;
ERROR:  syntax error at or near "ON" at character 17
DROP CONSTRAINT rege4_name_isnull_constraint ON rege4;
DROP ELABEL rege4;
-- Indirection constraint
CREATE VLABEL regv7;
CREATE CONSTRAINT ON regv7 ASSERT a.b[0].c IS NOT NULL;
\dGv+ regv7
                         List of labels
 Graph | Name  |  Type  |   Owner    |    Size    | Description 
-------+-------+--------+------------+------------+-------------
 g     | regv7 | vertex | graph_role | 8192 bytes | 
(1 row)

Vertex label "g.regv7"
--
Constraints:
    "regv7_properties_check" CHECK ((a.b[0].c) IS NOT NULL)
Inherits: g.ag_vertex

CREATE (:regv7 {'a':{'b':ARRAY[{'c':'d'},{'c':'e'}]}});
CREATE (:regv7 {'a':{'b':ARRAY[{'c':'d'},{'e':'e'}]}});
CREATE (:regv7 {'a':{'b':ARRAY[{'d':'d'},{'e':'e'}]}});
ERROR:  new row for relation "regv7" violates check constraint "regv7_properties_check"
DROP VLABEL regv7;
-- wrong case
CREATE VLABEL regv8;
CREATE CONSTRAINT ON regv8 ASSERT (select * from graph.regv8).c IS NOT NULL;
ERROR:  cannot use subquery in check constraint
CREATE CONSTRAINT ON regv8 ASSERT (1).c IS NOT NULL;
ERROR:  column notation .c applied to type integer, which is not a composite type
CREATE CONSTRAINT ON regv8 ASSERT ($1).c IS NOT NULL;
ERROR:  there is no parameter $1
DROP VLABEL regv8;
--
-- DROP GRAPH
--
DROP GRAPH g;
ERROR:  cannot drop graph g because other objects depend on it
DROP GRAPH g CASCADE;
NOTICE:  drop cascades to 7 other objects
SELECT labname, labkind FROM ag_label;
 labname | labkind 
---------+---------
(0 rows)

DROP GRAPH unknown;
ERROR:  graph "unknown" does not exist
DROP GRAPH IF EXISTS unknown;
NOTICE:  graph "unknown" does not exist, skipping
-- teardown
RESET ROLE;
DROP ROLE graph_role;
