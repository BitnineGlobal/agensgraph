--
-- Cypher Query Language - DDL
--
-- setup
DROP ROLE IF EXISTS graph_role;
NOTICE:  role "graph_role" does not exist, skipping
CREATE ROLE graph_role SUPERUSER;
SET ROLE graph_role;
--
-- CREATE GRAPH
--
SHOW graph_path;
 graph_path 
------------
 
(1 row)

CREATE GRAPH g;
SHOW graph_path;
 graph_path 
------------
 g
(1 row)

-- check default graph objects
SELECT graphname, labname, labkind FROM pg_catalog.ag_label;
 graphname |  labname  | labkind 
-----------+-----------+---------
 g         | ag_vertex | v
 g         | ag_edge   | e
(2 rows)

--
-- ALTER GRAPH
--
CREATE ROLE temp;
ALTER GRAPH g RENAME TO p;
\dG
  List of graphs
 Name |   Owner    
------+------------
 p    | graph_role
(1 row)

ALTER GRAPH p RENAME TO g;
ALTER GRAPH g OWNER TO temp;
\dG
List of graphs
 Name | Owner 
------+-------
 g    | temp
(1 row)

ALTER GRAPH g OWNER TO graph_role;
--
-- SET graph_path
--
SET graph_path = n;
ERROR:  invalid value for parameter "graph_path": "n"
DETAIL:  Graph "n" does not exist.
SET graph_path = n, m;
ERROR:  SET graph_path takes only one argument
--
-- CREATE label
--
CREATE VLABEL v0;
CREATE VLABEL v00 INHERITS (v0);
CREATE VLABEL v01 INHERITS (v0);
CREATE VLABEL v1 INHERITS (v00, v01);
CREATE ELABEL e0;
CREATE ELABEL e01 INHERITS (e0);
CREATE ELABEL e1;
SELECT labname, labkind FROM pg_catalog.ag_label;
  labname  | labkind 
-----------+---------
 ag_vertex | v
 ag_edge   | e
 v0        | v
 v00       | v
 v01       | v
 v1        | v
 e0        | e
 e01       | e
 e1        | e
(9 rows)

SELECT child.labname AS child, parent.labname AS parent
FROM pg_catalog.ag_label AS parent,
     pg_catalog.ag_label AS child,
     pg_catalog.pg_inherits AS inh
WHERE child.relid = inh.inhrelid AND parent.relid = inh.inhparent
ORDER BY 1, 2;
 child |  parent   
-------+-----------
 e0    | ag_edge
 e01   | e0
 e1    | ag_edge
 v0    | ag_vertex
 v00   | v0
 v01   | v0
 v1    | v00
 v1    | v01
(8 rows)

-- wrong cases
CREATE VLABEL wrong_parent INHERITS (e1);
ERROR:  invalid parent label with labkind 'e'
CREATE ELABEL wrong_parent INHERITS (v1);
ERROR:  invalid parent label with labkind 'v'
-- CREATE UNLOGGED
CREATE UNLOGGED VLABEL unlog;
SELECT l.labname as name, c.relpersistence as persistence
FROM pg_catalog.ag_label l
     LEFT JOIN pg_catalog.pg_class c ON c.oid = l.relid
ORDER BY 1;
   name    | persistence 
-----------+-------------
 ag_edge   | p
 ag_vertex | p
 e0        | p
 e01       | p
 e1        | p
 unlog     | u
 v0        | p
 v00       | p
 v01       | p
 v1        | p
(10 rows)

-- IF NOT EXISTS
CREATE VLABEL dup;
CREATE VLABEL dup;
ERROR:  label "dup" already exists
CREATE VLABEL IF NOT EXISTS dup;
NOTICE:  label "dup" already exists, skipping
-- WITH
CREATE VLABEL stor
WITH (fillfactor=90, autovacuum_enabled, autovacuum_vacuum_threshold=100);
SELECT l.labname as name, c.reloptions as options
FROM pg_catalog.ag_label l
     LEFT JOIN pg_catalog.pg_class c ON c.oid = l.relid
ORDER BY 1;
   name    |                                 options                                 
-----------+-------------------------------------------------------------------------
 ag_edge   | 
 ag_vertex | 
 dup       | 
 e0        | 
 e01       | 
 e1        | 
 stor      | {fillfactor=90,autovacuum_enabled=true,autovacuum_vacuum_threshold=100}
 unlog     | 
 v0        | 
 v00       | 
 v01       | 
 v1        | 
(12 rows)

-- TABLESPACE
CREATE VLABEL tblspc TABLESPACE pg_default;
--
-- COMMENT and \dG commands
--
COMMENT ON GRAPH g IS 'a graph for regression tests';
COMMENT ON VLABEL v1 IS 'multiple inheritance test';
\dG+
                            List of graphs
 Name |   Owner    | Access privileges |         Description          
------+------------+-------------------+------------------------------
 g    | graph_role |                   | a graph for regression tests
(1 row)

\dGv+
                                  List of labels
 Graph |   Name    |  Type  |   Owner    |    Size    |        Description        
-------+-----------+--------+------------+------------+---------------------------
 g     | ag_vertex | vertex | graph_role | 8192 bytes | base label of graph g
 g     | dup       | vertex | graph_role | 8192 bytes | 
 g     | stor      | vertex | graph_role | 8192 bytes | 
 g     | tblspc    | vertex | graph_role | 8192 bytes | 
 g     | unlog     | vertex | graph_role | 16 kB      | 
 g     | v0        | vertex | graph_role | 8192 bytes | 
 g     | v00       | vertex | graph_role | 8192 bytes | 
 g     | v01       | vertex | graph_role | 8192 bytes | 
 g     | v1        | vertex | graph_role | 8192 bytes | multiple inheritance test
(9 rows)

\dGe+
                              List of labels
 Graph |  Name   | Type |   Owner    |    Size    |      Description      
-------+---------+------+------------+------------+-----------------------
 g     | ag_edge | edge | graph_role | 8192 bytes | base label of graph g
 g     | e0      | edge | graph_role | 8192 bytes | 
 g     | e01     | edge | graph_role | 8192 bytes | 
 g     | e1      | edge | graph_role | 8192 bytes | 
(4 rows)

--
-- ALTER LABEL
--
-- skip alter tablespace test, tablespace location must be an absolute path
ALTER VLABEL v0 SET STORAGE external;
\d+ g.v0
                                                                    Table "g.v0"
   Column   |  Type   |                                      Modifiers                                      | Storage  | Stats target | Description 
------------+---------+-------------------------------------------------------------------------------------+----------+--------------+-------------
 id         | graphid | not null default graphid(('g.v0'::regclass)::oid, nextval('g.v0_id_seq'::regclass)) | plain    |              | 
 properties | jsonb   | not null default jsonb_build_object()                                               | external |              | 
Indexes:
    "v0_pkey" PRIMARY KEY, btree (id)
Inherits: g.ag_vertex
Child tables: g.v00,
              g.v01

ALTER VLABEL v0 RENAME TO vv;
\dGv
             List of labels
 Graph |   Name    |  Type  |   Owner    
-------+-----------+--------+------------
 g     | ag_vertex | vertex | graph_role
 g     | dup       | vertex | graph_role
 g     | stor      | vertex | graph_role
 g     | tblspc    | vertex | graph_role
 g     | unlog     | vertex | graph_role
 g     | v00       | vertex | graph_role
 g     | v01       | vertex | graph_role
 g     | v1        | vertex | graph_role
 g     | vv        | vertex | graph_role
(9 rows)

ALTER VLABEL vv RENAME TO v0;
SELECT relname, rolname FROM pg_class c, pg_roles r
WHERE relname='v0' AND c.relowner = r.oid;
 relname |  rolname   
---------+------------
 v0      | graph_role
(1 row)

ALTER VLABEL v0 owner TO temp;
SELECT relname, rolname FROM pg_class c, pg_roles r
WHERE relname='v0' AND c.relowner = r.oid;
 relname | rolname 
---------+---------
 v0      | temp
(1 row)

ALTER VLABEL v0 owner TO graph_role;
DROP ROLE temp;
SELECT indisclustered FROM pg_index WHERE indrelid = 'g.v0'::regclass;
 indisclustered 
----------------
 f
(1 row)

ALTER VLABEL v0 CLUSTER ON v0_pkey;
SELECT indisclustered FROM pg_index WHERE indrelid = 'g.v0'::regclass;
 indisclustered 
----------------
 t
(1 row)

ALTER VLABEL v0 SET WITHOUT CLUSTER;
SELECT indisclustered FROM pg_index WHERE indrelid = 'g.v0'::regclass;
 indisclustered 
----------------
 f
(1 row)

SELECT relpersistence FROM pg_class WHERE relname = 'v0';
 relpersistence 
----------------
 p
(1 row)

ALTER VLABEL v0 SET UNLOGGED;
SELECT relpersistence FROM pg_class WHERE relname = 'v0';
 relpersistence 
----------------
 u
(1 row)

ALTER VLABEL v0 SET LOGGED;
SELECT relpersistence FROM pg_class WHERE relname = 'v0';
 relpersistence 
----------------
 p
(1 row)

\d g.v1
                                                Table "g.v1"
   Column   |  Type   |                                      Modifiers                                      
------------+---------+-------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(('g.v1'::regclass)::oid, nextval('g.v1_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "v1_pkey" PRIMARY KEY, btree (id)
Inherits: g.v00,
          g.v01

ALTER VLABEL v1 NO INHERIT v00;
\d g.v1
                                                Table "g.v1"
   Column   |  Type   |                                      Modifiers                                      
------------+---------+-------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(('g.v1'::regclass)::oid, nextval('g.v1_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "v1_pkey" PRIMARY KEY, btree (id)
Inherits: g.v01

ALTER VLABEL v1 INHERIT v00;
\d g.v1
                                                Table "g.v1"
   Column   |  Type   |                                      Modifiers                                      
------------+---------+-------------------------------------------------------------------------------------
 id         | graphid | not null default graphid(('g.v1'::regclass)::oid, nextval('g.v1_id_seq'::regclass))
 properties | jsonb   | not null default jsonb_build_object()
Indexes:
    "v1_pkey" PRIMARY KEY, btree (id)
Inherits: g.v01,
          g.v00

ALTER VLABEL v1 INHERIT ag_vertex;		--should fail
ERROR:  cannot ALTER inheritance with base label
ALTER VLABEL v1 NO INHERIT ag_vertex;	--should fail
ERROR:  cannot ALTER inheritance with base label
SELECT relreplident FROM pg_class WHERE relname = 'v0';
 relreplident 
--------------
 d
(1 row)

ALTER VLABEL v0 REPLICA IDENTITY full;
SELECT relreplident FROM pg_class WHERE relname = 'v0';
 relreplident 
--------------
 f
(1 row)

ALTER VLABEL v0 REPLICA IDENTITY default;
--
-- DROP LABEL
--
-- wrong cases
DROP TABLE g.v1;
ERROR:  cannot drop table g.v1 because label v1 requires it
HINT:  You can drop label v1 instead.
DROP TABLE g.e1;
ERROR:  cannot drop table g.e1 because label e1 requires it
HINT:  You can drop label e1 instead.
DROP VLABEL unknown;
ERROR:  graph label "unknown" does not exist
DROP ELABEL unknown;
ERROR:  graph label "unknown" does not exist
DROP VLABEL e1;
ERROR:  DROP VLABEL cannot drop edge label
DROP ELABEL v1;
ERROR:  DROP ELABEL cannot drop vertex label
DROP VLABEL v0;
ERROR:  cannot drop label v0 because other objects depend on it
DETAIL:  label v00 depends on label v0
label v01 depends on label v0
label v1 depends on label v01
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VLABEL v00;
ERROR:  cannot drop label v00 because other objects depend on it
DETAIL:  label v1 depends on label v00
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP ELABEL e0;
ERROR:  cannot drop label e0 because other objects depend on it
DETAIL:  label e01 depends on label e0
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP VLABEL ag_vertex CASCADE;
ERROR:  cannot drop base vertex label
DROP ELABEL ag_edge CASCADE;
ERROR:  cannot drop base edge label
-- drop all
DROP VLABEL v01 CASCADE;
NOTICE:  drop cascades to label v1
SELECT labname, labkind FROM pg_catalog.ag_label ORDER BY 2, 1;
  labname  | labkind 
-----------+---------
 ag_edge   | e
 e0        | e
 e01       | e
 e1        | e
 ag_vertex | v
 dup       | v
 stor      | v
 tblspc    | v
 unlog     | v
 v0        | v
 v00       | v
(11 rows)

DROP VLABEL v0 CASCADE;
NOTICE:  drop cascades to label v00
DROP ELABEL e0 CASCADE;
NOTICE:  drop cascades to label e01
DROP ELABEL e1;
SELECT labname, labkind FROM pg_catalog.ag_label;
  labname  | labkind 
-----------+---------
 ag_vertex | v
 ag_edge   | e
 unlog     | v
 dup       | v
 stor      | v
 tblspc    | v
(6 rows)

--
-- DROP GRAPH
--
DROP GRAPH g;
ERROR:  cannot drop graph g because other objects depend on it
DETAIL:  label ag_vertex depends on schema g
label ag_edge depends on schema g
label unlog depends on schema g
label dup depends on schema g
label stor depends on schema g
label tblspc depends on schema g
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP GRAPH g CASCADE;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label unlog
drop cascades to label dup
drop cascades to label stor
drop cascades to label tblspc
SELECT labname, labkind FROM ag_label;
 labname | labkind 
---------+---------
(0 rows)

-- teardown
RESET ROLE;
DROP ROLE graph_role;
