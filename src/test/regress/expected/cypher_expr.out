--
-- Cypher Query Language - Expression
--
-- Set up
CREATE GRAPH test_cypher_expr;
SET graph_path = test_cypher_expr;
-- Numeric, string, and boolean literal
RETURN '"', '\"', '\\"', 17, true, false;
 ?column? | ?column? | ?column? | ?column? | bool | bool 
----------+----------+----------+----------+------+------
 "\""     | "\""     | "\\\""   | 17       | t    | f
(1 row)

-- Octal and hexadecimal literal
RETURN 021, 0x11, 0X11;
 ?column? | ?column? | ?column? 
----------+----------+----------
 17       | 17       | 17
(1 row)

-- List and map literal
RETURN [7, 7.0, '"list\nliteral\"', true, false, NULL, [0, 1, 2], {p: 'p'}];
                                ?column?                                 
-------------------------------------------------------------------------
 [7, 7.0, "\"list\nliteral\"", true, false, null, [0, 1, 2], {"p": "p"}]
(1 row)

RETURN {i: 7, r: 7.0, s: '"map\nliteral\"', t: true, f: false, 'z': NULL,
        '\n': '\n', l: [0, 1, 2], o: {p: 'p'}};
                                                     ?column?                                                     
------------------------------------------------------------------------------------------------------------------
 {"f": false, "i": 7, "l": [0, 1, 2], "o": {"p": "p"}, "r": 7.0, "s": "\"map\nliteral\"", "t": true, "\\n": "\n"}
(1 row)

-- String concatenation
RETURN '1' + '1', '1' + 1, 1 + '1';
 ?column? | ?column? | ?column? 
----------+----------+----------
 "11"     | "11"     | "11"
(1 row)

-- Arithmetic operation
RETURN 1 + 1, 1 - 1, 2 * 2, 2 / 2, 2 % 2, 2 ^ 2, +1, -1;
 ?column? | ?column? | ?column? | ?column? | ?column? |      ?column?      | ?column? | ?column? 
----------+----------+----------+----------+----------+--------------------+----------+----------
 2        | 0        | 4        | 1        | 0        | 4.0000000000000000 | 1        | -1
(1 row)

-- List concatenation
RETURN 's' + [], 0 + [], true + [],
       [] + 's', [] + 0, [] + true,
       [0] + [1], [] + {}, {} + [];
 ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------+----------+----------+----------+----------+----------
 ["s"]    | [0]      | [true]   | ["s"]    | [0]      | [true]   | [0, 1]   | [{}]     | [{}]
(1 row)

-- Invalid expression
RETURN '' + false;
ERROR:  invalid expression: "" + false
RETURN '' + {};
ERROR:  invalid expression: "" + {}
RETURN 0 + false;
ERROR:  invalid expression: 0 + false
RETURN 0 + {};
ERROR:  invalid expression: 0 + {}
RETURN false + '';
ERROR:  invalid expression: false + ""
RETURN false + 0;
ERROR:  invalid expression: false + 0
RETURN false + false;
ERROR:  invalid expression: false + false
RETURN false + {};
ERROR:  invalid expression: false + {}
RETURN {} + '';
ERROR:  invalid expression: {} + ""
RETURN {} + 0;
ERROR:  invalid expression: {} + 0
RETURN {} + false;
ERROR:  invalid expression: {} + false
RETURN {} + {};
ERROR:  invalid expression: {} + {}
RETURN '' - '';
ERROR:  invalid expression: "" - ""
RETURN '' - 0;
ERROR:  invalid expression: "" - 0
RETURN '' - false;
ERROR:  invalid expression: "" - false
RETURN '' - [];
ERROR:  invalid expression: "" - []
RETURN '' - {};
ERROR:  invalid expression: "" - {}
RETURN 0 - '';
ERROR:  invalid expression: 0 - ""
RETURN 0 - false;
ERROR:  invalid expression: 0 - false
RETURN 0 - [];
ERROR:  invalid expression: 0 - []
RETURN 0 - {};
ERROR:  invalid expression: 0 - {}
RETURN false - '';
ERROR:  invalid expression: false - ""
RETURN false - 0;
ERROR:  invalid expression: false - 0
RETURN false - false;
ERROR:  invalid expression: false - false
RETURN false - [];
ERROR:  invalid expression: false - []
RETURN false - {};
ERROR:  invalid expression: false - {}
RETURN [] - '';
ERROR:  invalid expression: [] - ""
RETURN [] - 0;
ERROR:  invalid expression: [] - 0
RETURN [] - false;
ERROR:  invalid expression: [] - false
RETURN [] - [];
ERROR:  invalid expression: [] - []
RETURN [] - {};
ERROR:  invalid expression: [] - {}
RETURN {} - '';
ERROR:  invalid expression: {} - ""
RETURN {} - 0;
ERROR:  invalid expression: {} - 0
RETURN {} - false;
ERROR:  invalid expression: {} - false
RETURN {} - [];
ERROR:  invalid expression: {} - []
RETURN {} - {};
ERROR:  invalid expression: {} - {}
RETURN '' * '';
ERROR:  invalid expression: "" * ""
RETURN '' * 0;
ERROR:  invalid expression: "" * 0
RETURN '' * false;
ERROR:  invalid expression: "" * false
RETURN '' * [];
ERROR:  invalid expression: "" * []
RETURN '' * {};
ERROR:  invalid expression: "" * {}
RETURN 0 * '';
ERROR:  invalid expression: 0 * ""
RETURN 0 * false;
ERROR:  invalid expression: 0 * false
RETURN 0 * [];
ERROR:  invalid expression: 0 * []
RETURN 0 * {};
ERROR:  invalid expression: 0 * {}
RETURN false * '';
ERROR:  invalid expression: false * ""
RETURN false * 0;
ERROR:  invalid expression: false * 0
RETURN false * false;
ERROR:  invalid expression: false * false
RETURN false * [];
ERROR:  invalid expression: false * []
RETURN false * {};
ERROR:  invalid expression: false * {}
RETURN [] * '';
ERROR:  invalid expression: [] * ""
RETURN [] * 0;
ERROR:  invalid expression: [] * 0
RETURN [] * false;
ERROR:  invalid expression: [] * false
RETURN [] * [];
ERROR:  invalid expression: [] * []
RETURN [] * {};
ERROR:  invalid expression: [] * {}
RETURN {} * '';
ERROR:  invalid expression: {} * ""
RETURN {} * 0;
ERROR:  invalid expression: {} * 0
RETURN {} * false;
ERROR:  invalid expression: {} * false
RETURN {} * [];
ERROR:  invalid expression: {} * []
RETURN {} * {};
ERROR:  invalid expression: {} * {}
RETURN '' / '';
ERROR:  invalid expression: "" / ""
RETURN '' / 0;
ERROR:  invalid expression: "" / 0
RETURN '' / false;
ERROR:  invalid expression: "" / false
RETURN '' / [];
ERROR:  invalid expression: "" / []
RETURN '' / {};
ERROR:  invalid expression: "" / {}
RETURN 0 / '';
ERROR:  invalid expression: 0 / ""
RETURN 0 / false;
ERROR:  invalid expression: 0 / false
RETURN 0 / [];
ERROR:  invalid expression: 0 / []
RETURN 0 / {};
ERROR:  invalid expression: 0 / {}
RETURN false / '';
ERROR:  invalid expression: false / ""
RETURN false / 0;
ERROR:  invalid expression: false / 0
RETURN false / false;
ERROR:  invalid expression: false / false
RETURN false / [];
ERROR:  invalid expression: false / []
RETURN false / {};
ERROR:  invalid expression: false / {}
RETURN [] / '';
ERROR:  invalid expression: [] / ""
RETURN [] / 0;
ERROR:  invalid expression: [] / 0
RETURN [] / false;
ERROR:  invalid expression: [] / false
RETURN [] / [];
ERROR:  invalid expression: [] / []
RETURN [] / {};
ERROR:  invalid expression: [] / {}
RETURN {} / '';
ERROR:  invalid expression: {} / ""
RETURN {} / 0;
ERROR:  invalid expression: {} / 0
RETURN {} / false;
ERROR:  invalid expression: {} / false
RETURN {} / [];
ERROR:  invalid expression: {} / []
RETURN {} / {};
ERROR:  invalid expression: {} / {}
RETURN '' % '';
ERROR:  invalid expression: "" % ""
RETURN '' % 0;
ERROR:  invalid expression: "" % 0
RETURN '' % false;
ERROR:  invalid expression: "" % false
RETURN '' % [];
ERROR:  invalid expression: "" % []
RETURN '' % {};
ERROR:  invalid expression: "" % {}
RETURN 0 % '';
ERROR:  invalid expression: 0 % ""
RETURN 0 % false;
ERROR:  invalid expression: 0 % false
RETURN 0 % [];
ERROR:  invalid expression: 0 % []
RETURN 0 % {};
ERROR:  invalid expression: 0 % {}
RETURN false % '';
ERROR:  invalid expression: false % ""
RETURN false % 0;
ERROR:  invalid expression: false % 0
RETURN false % false;
ERROR:  invalid expression: false % false
RETURN false % [];
ERROR:  invalid expression: false % []
RETURN false % {};
ERROR:  invalid expression: false % {}
RETURN [] % '';
ERROR:  invalid expression: [] % ""
RETURN [] % 0;
ERROR:  invalid expression: [] % 0
RETURN [] % false;
ERROR:  invalid expression: [] % false
RETURN [] % [];
ERROR:  invalid expression: [] % []
RETURN [] % {};
ERROR:  invalid expression: [] % {}
RETURN {} % '';
ERROR:  invalid expression: {} % ""
RETURN {} % 0;
ERROR:  invalid expression: {} % 0
RETURN {} % false;
ERROR:  invalid expression: {} % false
RETURN {} % [];
ERROR:  invalid expression: {} % []
RETURN {} % {};
ERROR:  invalid expression: {} % {}
RETURN '' ^ '';
ERROR:  invalid expression: "" ^ ""
RETURN '' ^ 0;
ERROR:  invalid expression: "" ^ 0
RETURN '' ^ false;
ERROR:  invalid expression: "" ^ false
RETURN '' ^ [];
ERROR:  invalid expression: "" ^ []
RETURN '' ^ {};
ERROR:  invalid expression: "" ^ {}
RETURN 0 ^ '';
ERROR:  invalid expression: 0 ^ ""
RETURN 0 ^ false;
ERROR:  invalid expression: 0 ^ false
RETURN 0 ^ [];
ERROR:  invalid expression: 0 ^ []
RETURN 0 ^ {};
ERROR:  invalid expression: 0 ^ {}
RETURN false ^ '';
ERROR:  invalid expression: false ^ ""
RETURN false ^ 0;
ERROR:  invalid expression: false ^ 0
RETURN false ^ false;
ERROR:  invalid expression: false ^ false
RETURN false ^ [];
ERROR:  invalid expression: false ^ []
RETURN false ^ {};
ERROR:  invalid expression: false ^ {}
RETURN [] ^ '';
ERROR:  invalid expression: [] ^ ""
RETURN [] ^ 0;
ERROR:  invalid expression: [] ^ 0
RETURN [] ^ false;
ERROR:  invalid expression: [] ^ false
RETURN [] ^ [];
ERROR:  invalid expression: [] ^ []
RETURN [] ^ {};
ERROR:  invalid expression: [] ^ {}
RETURN {} ^ '';
ERROR:  invalid expression: {} ^ ""
RETURN {} ^ 0;
ERROR:  invalid expression: {} ^ 0
RETURN {} ^ false;
ERROR:  invalid expression: {} ^ false
RETURN {} ^ [];
ERROR:  invalid expression: {} ^ []
RETURN {} ^ {};
ERROR:  invalid expression: {} ^ {}
RETURN +'';
ERROR:  invalid expression: +""
RETURN +false;
ERROR:  invalid expression: +false
RETURN +[];
ERROR:  invalid expression: +[]
RETURN +{};
ERROR:  invalid expression: +{}
RETURN -'';
ERROR:  invalid expression: -""
RETURN -false;
ERROR:  invalid expression: -false
RETURN -[];
ERROR:  invalid expression: -[]
RETURN -{};
ERROR:  invalid expression: -{}
CREATE (:v0 {
  o: {i: 7, r: 7.0, s: '"map\nliteral\"', t: true, f: false, 'z': NULL,
      '\n': '\n'},
  l: [7, 7.0, '"list\nliteral\"', true, false, NULL, [0, 1, 2, 3, 4], {p: 'p'}],
  t: {i: 1, s: 's', b: true, l: [0], o: {p: 'p'}},
  f: {i: 0, s: '', b: false, l: [], o: {}}
});
-- Property access
MATCH (n:v0) RETURN n.o.i, n.o.'i', n.o['i'];
 i | i | o 
---+---+---
 7 | 7 | 7
(1 row)

MATCH (n:v0) RETURN n.l[0], n.l[6][0],
                    n.l[6][1..], n.l[6][..3], n.l[6][1..3],
                    n.l[6][-4..], n.l[6][..-2], n.l[6][-4..-2],
                    n.l[6][1..6], n.l[6][-7..-2], n.l[6][1..3][0],
                    n.l[7].p,n.l[7].'p', n.l[7]['p'];
 l | l |      l       |     l     |   l    |      l       |     l     |   l    |      l       |     l     | l |  p  |  p  |  l  
---+---+--------------+-----------+--------+--------------+-----------+--------+--------------+-----------+---+-----+-----+-----
 7 | 0 | [1, 2, 3, 4] | [0, 1, 2] | [1, 2] | [1, 2, 3, 4] | [0, 1, 2] | [1, 2] | [1, 2, 3, 4] | [0, 1, 2] | 1 | "p" | "p" | "p"
(1 row)

-- Null test
RETURN '' IS NULL, '' IS NOT NULL, NULL IS NULL, NULL IS NOT NULL;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
 f        | t        | t        | f
(1 row)

MATCH (n:v0) RETURN n.o.z IS NULL, n.l[5] IS NOT NULL;
 ?column? | ?column? 
----------+----------
 t        | f
(1 row)

-- Boolean
MATCH (n:v0) WHERE n.t.i RETURN COUNT(*);
 count 
-------
     1
(1 row)

MATCH (n:v0) WHERE n.t.s RETURN COUNT(*);
 count 
-------
     1
(1 row)

MATCH (n:v0) WHERE n.t.b RETURN COUNT(*);
 count 
-------
     1
(1 row)

MATCH (n:v0) WHERE n.t.l RETURN COUNT(*);
 count 
-------
     1
(1 row)

MATCH (n:v0) WHERE n.t.o RETURN COUNT(*);
 count 
-------
     1
(1 row)

MATCH (n:v0) WHERE n.f.i RETURN COUNT(*);
 count 
-------
     0
(1 row)

MATCH (n:v0) WHERE n.f.s RETURN COUNT(*);
 count 
-------
     0
(1 row)

MATCH (n:v0) WHERE n.f.b RETURN COUNT(*);
 count 
-------
     0
(1 row)

MATCH (n:v0) WHERE n.f.l RETURN COUNT(*);
 count 
-------
     0
(1 row)

MATCH (n:v0) WHERE n.f.o RETURN COUNT(*);
 count 
-------
     0
(1 row)

-- Case expression
CREATE (:v1 {i: -1}), (:v1 {i: 0}), (:v1 {i: 1});
MATCH (n:v1)
RETURN CASE n.i WHEN 0 THEN true ELSE false END,
       CASE WHEN n.i = 0 THEN true ELSE false END;
 case | case 
------+------
 f    | f
 t    | t
 f    | f
(3 rows)

-- IN expression
MATCH (n:v0) RETURN true IN n.l;
 ?column? 
----------
 t
(1 row)

MATCH (n:v0) RETURN 0 IN n.l;
 ?column? 
----------
 f
(1 row)

MATCH (n:v0) RETURN NULL IN n.l;
 ?column? 
----------
 
(1 row)

MATCH (n:v0) WITH n.l[0] AS i RETURN [(i IN [0, 1, 2, 3, 4]), true];
   ?column?    
---------------
 [false, true]
(1 row)

-- List comprehension
RETURN [x IN [0, 1, 2, 3, 4]];
    ?column?     
-----------------
 [0, 1, 2, 3, 4]
(1 row)

RETURN [x IN [0, 1, 2, 3, 4] WHERE x % 2 = 0];
 ?column?  
-----------
 [0, 2, 4]
(1 row)

RETURN [x IN [0, 1, 2, 3, 4] | x + 1];
    ?column?     
-----------------
 [1, 2, 3, 4, 5]
(1 row)

RETURN [x IN [0, 1, 2, 3, 4] WHERE x % 2 = 0 | x + 1];
 ?column?  
-----------
 [1, 3, 5]
(1 row)

-- List predicate functions
RETURN ALL(x in [] WHERE x = 0);
 ?column? 
----------
 t
(1 row)

RETURN ALL(x in [0] WHERE x = 0);
 ?column? 
----------
 t
(1 row)

RETURN ALL(x in [0, 1, 2, 3, 4] WHERE x = 0);
 ?column? 
----------
 f
(1 row)

RETURN ALL(x in [0, 1, 2, 3, 4] WHERE x >= 0);
 ?column? 
----------
 t
(1 row)

RETURN ALL(x in [0, 1, 2, 3, 4] WHERE x = 5);
 ?column? 
----------
 f
(1 row)

RETURN ANY(x in [] WHERE x = 0);
 ?column? 
----------
 f
(1 row)

RETURN ANY(x in [0] WHERE x = 0);
 ?column? 
----------
 t
(1 row)

RETURN ANY(x in [0, 1, 2, 3, 4] WHERE x = 0);
 ?column? 
----------
 t
(1 row)

RETURN ANY(x in [0, 1, 2, 3, 4] WHERE x >= 0);
 ?column? 
----------
 t
(1 row)

RETURN ANY(x in [0, 1, 2, 3, 4] WHERE x = 5);
 ?column? 
----------
 f
(1 row)

RETURN NONE(x in [] WHERE x = 0);
 ?column? 
----------
 t
(1 row)

RETURN NONE(x in [0] WHERE x = 0);
 ?column? 
----------
 f
(1 row)

RETURN NONE(x in [0, 1, 2, 3, 4] WHERE x = 0);
 ?column? 
----------
 f
(1 row)

RETURN NONE(x in [0, 1, 2, 3, 4] WHERE x >= 0);
 ?column? 
----------
 f
(1 row)

RETURN NONE(x in [0, 1, 2, 3, 4] WHERE x = 5);
 ?column? 
----------
 t
(1 row)

RETURN SINGLE(x in [] WHERE x = 0);
 ?column? 
----------
 f
(1 row)

RETURN SINGLE(x in [0] WHERE x = 0);
 ?column? 
----------
 t
(1 row)

RETURN SINGLE(x in [0, 1, 2, 3, 4] WHERE x = 0);
 ?column? 
----------
 t
(1 row)

RETURN SINGLE(x in [0, 1, 2, 3, 4] WHERE x >= 0);
 ?column? 
----------
 f
(1 row)

RETURN SINGLE(x in [0, 1, 2, 3, 4] WHERE x = 5);
 ?column? 
----------
 f
(1 row)

-- Tear down
DROP GRAPH test_cypher_expr CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to sequence test_cypher_expr.ag_label_seq
drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label v0
drop cascades to label v1
