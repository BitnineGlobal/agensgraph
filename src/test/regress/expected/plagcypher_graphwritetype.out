--
-- PL/agCypher - Use Parameter
--
-- setup
drop graph if exists g4 cascade;
NOTICE:  graph "g4" does not exist, skipping
drop function if exists func_create();
NOTICE:  function func_create() does not exist, skipping
drop function if exists func_delete();
NOTICE:  function func_delete() does not exist, skipping
drop function if exists func_set();
NOTICE:  function func_set() does not exist, skipping
drop function if exists func_merge();
NOTICE:  function func_merge() does not exist, skipping
drop function if exists func_remove();
NOTICE:  function func_remove() does not exist, skipping
drop function if exists func_complex1();
NOTICE:  function func_complex1() does not exist, skipping
drop function if exists func_complex2();
NOTICE:  function func_complex2() does not exist, skipping
create graph g4;
set graph_path=g4;
create (:person{name : 'Anders'}), (:person{name : 'Dilshad'}), (:person{name : 'Cesar'}), (:person{name : 'Becky'}), (:person{name : 'Filipa'}), (:person{name : 'Emil'});
create elabel block;
match (a), (b)
where a.name = 'Anders' and b.name = 'Dilshad'
create (a)-[e:knows{name:'friend1'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[5.1][3.1,3.2]{"name": "friend1"}
(1 row)

match (a), (b)
where a.name = 'Anders' and b.name = 'Cesar'
create (a)-[e:knows{name:'friend2'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[5.2][3.1,3.3]{"name": "friend2"}
(1 row)

match (a), (b)
where a.name = 'Anders' and b.name = 'Becky'
create (a)-[e:knows{name:'friend3'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[5.3][3.1,3.4]{"name": "friend3"}
(1 row)

match (a), (b)
where a.name = 'Dilshad' and b.name = 'Filipa'
create (a)-[e:knows{name:'friend4'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[5.4][3.2,3.5]{"name": "friend4"}
(1 row)

match (a), (b)
where a.name = 'Cesar' and b.name = 'Emil'
create (a)-[e:knows{name:'friend5'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[5.5][3.3,3.6]{"name": "friend5"}
(1 row)

match (a), (b)
where a.name = 'Becky' and b.name = 'Emil'
create (a)-[e:knows{name:'friend6'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[5.6][3.4,3.6]{"name": "friend6"}
(1 row)

-- test graphwrite type ( create )
create or replace function func_create() returns void as $$
begin
create( :person{name : 'Bossman'} );
end;
$$ language plagcypher;
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

select func_create();
ERROR:  cannot modify graph in PL/pgSQL
CONTEXT:  PL/pgSQL function func_create() line 3 at SQL statement
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

create or replace function func_delete() returns void as $$
begin
match (a)
where a.name = 'Becky'
delete a;
end;
$$ language plagcypher;
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

select func_delete();
ERROR:  cannot modify graph in PL/pgSQL
CONTEXT:  PL/pgSQL function func_delete() line 3 at SQL statement
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

create or replace function func_set() returns void as $$
begin
match (a)
where a.name = 'Becky'
set a.name = 'lucy';
end;
$$ language plagcypher;
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

select func_set();
ERROR:  cannot modify graph in PL/pgSQL
CONTEXT:  PL/pgSQL function func_set() line 3 at SQL statement
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

create or replace function func_merge() returns void as $$
begin
match (a) , (b)
where a.name = 'Cesar' and b.name = 'Filipa'
merge (a)-[e:block {name:'block'}]->(b);
end
$$ language plagcypher;
match (a)-[b]->(c)
where b.name = 'block'
return a , b , c;
 a | b | c 
---+---+---
(0 rows)

select func_merge();
ERROR:  cannot modify graph in PL/pgSQL
CONTEXT:  PL/pgSQL function func_merge() line 3 at SQL statement
match (a)-[b]->(c)
where b.name = 'block'
return a , b , c;
 a | b | c 
---+---+---
(0 rows)

create or replace function func_remove() returns void as $$
begin
match (a)
remove a.name;
end;
$$ language plagcypher;
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

select func_remove();
ERROR:  cannot modify graph in PL/pgSQL
CONTEXT:  PL/pgSQL function func_remove() line 3 at SQL statement
match (a) return a;
               a                
--------------------------------
 person[3.1]{"name": "Anders"}
 person[3.2]{"name": "Dilshad"}
 person[3.3]{"name": "Cesar"}
 person[3.4]{"name": "Becky"}
 person[3.5]{"name": "Filipa"}
 person[3.6]{"name": "Emil"}
(6 rows)

create vlabel v;
create elabel e;
create or replace function func_complex1() returns void as $$
declare
var1 edge;
var2 edge;
begin
match (a:v) , (b:v) , (c:v)
create (a)-[z:e {name:'edge1', id:'1'}]->(b)
create (b)-[r:e {name:'edge2', id:'2'}]->(c)
return z , r into var1 , var2;
end;
$$ language plagcypher;
select func_complex1();
ERROR:  cannot modify graph in PL/pgSQL
CONTEXT:  PL/pgSQL function func_complex1() line 6 at SQL statement
create or replace function func_complex2() returns void as $$
declare
var1 edge;
begin
match (a:v) , (b:v)
merge (a)-[r:e {name:'edge' , id:'0'}]-(b)
on create set r.created = true, r.matched = null
on match set r.matched = true, r.created = null
return r into var1;
end;
$$ language plagcypher;
select func_complex2();
ERROR:  cannot modify graph in PL/pgSQL
CONTEXT:  PL/pgSQL function func_complex2() line 5 at SQL statement
drop function if exists func_complex2();
drop function if exists func_complex1();
drop function if exists func_remove();
drop function if exists func_merge();
drop function if exists func_set();
drop function if exists func_delete();
drop function if exists func_create();
drop graph if exists g4 cascade;
NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to sequence g4.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel person
drop cascades to elabel block
drop cascades to elabel knows
drop cascades to vlabel v
drop cascades to elabel e
