--
-- Cypher Query Language - DML
--
-- prepare
DROP TABLE IF EXISTS history;
NOTICE:  table "history" does not exist, skipping
CREATE TABLE history (year, event) AS VALUES
(1996, 'PostgreSQL'),
(2016, 'Graph');
DROP GRAPH agens CASCADE;
ERROR:  graph "agens" does not exist
CREATE GRAPH agens;
--
-- RETURN
--
RETURN 3 + 4, 'hello' || ' agens';
 ?column? |  ?column?   
----------+-------------
        7 | hello agens
(1 row)

RETURN 3 + 4 AS lucky, 'hello' || ' agens' AS greeting;
 lucky |  greeting   
-------+-------------
     7 | hello agens
(1 row)

RETURN (SELECT event FROM history WHERE year = 2016);
 event 
-------
 Graph
(1 row)

SELECT * FROM (RETURN 3 + 4, 'hello' || ' agens') AS _(lucky, greeting);
 lucky |  greeting   
-------+-------------
     7 | hello agens
(1 row)

--
-- CREATE
--
CREATE VLABEL repo;
CREATE ELABEL lib;
CREATE ELABEL doc;
CREATE (g:repo {'name': 'agens-graph',
                'year': (SELECT year FROM history WHERE event = 'Graph')})
RETURN properties(g) AS g;
                   g                   
---------------------------------------
 {"name": "agens-graph", "year": 2016}
(1 row)

MATCH (g:repo)
CREATE (j:repo '{"name": "agens-graph-jdbc", "year": 2016}'),
       (d:repo =jsonb_build_object('name', 'agens-graph-docs', 'year', 2016))
CREATE (g)-[l:lib {'lang': 'java'}]->(j),
       p=(g)
         -[:lib {'lang': 'c'}]->
         (:repo {'name': 'agens-graph-odbc', 'year': 2016}),
       (g)-[e:doc {'lang': 'en'}]->(d)
RETURN properties(l) AS lj, properties(j) AS j,
       properties((edges(p))[1]) AS lc, properties((vertices(p))[2]) AS c,
       properties(e) AS e, properties(d) AS d;
        lj        |                     j                      |      lc       |                     c                      |       e        |                     d                      
------------------+--------------------------------------------+---------------+--------------------------------------------+----------------+--------------------------------------------
 {"lang": "java"} | {"name": "agens-graph-jdbc", "year": 2016} | {"lang": "c"} | {"name": "agens-graph-odbc", "year": 2016} | {"lang": "en"} | {"name": "agens-graph-docs", "year": 2016}
(1 row)

CREATE ()-[a:r]->(a);
ERROR:  duplicate variable "a"
LINE 1: CREATE ()-[a:r]->(a);
                          ^
CREATE a=(), (a);
ERROR:  duplicate variable "a"
LINE 1: CREATE a=(), (a);
                      ^
CREATE (a), (a {});
ERROR:  duplicate variable "a"
LINE 1: CREATE (a), (a {});
                     ^
CREATE (a), (a);
ERROR:  there must be at least one relationship
LINE 1: CREATE (a), (a);
                     ^
CREATE (=0);
ERROR:  property map must be jsonb type
LINE 1: CREATE (=0);
                 ^
CREATE ()-[]-();
ERROR:  only directed relationships are allowed in CREATE
CREATE ()-[]->();
ERROR:  only one relationship type is allowed for CREATE
CREATE ()-[:r|z]->();
ERROR:  only one relationship type is allowed for CREATE
CREATE (a)-[a:r]->();
ERROR:  duplicate variable "a"
LINE 1: CREATE (a)-[a:r]->();
                    ^
CREATE ()-[a:r]->()-[a:z]->();
ERROR:  duplicate variable "a"
LINE 1: CREATE ()-[a:r]->()-[a:z]->();
                             ^
CREATE a=(), ()-[a:z]->();
ERROR:  duplicate variable "a"
LINE 1: CREATE a=(), ()-[a:z]->();
                         ^
CREATE ()-[:r =0]->();
ERROR:  property map must be jsonb type
LINE 1: CREATE ()-[:r =0]->();
                       ^
CREATE (a), a=();
ERROR:  duplicate variable "a"
LINE 1: CREATE (a), a=();
                    ^
CREATE ()-[a:r]->(), a=();
ERROR:  duplicate variable "a"
LINE 1: CREATE ()-[a:r]->(), a=();
                             ^
CREATE a=(), a=();
ERROR:  duplicate variable "a"
LINE 1: CREATE a=(), a=();
                     ^
--
-- MATCH
--
MATCH (a) RETURN a.name AS a;
        a         
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
(4 rows)

MATCH (a), (a) RETURN a.name AS a;
        a         
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
(4 rows)

CREATE ();
MATCH (a:repo) RETURN a.name AS name, a['year'] AS year;
       name       | year 
------------------+------
 agens-graph      | 2016
 agens-graph-jdbc | 2016
 agens-graph-docs | 2016
 agens-graph-odbc | 2016
(4 rows)

MATCH p=(a)-[b]-(c)
RETURN a.name AS a, b.lang AS b, c.name AS c
       ORDER BY a, b, c;
        a         |  b   |        c         
------------------+------+------------------
 agens-graph      | c    | agens-graph-odbc
 agens-graph      | en   | agens-graph-docs
 agens-graph      | java | agens-graph-jdbc
 agens-graph-docs | en   | agens-graph
 agens-graph-jdbc | java | agens-graph
 agens-graph-odbc | c    | agens-graph
(6 rows)

MATCH (a)<-[b]-(c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e
       ORDER BY a, b, c, d, e;
        a         |  b   |      c      |  d   |        e         
------------------+------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc
(6 rows)

MATCH (a)<-[b]-(c), (c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e
       ORDER BY a, b, c, d, e;
        a         |  b   |      c      |  d   |        e         
------------------+------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc
(6 rows)

MATCH (a)<-[b]-(c) MATCH (c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e
       ORDER BY a, b, c, d, e;
        a         |  b   |      c      |  d   |        e         
------------------+------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | en   | agens-graph-docs
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs
 agens-graph-jdbc | java | agens-graph | java | agens-graph-jdbc
 agens-graph-odbc | c    | agens-graph | c    | agens-graph-odbc
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc
(9 rows)

MATCH (a)<-[b]-(c), (f)-[g]->(h), (c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e,
       f.name AS f, g.lang AS g, h.name AS h
       ORDER BY a, b, c, d, e, f, g, h;
        a         |  b   |      c      |  d   |        e         |      f      |  g   |        h         
------------------+------+-------------+------+------------------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc | agens-graph | en   | agens-graph-docs
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc | agens-graph | java | agens-graph-jdbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc | agens-graph | en   | agens-graph-docs
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc | agens-graph | en   | agens-graph-docs
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs | agens-graph | en   | agens-graph-docs
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs | agens-graph | java | agens-graph-jdbc
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs | agens-graph | c    | agens-graph-odbc
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs | agens-graph | java | agens-graph-jdbc
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc | agens-graph | c    | agens-graph-odbc
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc | agens-graph | java | agens-graph-jdbc
(18 rows)

MATCH (a {'name': 'agens-graph'}), (a {'year': 2016}) RETURN properties(a) AS a;
                   a                   
---------------------------------------
 {"name": "agens-graph", "year": 2016}
(1 row)

MATCH p=(a)-[]->({'name': 'agens-graph-jdbc'}) RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

MATCH p=()-[:lib]->(a) RETURN a.name AS a;
        a         
------------------
 agens-graph-jdbc
 agens-graph-odbc
(2 rows)

MATCH p=()-[{'lang': 'en'}]->(a) RETURN a.name AS a;
        a         
------------------
 agens-graph-docs
(1 row)

MATCH (a {'year': (SELECT year FROM history WHERE event = 'Graph')})
WHERE a.name = 'agens-graph'
RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

MATCH ();
ERROR:  Cypher query must end with RETURN or update clause
MATCH (a), (a:repo) RETURN *;
ERROR:  label conflict on node "a"
MATCH ()-[a]-(), (a) RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]-(), (a) RETURN *;
                          ^
MATCH a=(), (a) RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH a=(), (a) RETURN *;
                     ^
MATCH (a =0) RETURN *;
ERROR:  property map must be jsonb type
LINE 1: MATCH (a =0) RETURN *;
                  ^
MATCH ()-[a]-(a) RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]-(a) RETURN *;
                      ^
MATCH ()-[a]-()-[a]-() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]-()-[a]-() RETURN *;
                         ^
MATCH a=(), ()-[a]-() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH a=(), ()-[a]-() RETURN *;
                        ^
MATCH p=()-[:lib|doc]->() RETURN *;
ERROR:  multiple types for relationship not supported
MATCH ()-[a =0]-() RETURN *;
ERROR:  property map must be jsonb type
LINE 1: MATCH ()-[a =0]-() RETURN *;
                     ^
MATCH (a), a=() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH (a), a=() RETURN *;
                   ^
MATCH ()-[a]->(), a=() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]->(), a=() RETURN *;
                          ^
MATCH a=(), a=() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH a=(), a=() RETURN *;
                    ^
MATCH (a {'name': properties->'name'}) RETURN *;
ERROR:  column "properties" does not exist
LINE 1: MATCH (a {'name': properties->'name'}) RETURN *;
                          ^
HINT:  There is a column named "properties" in table "a", but it cannot be referenced from this part of the query.
MATCH (a {'name': a.properties->'name'}) RETURN *;
ERROR:  invalid reference to FROM-clause entry for table "a"
LINE 1: MATCH (a {'name': a.properties->'name'}) RETURN *;
                          ^
HINT:  There is an entry for table "a", but it cannot be referenced from this part of the query.
-- OPTIONAL MATCH
CREATE GRAPH o;
SET graph_path = o;
CREATE VLABEL person;
CREATE ELABEL knows;
CREATE (:person {name: 'someone'})-[:knows]->(:person {name: 'somebody'}),
       (:person {name: 'anybody'})-[:knows]->(:person {name: 'nobody'});
OPTIONAL MATCH (n)-[r]->(p), (m)-[s]->(q)
RETURN n.name AS n, type(r) AS r, p.name AS p,
       m.name AS m, type(s) AS s, q.name AS q
ORDER BY n, p, m, s;
    n    |   r   |    p     |    m    |   s   |    q     
---------+-------+----------+---------+-------+----------
 anybody | knows | nobody   | anybody | knows | nobody
 anybody | knows | nobody   | someone | knows | somebody
 someone | knows | somebody | anybody | knows | nobody
 someone | knows | somebody | someone | knows | somebody
(4 rows)

MATCH (n:person), (m:person) WHERE id(n) <> id(m)
OPTIONAL MATCH (n)-[r]->(p), (m)-[s]->(q)
RETURN n.name AS n, type(r) AS r, p.name AS p,
       m.name AS m, type(s) AS s, q.name AS q
ORDER BY n, p, m, s;
    n     |   r   |    p     |    m     |   s   |    q     
----------+-------+----------+----------+-------+----------
 anybody  | knows | nobody   | someone  | knows | somebody
 anybody  |       |          | nobody   |       | 
 anybody  |       |          | somebody |       | 
 nobody   |       |          | anybody  |       | 
 nobody   |       |          | somebody |       | 
 nobody   |       |          | someone  |       | 
 somebody |       |          | anybody  |       | 
 somebody |       |          | nobody   |       | 
 somebody |       |          | someone  |       | 
 someone  | knows | somebody | anybody  | knows | nobody
 someone  |       |          | nobody   |       | 
 someone  |       |          | somebody |       | 
(12 rows)

MATCH (n:person), (m:person) WHERE id(n) <> id(m)
OPTIONAL MATCH (n)-[r]->(p), (m)-[s]->(q) WHERE m.name = 'someone'
RETURN n.name AS n, type(r) AS r, p.name AS p,
       m.name AS m, type(s) AS s, q.name AS q
ORDER BY n, p, m, s;
    n     |   r   |   p    |    m     |   s   |    q     
----------+-------+--------+----------+-------+----------
 anybody  | knows | nobody | someone  | knows | somebody
 anybody  |       |        | nobody   |       | 
 anybody  |       |        | somebody |       | 
 nobody   |       |        | anybody  |       | 
 nobody   |       |        | somebody |       | 
 nobody   |       |        | someone  |       | 
 somebody |       |        | anybody  |       | 
 somebody |       |        | nobody   |       | 
 somebody |       |        | someone  |       | 
 someone  |       |        | anybody  |       | 
 someone  |       |        | nobody   |       | 
 someone  |       |        | somebody |       | 
(12 rows)

-- Variable Length Relationship
CREATE GRAPH t;
SET graph_path = t;
CREATE VLABEL time;
CREATE ELABEL goes;
CREATE (:time {sec: 1})-[:goes]->
       (:time {sec: 2})-[:goes]->
       (:time {sec: 3})-[:goes]->
       (:time {sec: 4})-[:goes]->
       (:time {sec: 5})-[:goes]->
       (:time {sec: 6})-[:goes]->
       (:time {sec: 7})-[:goes]->
       (:time {sec: 8})-[:goes]->
       (:time {sec: 9});
MATCH (a:time)-[x:goes*3]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 | 3 | 4
 2 | 3 | 5
 3 | 3 | 6
 4 | 3 | 7
 5 | 3 | 8
 6 | 3 | 9
(6 rows)

MATCH (a:time)-[x:goes*0]->(b:time)
RETURN a.sec AS a, x, b.sec AS b;
 a | x  | b 
---+----+---
 1 | {} | 1
 2 | {} | 2
 3 | {} | 3
 4 | {} | 4
 5 | {} | 5
 6 | {} | 6
 7 | {} | 7
 8 | {} | 8
 9 | {} | 9
(9 rows)

MATCH (a:time)-[x:goes*0..1]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 |   | 1
 1 | 1 | 2
 2 |   | 2
 2 | 1 | 3
 3 |   | 3
 3 | 1 | 4
 4 |   | 4
 4 | 1 | 5
 5 |   | 5
 5 | 1 | 6
 6 |   | 6
 6 | 1 | 7
 7 |   | 7
 7 | 1 | 8
 8 |   | 8
 8 | 1 | 9
 9 |   | 9
(17 rows)

MATCH (a:time)-[x:goes*..1]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 | 1 | 2
 2 | 1 | 3
 3 | 1 | 4
 4 | 1 | 5
 5 | 1 | 6
 6 | 1 | 7
 7 | 1 | 8
 8 | 1 | 9
(8 rows)

MATCH (a:time)-[x:goes*0..]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 |   | 1
 1 | 1 | 2
 1 | 2 | 3
 1 | 3 | 4
 1 | 4 | 5
 1 | 5 | 6
 1 | 6 | 7
 1 | 7 | 8
 1 | 8 | 9
 2 |   | 2
 2 | 1 | 3
 2 | 2 | 4
 2 | 3 | 5
 2 | 4 | 6
 2 | 5 | 7
 2 | 6 | 8
 2 | 7 | 9
 3 |   | 3
 3 | 1 | 4
 3 | 2 | 5
 3 | 3 | 6
 3 | 4 | 7
 3 | 5 | 8
 3 | 6 | 9
 4 |   | 4
 4 | 1 | 5
 4 | 2 | 6
 4 | 3 | 7
 4 | 4 | 8
 4 | 5 | 9
 5 |   | 5
 5 | 1 | 6
 5 | 2 | 7
 5 | 3 | 8
 5 | 4 | 9
 6 |   | 6
 6 | 1 | 7
 6 | 2 | 8
 6 | 3 | 9
 7 |   | 7
 7 | 1 | 8
 7 | 2 | 9
 8 |   | 8
 8 | 1 | 9
 9 |   | 9
(45 rows)

MATCH (a:time)-[x:goes*3..6]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 | 3 | 4
 1 | 4 | 5
 1 | 5 | 6
 1 | 6 | 7
 2 | 3 | 5
 2 | 4 | 6
 2 | 5 | 7
 2 | 6 | 8
 3 | 3 | 6
 3 | 4 | 7
 3 | 5 | 8
 3 | 6 | 9
 4 | 3 | 7
 4 | 4 | 8
 4 | 5 | 9
 5 | 3 | 8
 5 | 4 | 9
 6 | 3 | 9
(18 rows)

MATCH (a:time)-[x:goes*2]->(b:time)-[y:goes]->(c:time)-[z:goes*2]->(d:time)
RETURN a.sec AS a, array_length(x, 1) AS x,
       b.sec AS b, type(y) AS y,
       c.sec AS c, array_length(z, 1) AS z, d.sec AS d;
 a | x | b |  y   | c | z | d 
---+---+---+------+---+---+---
 1 | 2 | 3 | goes | 4 | 2 | 6
 2 | 2 | 4 | goes | 5 | 2 | 7
 3 | 2 | 5 | goes | 6 | 2 | 8
 4 | 2 | 6 | goes | 7 | 2 | 9
(4 rows)

MATCH (a:time)-[x:goes*2]->(b:time)
MATCH (b)-[y:goes]->(c:time)
MATCH (c)-[z:goes*2]->(d:time)
RETURN a.sec AS a, array_length(x, 1) AS x,
       b.sec AS b, type(y) AS y,
       c.sec AS c, array_length(z, 1) AS z, d.sec AS d;
 a | x | b |  y   | c | z | d 
---+---+---+------+---+---+---
 1 | 2 | 3 | goes | 4 | 2 | 6
 2 | 2 | 4 | goes | 5 | 2 | 7
 3 | 2 | 5 | goes | 6 | 2 | 8
 4 | 2 | 6 | goes | 7 | 2 | 9
(4 rows)

MATCH (d:time)<-[z:goes*2]-(c:time)<-[y:goes]-(b:time)<-[x:goes*2]-(a:time)
RETURN d.sec AS d, array_length(z, 1) AS z,
       c.sec AS c, type(y) AS y,
       b.sec AS b, array_length(x, 1) AS x, a.sec AS a;
 d | z | c |  y   | b | x | a 
---+---+---+------+---+---+---
 6 | 2 | 4 | goes | 3 | 2 | 1
 7 | 2 | 5 | goes | 4 | 2 | 2
 8 | 2 | 6 | goes | 5 | 2 | 3
 9 | 2 | 7 | goes | 6 | 2 | 4
(4 rows)

MATCH (d:time)<-[z:goes*2]-(c:time)
MATCH (c)<-[y:goes]-(b:time)
MATCH (b)<-[x:goes*2]-(a:time)
RETURN d.sec AS d, array_length(z, 1) AS z,
       c.sec AS c, type(y) AS y,
       b.sec AS b, array_length(x, 1) AS x, a.sec AS a;
 d | z | c |  y   | b | x | a 
---+---+---+------+---+---+---
 6 | 2 | 4 | goes | 3 | 2 | 1
 7 | 2 | 5 | goes | 4 | 2 | 2
 8 | 2 | 6 | goes | 5 | 2 | 3
 9 | 2 | 7 | goes | 6 | 2 | 4
(4 rows)

CREATE (:time {sec: 11})-[:goes {int: 1}]->
       (:time {sec: 12})-[:goes {int: 1}]->
       (:time {sec: 13})-[:goes {int: 2}]->
       (:time {sec: 15})-[:goes {int: 1}]->
       (:time {sec: 16})-[:goes {int: 1}]->
       (:time {sec: 17});
MATCH (a:time)-[x:goes*1..2 {int: 1}]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a  | x | b  
----+---+----
 11 | 1 | 12
 11 | 2 | 13
 12 | 1 | 13
 15 | 1 | 16
 15 | 2 | 17
 16 | 1 | 17
(6 rows)

SET graph_path = agens;
--
-- DISTINCT
--
MATCH (a:repo)-[]-() RETURN DISTINCT a.name AS a ORDER BY a;
        a         
------------------
 agens-graph
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(4 rows)

MATCH (a:repo)-[b]-(c)
RETURN DISTINCT ON (a) a.name AS a, b.lang AS b, c.name AS c;
        a         |  b   |        c         
------------------+------+------------------
 agens-graph      | java | agens-graph-jdbc
 agens-graph-docs | en   | agens-graph
 agens-graph-jdbc | java | agens-graph
 agens-graph-odbc | c    | agens-graph
(4 rows)

--
-- ORDER BY
--
MATCH (a:repo) RETURN a.name AS a ORDER BY a;
        a         
------------------
 agens-graph
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(4 rows)

MATCH (a:repo) RETURN a.name AS a ORDER BY a ASC;
        a         
------------------
 agens-graph
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(4 rows)

MATCH (a:repo) RETURN a.name AS a ORDER BY a DESC;
        a         
------------------
 agens-graph-odbc
 agens-graph-jdbc
 agens-graph-docs
 agens-graph
(4 rows)

--
-- SKIP and LIMIT
--
MATCH (a:repo) RETURN a.name AS a ORDER BY a SKIP 1 LIMIT 1;
        a         
------------------
 agens-graph-docs
(1 row)

--
-- WITH
--
MATCH (a:repo) WITH a.name AS name RETURN name;
       name       
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
(4 rows)

MATCH (a)
WITH a WHERE label(a) = 'repo'
MATCH p=(a)-[]->(b)
RETURN b.name AS b ORDER BY b;
        b         
------------------
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(3 rows)

MATCH (a) WITH a RETURN b;
ERROR:  column "b" does not exist
LINE 1: MATCH (a) WITH a RETURN b;
                                ^
MATCH (a) WITH a.name RETURN *;
ERROR:  expression in WITH must be aliased (use AS)
LINE 1: MATCH (a) WITH a.name RETURN *;
                       ^
MATCH () WITH a AS z RETURN a;
ERROR:  column "a" does not exist
LINE 1: MATCH () WITH a AS z RETURN a;
                      ^
--
-- UNION
--
MATCH (a:repo)
RETURN a.name AS a
UNION ALL
MATCH (b:lib)
RETURN b.lang AS b
UNION ALL
MATCH (c:doc)
RETURN c.lang AS c;
        a         
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
 java
 c
 en
(7 rows)

MATCH (a)
RETURN a
UNION
MATCH (b)
RETURN b.name;
ERROR:  UNION types vertex and text cannot be matched
--
-- aggregates
--
MATCH (a)-[]-(b) RETURN count(a) AS a, b.name AS b ORDER BY a, b;
 a |        b         
---+------------------
 1 | agens-graph-docs
 1 | agens-graph-jdbc
 1 | agens-graph-odbc
 3 | agens-graph
(4 rows)

--
-- EXISTS
--
MATCH (a:repo) WHERE exists((a)-[]->()) RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

--
-- SIZE
--
MATCH (a:repo) RETURN a.name AS a, size((a)-[]->()) AS s;
        a         | s 
------------------+---
 agens-graph      | 3
 agens-graph-jdbc | 0
 agens-graph-docs | 0
 agens-graph-odbc | 0
(4 rows)

--
-- LOAD
--
MATCH (a) LOAD FROM history AS a RETURN *;
ERROR:  duplicate variable "a"
CREATE VLABEL feature;
CREATE ELABEL supported;
MATCH (a:repo {'name': 'agens-graph'})
LOAD FROM history AS h
CREATE (:feature {'name': (h).event})-[:supported]->(a);
MATCH p=(a)-[:supported]->() RETURN properties(a) AS a;
           a            
------------------------
 {"name": "PostgreSQL"}
 {"name": "Graph"}
(2 rows)

--
-- DELETE
--
MATCH (a) DELETE a;
ERROR:  vertex 1 in "repo" has edge(s)
MATCH p=()-[:lib]->() DETACH DELETE (vertices(p))[2];
MATCH (a:repo) RETURN a.name AS a;
        a         
------------------
 agens-graph
 agens-graph-docs
(2 rows)

MATCH ()-[a:doc]->() DETACH DELETE end_vertex(a);
MATCH (a:repo) RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

MATCH (a) DETACH DELETE a;
MATCH (a) RETURN a;
 a 
---
(0 rows)

SELECT count(*) FROM agens.ag_edge;
 count 
-------
     0
(1 row)

--
-- Uniqueness
--
CREATE GRAPH u;
SET graph_path = u;
CREATE ELABEL rel;
CREATE (s {'id': 1})-[:rel {'p': 'a'}]->({'id': 2})-[:rel {'p': 'b'}]->(s);
MATCH (s)-[r1]-(m)-[r2]-(x)
RETURN s.id AS s, r1.p AS r1, m.id AS m, r2.p AS r2, x.id AS x
       ORDER BY s, r1, m, r2, x;
 s | r1 | m | r2 | x 
---+----+---+----+---
 1 | a  | 2 | b  | 1
 1 | b  | 2 | a  | 1
 2 | a  | 1 | b  | 2
 2 | b  | 1 | a  | 2
(4 rows)

--
-- SET/REMOVE
--
CREATE GRAPH p;
SET graph_path = p;
CREATE ELABEL rel;
CREATE ({'name': 'someone'})-[:rel {'k': 'v'}]->({'name': 'somebody'});
MATCH (n)-[r]->(m) SET r.l = '"w"', n = m, r.k = NULL;
MATCH (n)-[r]->(m) REMOVE m.name;
MATCH (n)-[r]->(m)
RETURN properties(n) as n, properties(r) as r, properties(m) as m;
          n           |     r      | m  
----------------------+------------+----
 {"name": "somebody"} | {"l": "w"} | {}
(1 row)

-- multiple SET
MATCH (n)-[r]->(m) SET r.l = '"x"' SET r.l = '"y"';
MATCH (n)-[r]->(m)
RETURN properties(r) as r;
     r      
------------
 {"l": "y"}
(1 row)

-- cleanup
DROP GRAPH p CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label rel
DROP GRAPH u CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label rel
DROP GRAPH t CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label time
drop cascades to label goes
DROP GRAPH o CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label person
drop cascades to label knows
SET graph_path = agens;
DROP VLABEL feature;
DROP ELABEL supported;
DROP VLABEL repo;
DROP ELABEL lib;
DROP ELABEL doc;
DROP GRAPH agens CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to label ag_vertex
drop cascades to label ag_edge
DROP TABLE history;
