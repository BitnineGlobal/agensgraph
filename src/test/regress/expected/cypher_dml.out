--
-- Cypher Query Language - DML
--
-- prepare
DROP TABLE IF EXISTS history;
NOTICE:  table "history" does not exist, skipping
CREATE TABLE history (year, event) AS VALUES
(1996, 'PostgreSQL'),
(2016, 'Graph');
DROP GRAPH agens CASCADE;
ERROR:  graph "agens" does not exist
CREATE GRAPH agens;
--
-- RETURN
--
RETURN 3 + 4, 'hello' || ' agens';
 ?column? |  ?column?   
----------+-------------
        7 | hello agens
(1 row)

RETURN 3 + 4 AS lucky, 'hello' || ' agens' AS greeting;
 lucky |  greeting   
-------+-------------
     7 | hello agens
(1 row)

RETURN (SELECT event FROM history WHERE year = 2016);
 event 
-------
 Graph
(1 row)

SELECT * FROM (RETURN 3 + 4, 'hello' || ' agens') AS _(lucky, greeting);
 lucky |  greeting   
-------+-------------
     7 | hello agens
(1 row)

--
-- CREATE
--
CREATE VLABEL repo;
CREATE ELABEL lib;
CREATE ELABEL doc;
CREATE (g:repo {'name': 'agens-graph',
                year: (SELECT year FROM history WHERE event = 'Graph')})
RETURN properties(g) AS g;
                   g                   
---------------------------------------
 {"name": "agens-graph", "year": 2016}
(1 row)

MATCH (g:repo)
CREATE (j:repo '{"name": "agens-graph-jdbc", "year": 2016}'),
       (d:repo =jsonb_build_object('name', 'agens-graph-docs', 'year', 2016))
CREATE (g)-[l:lib {lang: 'java'}]->(j),
       p=(g)
         -[:lib {lang: 'c'}]->
         (:repo {name: 'agens-graph-odbc', year: 2016}),
       (g)-[e:doc {lang: 'en'}]->(d)
RETURN properties(l) AS lj, properties(j) AS j,
       properties((edges(p))[1]) AS lc, properties((vertices(p))[2]) AS c,
       properties(e) AS e, properties(d) AS d;
        lj        |                     j                      |      lc       |                     c                      |       e        |                     d                      
------------------+--------------------------------------------+---------------+--------------------------------------------+----------------+--------------------------------------------
 {"lang": "java"} | {"name": "agens-graph-jdbc", "year": 2016} | {"lang": "c"} | {"name": "agens-graph-odbc", "year": 2016} | {"lang": "en"} | {"name": "agens-graph-docs", "year": 2016}
(1 row)

CREATE ()-[a:lib]->(a);
ERROR:  duplicate variable "a"
LINE 1: CREATE ()-[a:lib]->(a);
                            ^
CREATE a=(), (a);
ERROR:  duplicate variable "a"
LINE 1: CREATE a=(), (a);
                      ^
CREATE (a), (a {});
ERROR:  duplicate variable "a"
LINE 1: CREATE (a), (a {});
                     ^
CREATE (a), (a);
ERROR:  there must be at least one relationship
LINE 1: CREATE (a), (a);
                     ^
CREATE (=0);
ERROR:  property map must be of type jsonb
LINE 1: CREATE (=0);
                 ^
CREATE ()-[]-();
ERROR:  only directed relationships are allowed in CREATE
CREATE ()-[]->();
ERROR:  only one relationship type is allowed for CREATE
CREATE ()-[:lib|doc]->();
ERROR:  only one relationship type is allowed for CREATE
CREATE (a)-[a:lib]->();
ERROR:  duplicate variable "a"
LINE 1: CREATE (a)-[a:lib]->();
                    ^
CREATE ()-[a:lib]->()-[a:doc]->();
ERROR:  duplicate variable "a"
LINE 1: CREATE ()-[a:lib]->()-[a:doc]->();
                               ^
CREATE a=(), ()-[a:doc]->();
ERROR:  duplicate variable "a"
LINE 1: CREATE a=(), ()-[a:doc]->();
                         ^
CREATE ()-[:lib =0]->();
ERROR:  property map must be of type jsonb
LINE 1: CREATE ()-[:lib =0]->();
                         ^
CREATE (a), a=();
ERROR:  duplicate variable "a"
LINE 1: CREATE (a), a=();
                    ^
CREATE ()-[a:lib]->(), a=();
ERROR:  duplicate variable "a"
LINE 1: CREATE ()-[a:lib]->(), a=();
                               ^
CREATE a=(), a=();
ERROR:  duplicate variable "a"
LINE 1: CREATE a=(), a=();
                     ^
CREATE (:lib);
ERROR:  vertex label "lib" does not exist
LINE 1: CREATE (:lib);
                 ^
CREATE ()-[:repo]->();
ERROR:  edge label "repo" does not exist
LINE 1: CREATE ()-[:repo]->();
                    ^
CREATE (=null::jsonb)-[:lib =null::jsonb]->();
CREATE TABLE t1 (prop jsonb);
CREATE (=(SELECT prop FROM t1))-[:lib =(SELECT prop FROM t1)]->();
MATCH (a) WHERE a.name IS NULL DETACH DELETE a;
DROP TABLE t1;
--
-- MATCH
--
MATCH (a) RETURN a.name AS a;
        a         
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
(4 rows)

MATCH (a), (a) RETURN a.name AS a;
        a         
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
(4 rows)

CREATE ();
MATCH (a:repo) RETURN a.name AS name, a['year'] AS year;
       name       | year 
------------------+------
 agens-graph      | 2016
 agens-graph-jdbc | 2016
 agens-graph-docs | 2016
 agens-graph-odbc | 2016
(4 rows)

MATCH p=(a)-[b]-(c)
RETURN a.name AS a, b.lang AS b, c.name AS c
       ORDER BY a, b, c;
        a         |  b   |        c         
------------------+------+------------------
 agens-graph      | c    | agens-graph-odbc
 agens-graph      | en   | agens-graph-docs
 agens-graph      | java | agens-graph-jdbc
 agens-graph-docs | en   | agens-graph
 agens-graph-jdbc | java | agens-graph
 agens-graph-odbc | c    | agens-graph
(6 rows)

MATCH (a)<-[b]-(c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e
       ORDER BY a, b, c, d, e;
        a         |  b   |      c      |  d   |        e         
------------------+------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc
(6 rows)

MATCH (a)<-[b]-(c), (c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e
       ORDER BY a, b, c, d, e;
        a         |  b   |      c      |  d   |        e         
------------------+------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc
(6 rows)

MATCH (a)<-[b]-(c) MATCH (c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e
       ORDER BY a, b, c, d, e;
        a         |  b   |      c      |  d   |        e         
------------------+------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | en   | agens-graph-docs
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs
 agens-graph-jdbc | java | agens-graph | java | agens-graph-jdbc
 agens-graph-odbc | c    | agens-graph | c    | agens-graph-odbc
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc
(9 rows)

MATCH (a)<-[b]-(c), (f)-[g]->(h), (c)-[d]->(e)
RETURN a.name AS a, b.lang AS b, c.name AS c,
       d.lang AS d, e.name AS e,
       f.name AS f, g.lang AS g, h.name AS h
       ORDER BY a, b, c, d, e, f, g, h;
        a         |  b   |      c      |  d   |        e         |      f      |  g   |        h         
------------------+------+-------------+------+------------------+-------------+------+------------------
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc | agens-graph | en   | agens-graph-docs
 agens-graph-docs | en   | agens-graph | c    | agens-graph-odbc | agens-graph | java | agens-graph-jdbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc | agens-graph | c    | agens-graph-odbc
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc | agens-graph | en   | agens-graph-docs
 agens-graph-docs | en   | agens-graph | java | agens-graph-jdbc | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc | agens-graph | en   | agens-graph-docs
 agens-graph-jdbc | java | agens-graph | c    | agens-graph-odbc | agens-graph | java | agens-graph-jdbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs | agens-graph | c    | agens-graph-odbc
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs | agens-graph | en   | agens-graph-docs
 agens-graph-jdbc | java | agens-graph | en   | agens-graph-docs | agens-graph | java | agens-graph-jdbc
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs | agens-graph | c    | agens-graph-odbc
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | en   | agens-graph-docs | agens-graph | java | agens-graph-jdbc
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc | agens-graph | c    | agens-graph-odbc
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc | agens-graph | en   | agens-graph-docs
 agens-graph-odbc | c    | agens-graph | java | agens-graph-jdbc | agens-graph | java | agens-graph-jdbc
(18 rows)

MATCH (a {name: 'agens-graph'}), (a {year: 2016}) RETURN properties(a) AS a;
                   a                   
---------------------------------------
 {"name": "agens-graph", "year": 2016}
(1 row)

MATCH p=(a)-[]->({name: 'agens-graph-jdbc'}) RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

MATCH p=()-[:lib]->(a) RETURN a.name AS a;
        a         
------------------
 agens-graph-jdbc
 agens-graph-odbc
(2 rows)

MATCH p=()-[{lang: 'en'}]->(a) RETURN a.name AS a;
        a         
------------------
 agens-graph-docs
(1 row)

MATCH (a {year: (SELECT year FROM history WHERE event = 'Graph')})
WHERE a.name = 'agens-graph'
RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

MATCH (a), (a:repo) RETURN a.name AS a;
        a         
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
(4 rows)

MATCH ();
ERROR:  Cypher query must end with RETURN or update clause
MATCH ()-[a]-(), (a) RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]-(), (a) RETURN *;
                          ^
MATCH a=(), (a) RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH a=(), (a) RETURN *;
                     ^
MATCH (a =0) RETURN *;
ERROR:  property map must be of type jsonb
LINE 1: MATCH (a =0) RETURN *;
                  ^
MATCH ()-[a]-(a) RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]-(a) RETURN *;
                      ^
MATCH ()-[a]-()-[a]-() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]-()-[a]-() RETURN *;
                         ^
MATCH a=(), ()-[a]-() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH a=(), ()-[a]-() RETURN *;
                        ^
MATCH p=()-[:lib|doc]->() RETURN *;
ERROR:  multiple types for relationship not supported
MATCH ()-[a =0]-() RETURN *;
ERROR:  property map must be of type jsonb
LINE 1: MATCH ()-[a =0]-() RETURN *;
                     ^
MATCH (a), a=() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH (a), a=() RETURN *;
                   ^
MATCH ()-[a]->(), a=() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH ()-[a]->(), a=() RETURN *;
                          ^
MATCH a=(), a=() RETURN *;
ERROR:  duplicate variable "a"
LINE 1: MATCH a=(), a=() RETURN *;
                    ^
MATCH (:lib) RETURN *;
ERROR:  vertex label "lib" does not exist
LINE 1: MATCH (:lib) RETURN *;
                ^
MATCH ()-[:repo]->() RETURN *;
ERROR:  edge label "repo" does not exist
LINE 1: MATCH ()-[:repo]->() RETURN *;
                   ^
MATCH (a {name: properties->'name'}) RETURN *;
ERROR:  column "properties" does not exist
LINE 1: MATCH (a {name: properties->'name'}) RETURN *;
                        ^
MATCH (a {name: a.properties->'name'}) RETURN *;
ERROR:  operator does not exist: text -> unknown
LINE 1: MATCH (a {name: a.properties->'name'}) RETURN *;
                                    ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
-- OPTIONAL MATCH
CREATE GRAPH o;
SET graph_path = o;
CREATE VLABEL person;
CREATE ELABEL knows;
CREATE (:person {name: 'someone'})-[:knows]->(:person {name: 'somebody'}),
       (:person {name: 'anybody'})-[:knows]->(:person {name: 'nobody'});
OPTIONAL MATCH (n)-[r]->(p), (m)-[s]->(q)
RETURN n.name AS n, type(r) AS r, p.name AS p,
       m.name AS m, type(s) AS s, q.name AS q
ORDER BY n, p, m, q;
    n    |   r   |    p     |    m    |   s   |    q     
---------+-------+----------+---------+-------+----------
 anybody | knows | nobody   | anybody | knows | nobody
 anybody | knows | nobody   | someone | knows | somebody
 someone | knows | somebody | anybody | knows | nobody
 someone | knows | somebody | someone | knows | somebody
(4 rows)

MATCH (n:person), (m:person) WHERE id(n) <> id(m)
OPTIONAL MATCH (n)-[r]->(p), (m)-[s]->(q)
RETURN n.name AS n, type(r) AS r, p.name AS p,
       m.name AS m, type(s) AS s, q.name AS q
ORDER BY n, p, m, q;
    n     |   r   |    p     |    m     |   s   |    q     
----------+-------+----------+----------+-------+----------
 anybody  | knows | nobody   | someone  | knows | somebody
 anybody  |       |          | nobody   |       | 
 anybody  |       |          | somebody |       | 
 nobody   |       |          | anybody  |       | 
 nobody   |       |          | somebody |       | 
 nobody   |       |          | someone  |       | 
 somebody |       |          | anybody  |       | 
 somebody |       |          | nobody   |       | 
 somebody |       |          | someone  |       | 
 someone  | knows | somebody | anybody  | knows | nobody
 someone  |       |          | nobody   |       | 
 someone  |       |          | somebody |       | 
(12 rows)

MATCH (n:person), (m:person) WHERE id(n) <> id(m)
OPTIONAL MATCH (n)-[r]->(p), (m)-[s]->(q) WHERE m.name = 'someone'
RETURN n.name AS n, type(r) AS r, p.name AS p,
       m.name AS m, type(s) AS s, q.name AS q
ORDER BY n, p, m, q;
    n     |   r   |   p    |    m     |   s   |    q     
----------+-------+--------+----------+-------+----------
 anybody  | knows | nobody | someone  | knows | somebody
 anybody  |       |        | nobody   |       | 
 anybody  |       |        | somebody |       | 
 nobody   |       |        | anybody  |       | 
 nobody   |       |        | somebody |       | 
 nobody   |       |        | someone  |       | 
 somebody |       |        | anybody  |       | 
 somebody |       |        | nobody   |       | 
 somebody |       |        | someone  |       | 
 someone  |       |        | anybody  |       | 
 someone  |       |        | nobody   |       | 
 someone  |       |        | somebody |       | 
(12 rows)

-- Variable Length Relationship
CREATE GRAPH t;
SET graph_path = t;
CREATE VLABEL time;
CREATE ELABEL goes;
CREATE (:time {sec: 1})-[:goes]->
       (:time {sec: 2})-[:goes]->
       (:time {sec: 3})-[:goes]->
       (:time {sec: 4})-[:goes]->
       (:time {sec: 5})-[:goes]->
       (:time {sec: 6})-[:goes]->
       (:time {sec: 7})-[:goes]->
       (:time {sec: 8})-[:goes]->
       (:time {sec: 9});
CREATE (:time {sec: 9})-[:goes*1..2]->(:time {sec: 10});
ERROR:  variable length relationship is not allowed for CREATE
MATCH (a:time)-[x:goes*3]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 | 3 | 4
 2 | 3 | 5
 3 | 3 | 6
 4 | 3 | 7
 5 | 3 | 8
 6 | 3 | 9
(6 rows)

MATCH (a:time)-[x:goes*0]->(b:time)
RETURN a.sec AS a, x, b.sec AS b;
 a | x  | b 
---+----+---
 1 | {} | 1
 2 | {} | 2
 3 | {} | 3
 4 | {} | 4
 5 | {} | 5
 6 | {} | 6
 7 | {} | 7
 8 | {} | 8
 9 | {} | 9
(9 rows)

MATCH (a:time)-[x:goes*0..1]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 |   | 1
 1 | 1 | 2
 2 |   | 2
 2 | 1 | 3
 3 |   | 3
 3 | 1 | 4
 4 |   | 4
 4 | 1 | 5
 5 |   | 5
 5 | 1 | 6
 6 |   | 6
 6 | 1 | 7
 7 |   | 7
 7 | 1 | 8
 8 |   | 8
 8 | 1 | 9
 9 |   | 9
(17 rows)

MATCH (a:time)-[x:goes*..1]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 | 1 | 2
 2 | 1 | 3
 3 | 1 | 4
 4 | 1 | 5
 5 | 1 | 6
 6 | 1 | 7
 7 | 1 | 8
 8 | 1 | 9
(8 rows)

MATCH (a:time)-[x:goes*0..]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 |   | 1
 1 | 1 | 2
 1 | 2 | 3
 1 | 3 | 4
 1 | 4 | 5
 1 | 5 | 6
 1 | 6 | 7
 1 | 7 | 8
 1 | 8 | 9
 2 |   | 2
 2 | 1 | 3
 2 | 2 | 4
 2 | 3 | 5
 2 | 4 | 6
 2 | 5 | 7
 2 | 6 | 8
 2 | 7 | 9
 3 |   | 3
 3 | 1 | 4
 3 | 2 | 5
 3 | 3 | 6
 3 | 4 | 7
 3 | 5 | 8
 3 | 6 | 9
 4 |   | 4
 4 | 1 | 5
 4 | 2 | 6
 4 | 3 | 7
 4 | 4 | 8
 4 | 5 | 9
 5 |   | 5
 5 | 1 | 6
 5 | 2 | 7
 5 | 3 | 8
 5 | 4 | 9
 6 |   | 6
 6 | 1 | 7
 6 | 2 | 8
 6 | 3 | 9
 7 |   | 7
 7 | 1 | 8
 7 | 2 | 9
 8 |   | 8
 8 | 1 | 9
 9 |   | 9
(45 rows)

MATCH (a:time)-[x:goes*3..6]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 | 3 | 4
 1 | 4 | 5
 1 | 5 | 6
 1 | 6 | 7
 2 | 3 | 5
 2 | 4 | 6
 2 | 5 | 7
 2 | 6 | 8
 3 | 3 | 6
 3 | 4 | 7
 3 | 5 | 8
 3 | 6 | 9
 4 | 3 | 7
 4 | 4 | 8
 4 | 5 | 9
 5 | 3 | 8
 5 | 4 | 9
 6 | 3 | 9
(18 rows)

MATCH (a:time)-[x:goes*2]->(b:time)-[y:goes]->(c:time)-[z:goes*2]->(d:time)
RETURN a.sec AS a, array_length(x, 1) AS x,
       b.sec AS b, type(y) AS y,
       c.sec AS c, array_length(z, 1) AS z, d.sec AS d;
 a | x | b |  y   | c | z | d 
---+---+---+------+---+---+---
 1 | 2 | 3 | goes | 4 | 2 | 6
 2 | 2 | 4 | goes | 5 | 2 | 7
 3 | 2 | 5 | goes | 6 | 2 | 8
 4 | 2 | 6 | goes | 7 | 2 | 9
(4 rows)

MATCH (a:time)-[x:goes*2]->(b:time)
MATCH (b)-[y:goes]->(c:time)
MATCH (c)-[z:goes*2]->(d:time)
RETURN a.sec AS a, array_length(x, 1) AS x,
       b.sec AS b, type(y) AS y,
       c.sec AS c, array_length(z, 1) AS z, d.sec AS d;
 a | x | b |  y   | c | z | d 
---+---+---+------+---+---+---
 1 | 2 | 3 | goes | 4 | 2 | 6
 2 | 2 | 4 | goes | 5 | 2 | 7
 3 | 2 | 5 | goes | 6 | 2 | 8
 4 | 2 | 6 | goes | 7 | 2 | 9
(4 rows)

MATCH (d:time)<-[z:goes*2]-(c:time)<-[y:goes]-(b:time)<-[x:goes*2]-(a:time)
RETURN d.sec AS d, array_length(z, 1) AS z,
       c.sec AS c, type(y) AS y,
       b.sec AS b, array_length(x, 1) AS x, a.sec AS a;
 d | z | c |  y   | b | x | a 
---+---+---+------+---+---+---
 6 | 2 | 4 | goes | 3 | 2 | 1
 7 | 2 | 5 | goes | 4 | 2 | 2
 8 | 2 | 6 | goes | 5 | 2 | 3
 9 | 2 | 7 | goes | 6 | 2 | 4
(4 rows)

MATCH (d:time)<-[z:goes*2]-(c:time)
MATCH (c)<-[y:goes]-(b:time)
MATCH (b)<-[x:goes*2]-(a:time)
RETURN d.sec AS d, array_length(z, 1) AS z,
       c.sec AS c, type(y) AS y,
       b.sec AS b, array_length(x, 1) AS x, a.sec AS a;
 d | z | c |  y   | b | x | a 
---+---+---+------+---+---+---
 9 | 2 | 7 | goes | 6 | 2 | 4
 6 | 2 | 4 | goes | 3 | 2 | 1
 7 | 2 | 5 | goes | 4 | 2 | 2
 8 | 2 | 6 | goes | 5 | 2 | 3
(4 rows)

MATCH (a:time)-[x*0..2]-(b)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a | x | b 
---+---+---
 1 |   | 1
 1 | 1 | 2
 1 | 2 | 3
 2 | 1 | 1
 2 |   | 2
 2 | 1 | 3
 2 | 2 | 4
 3 | 2 | 1
 3 | 1 | 2
 3 |   | 3
 3 | 1 | 4
 3 | 2 | 5
 4 | 2 | 2
 4 | 1 | 3
 4 |   | 4
 4 | 1 | 5
 4 | 2 | 6
 5 | 2 | 3
 5 | 1 | 4
 5 |   | 5
 5 | 1 | 6
 5 | 2 | 7
 6 | 2 | 4
 6 | 1 | 5
 6 |   | 6
 6 | 1 | 7
 6 | 2 | 8
 7 | 2 | 5
 7 | 1 | 6
 7 |   | 7
 7 | 1 | 8
 7 | 2 | 9
 8 | 2 | 6
 8 | 1 | 7
 8 |   | 8
 8 | 1 | 9
 9 | 2 | 7
 9 | 1 | 8
 9 |   | 9
(39 rows)

CREATE (:time {sec: 11})-[:goes {int: 1}]->
       (:time {sec: 12})-[:goes {int: 1}]->
       (:time {sec: 13})-[:goes {int: 2}]->
       (:time {sec: 15})-[:goes {int: 1}]->
       (:time {sec: 16})-[:goes {int: 1}]->
       (:time {sec: 17});
MATCH (a:time)-[x:goes*1..2 {int: 1}]->(b:time)
RETURN a.sec AS a, array_length(x, 1) AS x, b.sec AS b;
 a  | x | b  
----+---+----
 11 | 1 | 12
 11 | 2 | 13
 12 | 1 | 13
 15 | 1 | 16
 15 | 2 | 17
 16 | 1 | 17
(6 rows)

create vlabel person;
create elabel knows;
-- 1->2->3->4
CREATE (:person {id: 1})-[:knows]->
       (:person {id: 2})-[:knows]->
       (:person {id: 3})-[:knows]->
       (:person {id: 4});
match (a:person {id: 1})-[x:knows*1..2]->(b:person) return a.id, b.id, x;
 id | id |     x     
----+----+-----------
 1  | 2  | {6.1}
 1  | 3  | {6.1,6.2}
(2 rows)

-- 1->2->3->4
-- `->5
match (a:person {id: 1}) create (a)-[:knows]->(:person {id: 5});
match (a:person {id: 1})-[x:knows*1..2]->(b:person) return a.id, b.id, x;
 id | id |     x     
----+----+-----------
 1  | 2  | {6.1}
 1  | 3  | {6.1,6.2}
 1  | 5  | {6.4}
(3 rows)

-- 1<->2->3->4
-- `->5
match (a:person {id: 2}), (b:person {id: 1}) create (a)-[:knows]->(b);
match (a:person {id: 1})-[x:knows*1..2]->(b:person) return a.id, b.id, x;
 id | id |     x     
----+----+-----------
 1  | 1  | {6.1,6.5}
 1  | 2  | {6.1}
 1  | 3  | {6.1,6.2}
 1  | 5  | {6.4}
(4 rows)

match (a:person {id: 1})-[x:knows*0..0]->(b:person) return a.id, b.id, x;
 id | id | x  
----+----+----
 1  | 1  | {}
(1 row)

match (a:person {id: 1})-[x:knows*0..1]->(b:person) return a.id, b.id, x;
 id | id |   x   
----+----+-------
 1  | 1  | {}
 1  | 2  | {6.1}
 1  | 5  | {6.4}
(3 rows)

match (a:person {id: 1})-[x:knows*2..2]->(b:person) return a.id, b.id, x;
 id | id |     x     
----+----+-----------
 1  | 1  | {6.1,6.5}
 1  | 3  | {6.1,6.2}
(2 rows)

match (a:person {id: 2})-[x:knows*1..1]->(b:person) return a.id, b.id, x;
 id | id |   x   
----+----+-------
 2  | 1  | {6.5}
 2  | 3  | {6.2}
(2 rows)

match (a:person)-[x:knows*1..1]->(b:person) return a.id, b.id, x;
 id | id |   x   
----+----+-------
 1  | 2  | {6.1}
 1  | 5  | {6.4}
 2  | 1  | {6.5}
 2  | 3  | {6.2}
 3  | 4  | {6.3}
(5 rows)

match (a:person)-[x:knows*]->(b:person) return a.id, b.id, x;
 id | id |         x         
----+----+-------------------
 1  | 2  | {6.1}
 1  | 1  | {6.1,6.5}
 1  | 5  | {6.1,6.5,6.4}
 1  | 3  | {6.1,6.2}
 1  | 4  | {6.1,6.2,6.3}
 1  | 5  | {6.4}
 2  | 1  | {6.5}
 2  | 2  | {6.5,6.1}
 2  | 3  | {6.5,6.1,6.2}
 2  | 4  | {6.5,6.1,6.2,6.3}
 2  | 5  | {6.5,6.4}
 2  | 3  | {6.2}
 2  | 4  | {6.2,6.3}
 3  | 4  | {6.3}
(14 rows)

match (a:person {id: 1})-[x:knows*0..3]->(b:person) return a.id, b.id, x;
 id | id |       x       
----+----+---------------
 1  | 1  | {6.1,6.5}
 1  | 1  | {}
 1  | 2  | {6.1}
 1  | 3  | {6.1,6.2}
 1  | 4  | {6.1,6.2,6.3}
 1  | 5  | {6.4}
 1  | 5  | {6.1,6.5,6.4}
(7 rows)

match (a:person {id: 1})-[x*1..2]-(b:person) return a.id, b.id, x;
 id | id |     x     
----+----+-----------
 1  | 2  | {6.1}
 1  | 1  | {6.1,6.5}
 1  | 3  | {6.1,6.2}
 1  | 5  | {6.4}
 1  | 2  | {6.5}
 1  | 3  | {6.5,6.2}
 1  | 1  | {6.5,6.1}
(7 rows)

-- 1->2->3->4
-- `->5
match (a:person {id: 2})-[k:knows]->(b:person {id: 1}) delete k;
-- +<----+
-- 1->2->3->4
-- `->5
match (a:person {id: 3}), (b:person {id: 1}) create (a)-[:knows]->(b);
match (a:person {id: 1})-[x:knows*1..]->(b:person) return a.id, b.id, x;
 id | id |         x         
----+----+-------------------
 1  | 2  | {6.1}
 1  | 3  | {6.1,6.2}
 1  | 1  | {6.1,6.2,6.6}
 1  | 5  | {6.1,6.2,6.6,6.4}
 1  | 4  | {6.1,6.2,6.3}
 1  | 5  | {6.4}
(6 rows)

-- shortestpath(), allshortestpaths()
CREATE OR REPLACE FUNCTION ids(vertex[]) RETURNS int[] AS $$
DECLARE
  v vertex;
  vids int[];
BEGIN
  IF $1 IS NULL THEN
    RETURN ARRAY[]::int[];
  END IF;
  FOREACH v IN ARRAY $1 LOOP
    vids = array_append(vids, (v).id::int);
  END LOOP;
  RETURN vids;
END;
$$ LANGUAGE plpgsql;
-- 1->2->3->4->5
match (a:person {id: 3})-[k:knows]->(b:person {id: 1}) delete k;
match (a:person {id: 1})-[k:knows]->(b:person {id: 5}) delete k;
match (a:person {id: 4}), (b:person {id: 5}) create (a)-[:knows]->(b);
MATCH (p:person), (f:person) WHERE p.id::int = 3 AND f.id::int = 4
RETURN ids(nodes(shortestpath((p)-[:knows]->(f)))) AS ids;
  ids  
-------
 {3,4}
(1 row)

MATCH (p:person), (f:person) WHERE p.id::int = 3 AND f.id::int = 5
RETURN ids(nodes(shortestpath((p)-[:knows]->(f)))) AS ids;
 ids 
-----
 {}
(1 row)

MATCH (p:person), (f:person) WHERE p.id::int = 3
RETURN ids(nodes(shortestpath((p)<-[:knows]-(f)))) AS ids;
  ids  
-------
 {}
 {3,2}
 {}
 {}
 {}
(5 rows)

MATCH (p:person), (f:person) WHERE p.id::int = 3
RETURN ids(nodes(shortestpath((p)-[:knows*]-(f)))) AS ids;
   ids   
---------
 {3,2,1}
 {3,2}
 {}
 {3,4}
 {3,4,5}
(5 rows)

MATCH (p:person), (f:person), x = shortestpath((p)-[:knows*]-(f))
WHERE p.id::int = 3
RETURN ids(nodes(x)) AS ids;
   ids   
---------
 {3,2,1}
 {3,2}
 {3,4}
 {3,4,5}
(4 rows)

MATCH x = shortestpath((p:person)-[:knows*]-(f:person))
WHERE p.id::int = 3
RETURN ids(nodes(x)) AS ids;
   ids   
---------
 {3,2,1}
 {3,2}
 {3,4}
 {3,4,5}
(4 rows)

MATCH (p:person), (f:person) WHERE p.id::int = 3
RETURN ids(nodes(shortestpath((p)-[:knows*0..1]-(f)))) AS ids;
  ids  
-------
 {}
 {3,2}
 {3}
 {3,4}
 {}
(5 rows)

MATCH (p:person), (f:person) WHERE p.id::int = 1
RETURN ids(nodes(shortestpath((p)-[:knows*2..]->(f)))) AS ids;
ERROR:  only 0 or 1 is allowed for minimal length
LINE 2: RETURN ids(nodes(shortestpath((p)-[:knows*2..]->(f)))) AS id...
                                                  ^
MATCH (p:person), (f:person) WHERE p.id::int = 3 AND f.id::int = 5
CREATE (p)-[:knows]->(:person {id: 6})-[:knows]->(f);
MATCH (p:person), (f:person) WHERE p.id::int = 1 AND f.id::int = 5
RETURN array_length(allshortestpaths((p)-[:knows*]-(f)), 1) AS cnt;
 cnt 
-----
   2
(1 row)

SET graph_path = agens;
--
-- DISTINCT
--
MATCH (a:repo)-[]-() RETURN DISTINCT a.name AS a ORDER BY a;
        a         
------------------
 agens-graph
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(4 rows)

MATCH (a:repo)-[b]-(c)
RETURN DISTINCT ON (a) a.name AS a, b.lang AS b, c.name AS c;
        a         |  b   |        c         
------------------+------+------------------
 agens-graph      | java | agens-graph-jdbc
 agens-graph-docs | en   | agens-graph
 agens-graph-jdbc | java | agens-graph
 agens-graph-odbc | c    | agens-graph
(4 rows)

--
-- ORDER BY
--
MATCH (a:repo) RETURN a.name AS a ORDER BY a;
        a         
------------------
 agens-graph
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(4 rows)

MATCH (a:repo) RETURN a.name AS a ORDER BY a ASC;
        a         
------------------
 agens-graph
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(4 rows)

MATCH (a:repo) RETURN a.name AS a ORDER BY a DESC;
        a         
------------------
 agens-graph-odbc
 agens-graph-jdbc
 agens-graph-docs
 agens-graph
(4 rows)

--
-- SKIP and LIMIT
--
MATCH (a:repo) RETURN a.name AS a ORDER BY a SKIP 1 LIMIT 1;
        a         
------------------
 agens-graph-docs
(1 row)

--
-- WITH
--
MATCH (a:repo) WITH a.name AS name RETURN name;
       name       
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
(4 rows)

MATCH (a)
WITH a WHERE label(a) = 'repo'
MATCH p=(a)-[]->(b)
RETURN b.name AS b ORDER BY b;
        b         
------------------
 agens-graph-docs
 agens-graph-jdbc
 agens-graph-odbc
(3 rows)

MATCH (a) WITH a RETURN b;
ERROR:  column "b" does not exist
LINE 1: MATCH (a) WITH a RETURN b;
                                ^
MATCH (a) WITH a.name RETURN *;
ERROR:  expression in WITH must be aliased (use AS)
LINE 1: MATCH (a) WITH a.name RETURN *;
                       ^
MATCH () WITH a AS z RETURN a;
ERROR:  column "a" does not exist
LINE 1: MATCH () WITH a AS z RETURN a;
                      ^
--
-- UNION
--
MATCH (a:repo)
RETURN a.name AS a
UNION ALL
MATCH ()-[b:lib]->()
RETURN DISTINCT b.lang AS b
UNION ALL
MATCH ()-[c:doc]->()
RETURN DISTINCT c.lang AS c;
        a         
------------------
 agens-graph
 agens-graph-jdbc
 agens-graph-docs
 agens-graph-odbc
 c
 java
 en
(7 rows)

MATCH (a)
RETURN a
UNION
MATCH (b)
RETURN b.name;
ERROR:  UNION types vertex and text cannot be matched
--
-- aggregates
--
MATCH (a)-[]-(b) RETURN count(a) AS a, b.name AS b ORDER BY a, b;
 a |        b         
---+------------------
 1 | agens-graph-docs
 1 | agens-graph-jdbc
 1 | agens-graph-odbc
 3 | agens-graph
(4 rows)

--
-- EXISTS
--
MATCH (a:repo) WHERE exists((a)-[]->()) RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

--
-- SIZE
--
MATCH (a:repo) RETURN a.name AS a, size((a)-[]->()) AS s;
        a         | s 
------------------+---
 agens-graph      | 3
 agens-graph-jdbc | 0
 agens-graph-docs | 0
 agens-graph-odbc | 0
(4 rows)

--
-- LOAD
--
MATCH (a) LOAD FROM history AS a RETURN *;
ERROR:  duplicate variable "a"
CREATE VLABEL feature;
CREATE ELABEL supported;
MATCH (a:repo {name: 'agens-graph'})
LOAD FROM history AS h
CREATE (:feature {name: (h).event})-[:supported]->(a);
MATCH p=(a)-[:supported]->() RETURN properties(a) AS a ORDER BY a;
           a            
------------------------
 {"name": "Graph"}
 {"name": "PostgreSQL"}
(2 rows)

--
-- DELETE
--
MATCH (a) DELETE a;
ERROR:  vertex 1 in "repo" has edge(s)
MATCH p=()-[:lib]->() DETACH DELETE (vertices(p))[2];
MATCH (a:repo) RETURN a.name AS a;
        a         
------------------
 agens-graph
 agens-graph-docs
(2 rows)

MATCH ()-[a:doc]->() DETACH DELETE end_vertex(a);
MATCH (a:repo) RETURN a.name AS a;
      a      
-------------
 agens-graph
(1 row)

MATCH (a) DETACH DELETE a;
MATCH (a) RETURN a;
 a 
---
(0 rows)

SELECT count(*) FROM agens.ag_edge;
 count 
-------
     0
(1 row)

--
-- Uniqueness
--
CREATE GRAPH u;
SET graph_path = u;
CREATE ELABEL rel;
CREATE (s {id: 1})-[:rel {p: 'a'}]->({id: 2})-[:rel {p: 'b'}]->(s);
MATCH (s)-[r1]-(m)-[r2]-(x)
RETURN s.id AS s, r1.p AS r1, m.id AS m, r2.p AS r2, x.id AS x
       ORDER BY s, r1, m, r2, x;
 s | r1 | m | r2 | x 
---+----+---+----+---
 1 | a  | 2 | b  | 1
 1 | b  | 2 | a  | 1
 2 | a  | 1 | b  | 2
 2 | b  | 1 | a  | 2
(4 rows)

--
-- SET/REMOVE
--
CREATE GRAPH p;
SET graph_path = p;
CREATE ELABEL rel;
CREATE ({name: 'someone'})-[:rel {k: 'v'}]->({name: 'somebody'});
MATCH (n)-[r]->(m) SET r.l = '"w"', n = m, r.k = NULL;
MATCH (n)-[r]->(m) REMOVE m.name;
MATCH (n)-[r]->(m)
RETURN properties(n) AS n, properties(r) AS r, properties(m) AS m;
          n           |     r      | m  
----------------------+------------+----
 {"name": "somebody"} | {"l": "w"} | {}
(1 row)

MATCH (n) DETACH DELETE (n);
-- overwrite (Standard SQL)
CREATE ({age: 10});
MATCH (a) SET a.age = '11', a.age = (a.age::int + 1)::text::jsonb;
MATCH (a) RETURN properties(a);
 properties  
-------------
 {"age": 11}
(1 row)

MATCH (a) DETACH DELETE (a);
-- multiple SET's
CREATE ({age: 10});
MATCH (a) SET a.age = '11' SET a.age = (a.age::int + 1)::text::jsonb;
MATCH (a) RETURN properties(a);
 properties  
-------------
 {"age": 12}
(1 row)

MATCH (a) DETACH DELETE (a);
CREATE ()-[:rel {k: 'v'}]->();
MATCH ()-[r]->() SET r.l = '"x"' SET r.l = '"y"';
MATCH ()-[r]->() RETURN properties(r) AS r;
          r           
----------------------
 {"k": "v", "l": "y"}
(1 row)

MATCH (a) DETACH DELETE (a);
CREATE ({age: 1})-[:rel]->({age: 2});
MATCH (a)-[]->(b)
SET a.age = to_jsonb(a.age::int + 1), b.age = to_jsonb(a.age::int + b.age::int);
MATCH (a)-[]->(b) RETURN properties(a) AS a, properties(b) AS b;
     a      |     b      
------------+------------
 {"age": 2} | {"age": 4}
(1 row)

MATCH (a) DETACH DELETE (a);
-- += operator
CREATE ({age: 10});
MATCH (a) SET a += {name: 'bitnine', age: '3'};
MATCH (a) RETURN properties(a);
           properties            
---------------------------------
 {"age": "3", "name": "bitnine"}
(1 row)

MATCH (a) SET a += NULL;
ERROR:  cannot set property map to NULL
LINE 1: MATCH (a) SET a += NULL;
                           ^
HINT:  use {} instead of NULL to remove all properties
MATCH (a) SET a.name += NULL;
ERROR:  += operator on a property is not allowed
LINE 1: MATCH (a) SET a.name += NULL;
                      ^
MATCH (a) SET a.name += '"someone"';
ERROR:  += operator on a property is not allowed
LINE 1: MATCH (a) SET a.name += '"someone"';
                      ^
MATCH (a) DETACH DELETE (a);
-- remove
CREATE ({a: 'a', b: 'b', c: 'c'});
MATCH (a) SET a.a = NULL REMOVE a.b;
MATCH (a) RETURN properties(a);
 properties 
------------
 {"c": "c"}
(1 row)

MATCH (a) SET a = NULL;
ERROR:  cannot set property map to NULL
LINE 1: MATCH (a) SET a = NULL;
                          ^
HINT:  use {} instead of NULL to remove all properties
MATCH (a) DETACH DELETE (a);
-- referring to undefined attributes
CREATE ({name: 'bitnine'});
CREATE ({age: 10});
MATCH (a) SET a.age = (a.age::int + 1)::text::jsonb;
WARNING:  property map cannot be NULL
MATCH (a) RETURN properties(a);
     properties      
---------------------
 {"name": "bitnine"}
 {"age": 11}
(2 rows)

-- working with NULL
CREATE VLABEL person;
CREATE (:person {name: 'bitnine', age: NULL});
MATCH (a:person {name: 'bitnine'}) RETURN properties(a) AS a;
          a          
---------------------
 {"name": "bitnine"}
(1 row)

MATCH (a:person {age: NULL}) RETURN properties(a) AS a;
 a 
---
(0 rows)

MATCH (a:person) WHERE a.age IS NULL RETURN properties(a) AS a;
          a          
---------------------
 {"name": "bitnine"}
(1 row)

--
-- MERGE
--
CREATE GRAPH gm;
SET GRAPH_PATH = gm;
CREATE VLABEL v1;
CREATE VLABEL v2;
CREATE ELABEL e1;
MERGE (a);
MATCH (a) DELETE a;
CREATE (:v1 {name:'foo'}), (:v1 {name:'bar'}), (:v1 {name:'foo'}), (:v1 {name:'bar'});
MATCH (a:v1)
MERGE (b:v2 {name:a.name})
  ON CREATE SET b.created = 'true' ON MATCH SET b.matched = 'true';
MATCH (a:v2) RETURN properties(a);
                    properties                     
---------------------------------------------------
 {"name": "foo", "created": true, "matched": true}
 {"name": "bar", "created": true, "matched": true}
(2 rows)

MATCH (a:v1)
MERGE (a)-[r:e1 {type:'same name'}]->(b:v2 {name:a.name})
  ON CREATE SET r.created = 'true', r.matched = null
  ON MATCH SET r.matched = 'true', r.created = null;
MATCH (a)-[r:e1]->(b) RETURN properties(a), properties(r), properties(b);
   properties    |               properties               |   properties    
-----------------+----------------------------------------+-----------------
 {"name": "foo"} | {"type": "same name", "created": true} | {"name": "foo"}
 {"name": "bar"} | {"type": "same name", "created": true} | {"name": "bar"}
 {"name": "foo"} | {"type": "same name", "created": true} | {"name": "foo"}
 {"name": "bar"} | {"type": "same name", "created": true} | {"name": "bar"}
(4 rows)

MATCH (a:v1)
MERGE (a)-[r:e1 {type:'same name'}]->(b:v2 {name:a.name})
  ON CREATE SET r.created = 'true', r.matched = null
  ON MATCH SET r.matched = 'true', r.created = null;
MATCH (a)-[r:e1]->(b) RETURN properties(a), properties(r), properties(b);
   properties    |               properties               |   properties    
-----------------+----------------------------------------+-----------------
 {"name": "foo"} | {"type": "same name", "matched": true} | {"name": "foo"}
 {"name": "bar"} | {"type": "same name", "matched": true} | {"name": "bar"}
 {"name": "foo"} | {"type": "same name", "matched": true} | {"name": "foo"}
 {"name": "bar"} | {"type": "same name", "matched": true} | {"name": "bar"}
(4 rows)

MATCH (a:v2) RETURN properties(a);
                    properties                     
---------------------------------------------------
 {"name": "foo", "created": true, "matched": true}
 {"name": "bar", "created": true, "matched": true}
 {"name": "foo"}
 {"name": "bar"}
 {"name": "foo"}
 {"name": "bar"}
(6 rows)

MERGE (a:v1)-[r1:e1]->(b:v2)
MERGE (a)-[r2:e1]->(b)
  ON CREATE SET r2.created = 'true';
MATCH p=(a)-[r:e1 {created:true}]->(b) RETURN count(p);
 count 
-------
     0
(1 row)

CREATE (:v1 {name:'v1-1'});
MERGE (a:v1 {name:'v1-1'})-[:e1]->(b:v2 {name:'v2-1'});
MATCH (a:v1 {name:'v1-1'})-[r]->(b) RETURN properties(a), properties(b);
    properties    |    properties    
------------------+------------------
 {"name": "v1-1"} | {"name": "v2-1"}
(1 row)

MATCH (a:v1 {name:'v1-1'}) RETURN count(a);
 count 
-------
     2
(1 row)

MATCH (a:v1 {name:'v1-1'}) DETACH DELETE a;
CREATE (:v1 {name:'v1-1'});
MERGE (a:v1 {name:'v1-1'})
MERGE (b:v2 {name:'v2-1'})
MERGE (a)-[:e1]->(b);
MATCH (a:v1 {name:'v1-1'})-[r]->(b) RETURN properties(a), properties(b);
    properties    |    properties    
------------------+------------------
 {"name": "v1-1"} | {"name": "v2-1"}
(1 row)

MATCH (a:v1 {name:'v1-1'}) RETURN count(a);
 count 
-------
     1
(1 row)

MATCH (a:v1 {name:'v1-1'}) DETACH DELETE a;
CREATE VLABEL person;
CREATE VLABEL city;
CREATE ELABEL hometown;
CREATE (:person {name:'a', bornin:'seoul'}),
       (:person {name:'b', bornin:'san jose'}),
       (:person {name:'c', bornin:'jeju'}),
       (:person {name:'d', bornin:'san jose'}),
       (:person {name:'e', bornin:'seoul'}),
       (:person {name:'f', bornin:'los angeles'});
MATCH (a:person)
MERGE (b:city {name:a.bornin})
  ON CREATE SET b.population = '1'
  ON MATCH SET b.population = (b.population::int + 1)::text::jsonb;
MATCH (c:city) RETURN properties(c);
                properties                
------------------------------------------
 {"name": "jeju", "population": 1}
 {"name": "san jose", "population": 2}
 {"name": "seoul", "population": 2}
 {"name": "los angeles", "population": 1}
(4 rows)

MATCH (a:person)
MERGE (a)-[:hometown]->(b:city {name:a.bornin});
MATCH (:city)<-[r]-(:person) RETURN count(r);
 count 
-------
     6
(1 row)

MATCH (a:city) DETACH DELETE a;
CREATE CONSTRAINT ON city ASSERT name is unique;
MATCH (a:person)
MERGE (a)-[:hometown]->(b:city {name:a.bornin});
ERROR:  conflicting key value violates exclusion constraint "city_unique_constraint"
DETAIL:  Key ((properties #>> ARRAY['name'::text]))=(san jose) conflicts with existing key ((properties #>> ARRAY['name'::text]))=(san jose).
MATCH (a:city) DETACH DELETE a;
-- unspecified direction
CREATE (a {id:'2'}), (b {id:'1'});
MATCH (a {id:'2'}), (b {id:'1'})
MERGE (a)-[r:e1]-(b)
RETURN properties(startnode(r)) as s, properties(endnode(r)) as e;
      s      |      e      
-------------+-------------
 {"id": "2"} | {"id": "1"}
(1 row)

MATCH (a {id:'1'}), (b {id:'2'})
MERGE (a)-[r:e1]-(b)
RETURN properties(a), properties(b);
 properties  | properties  
-------------+-------------
 {"id": "1"} | {"id": "2"}
(1 row)

MATCH (a) DETACH DELETE a;
CREATE (a {id: 2}), (b {id: 1}), (c {id: 1}), (d {id: 2})
CREATE (a)-[:e1 {name: 'ab'}]->(b)
CREATE (c)-[:e1 {name: 'cd'}]->(d);
MATCH (a {id: 2})-[]-(b {id: 1})
MERGE (a)-[r:e1]-(b)
RETURN r;
               r                
--------------------------------
 e1[5.8][1.4,1.5]{"name": "ab"}
 e1[5.9][1.6,1.7]{"name": "cd"}
(2 rows)

MATCH (a) DETACH DELETE a;
-- update clauses
CREATE (a:v1 {name:'bitnine'}) MERGE (:v2 {name:a.name});
CREATE (a:v1 {name:'AgensGraph'})
MERGE (b:v2 {name:a.name})
RETURN properties(a), properties(b);
       properties       |       properties       
------------------------+------------------------
 {"name": "AgensGraph"} | {"name": "AgensGraph"}
(1 row)

MERGE (a:v1 {name:'bitnine'})
MERGE (b:v1 {name:'AgensGraph'})
CREATE p=(a)-[r:e1 {name:a.name || b.name}]->(b)
RETURN properties(a), properties(r), properties(b), count(p);
     properties      |          properties           |       properties       | count 
---------------------+-------------------------------+------------------------+-------
 {"name": "bitnine"} | {"name": "bitnineAgensGraph"} | {"name": "AgensGraph"} |     1
(1 row)

MERGE (a {name:'bitnine'})
CREATE (b:v1 {name:a.name})
MERGE (c:v1 {name:'bitnine'})
	ON MATCH SET c.matched = 'true'
	ON CREATE SET c.matched = 'false';
MATCH (a) RETURN properties(a);
              properties              
--------------------------------------
 {"name": "AgensGraph"}
 {"name": "bitnine", "matched": true}
 {"name": "bitnine", "matched": true}
 {"name": "bitnine", "matched": true}
 {"name": "bitnine"}
 {"name": "AgensGraph"}
(6 rows)

-- wrong case
MERGE (a:v1) MERGE (b:v2 {name:a.notexistent});
ERROR:  cannot use null property value in MERGE
MERGE (a:v1) ON MATCH SET a.matched = 'true'
MERGE (b:v2 {name:a.name});
ERROR:  ON CREATE/MATCH SET between MERGE clauses is not allowed
MERGE (a:v1) MATCH (b:v2 {name:a.name}) RETURN a, b;
ERROR:  Cypher read clauses cannot follow update clauses
MERGE (a:v1) MERGE (b:v2 {name:a.name}) MERGE (a);
ERROR:  duplicate variable "a"
LINE 1: MERGE (a:v1) MERGE (b:v2 {name:a.name}) MERGE (a);
                                                       ^
MERGE (a)-[r]->(b);
ERROR:  only one relationship type is allowed for MERGE
MERGE (a)-[r:e1]->(b) MERGE (a);
ERROR:  duplicate variable "a"
LINE 1: MERGE (a)-[r:e1]->(b) MERGE (a);
                                     ^
MERGE (a)-[r:e1]->(b) MERGE (a)-[r:e1]->(b);
ERROR:  duplicate variable "r"
LINE 1: MERGE (a)-[r:e1]->(b) MERGE (a)-[r:e1]->(b);
                                         ^
MERGE (a)-[:e1]->(a:v1);
ERROR:  duplicate variable "a"
LINE 1: MERGE (a)-[:e1]->(a:v1);
                          ^
DROP GRAPH gm CASCADE;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to sequence gm.ag_label_seq
drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label v1
drop cascades to label v2
drop cascades to label e1
drop cascades to label person
drop cascades to label city
drop cascades to label hometown
-- cleanup
DROP GRAPH p CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to sequence p.ag_label_seq
drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label rel
drop cascades to label person
DROP GRAPH u CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to sequence u.ag_label_seq
drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label rel
DROP GRAPH t CASCADE;
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to sequence t.ag_label_seq
drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label time
drop cascades to label goes
drop cascades to label person
drop cascades to label knows
DROP GRAPH o CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to sequence o.ag_label_seq
drop cascades to label ag_vertex
drop cascades to label ag_edge
drop cascades to label person
drop cascades to label knows
SET graph_path = agens;
DROP VLABEL feature;
DROP ELABEL supported;
DROP VLABEL repo;
DROP ELABEL lib;
DROP ELABEL doc;
DROP GRAPH agens CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to sequence agens.ag_label_seq
drop cascades to label ag_vertex
drop cascades to label ag_edge
DROP TABLE history;
