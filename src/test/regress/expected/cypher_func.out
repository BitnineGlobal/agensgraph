--
-- vertex_labels()
--
-- prepare
DROP GRAPH IF EXISTS vertex_labels_simple CASCADE;
NOTICE:  graph "vertex_labels_simple" does not exist, skipping
DROP GRAPH IF EXISTS vertex_labels_complex1 CASCADE;
NOTICE:  graph "vertex_labels_complex1" does not exist, skipping
DROP GRAPH IF EXISTS vertex_labels_complex2 CASCADE;
NOTICE:  graph "vertex_labels_complex2" does not exist, skipping
CREATE GRAPH vertex_labels_simple;
CREATE GRAPH vertex_labels_complex1;
CREATE GRAPH vertex_labels_complex2;
-- simple test
SET graph_path = vertex_labels_simple;
--         a
--         |
-- b       c
-- |       |
-- +-- d --+
CREATE VLABEL a;
CREATE VLABEL b;
CREATE VLABEL c INHERITS (a);
CREATE VLABEL d INHERITS (b, c);
CREATE (:a {name: 'a'});
CREATE (:b {name: 'b'});
CREATE (:c {name: 'c'});
CREATE (:d {name: 'd'});
MATCH (n) RETURN n.name, label(n);
 name | label 
------+-------
 "a"  | "a"
 "b"  | "b"
 "c"  | "c"
 "d"  | "d"
(4 rows)

MATCH (n) RETURN n.name, labels(n);
 name |        labels        
------+----------------------
 "a"  | ["a"]
 "b"  | ["b"]
 "c"  | ["c", "a"]
 "d"  | ["d", "b", "c", "a"]
(4 rows)

MATCH (n) RETURN n.name, labels(n)[0];
 name | labels 
------+--------
 "a"  | "a"
 "b"  | "b"
 "c"  | "c"
 "d"  | "d"
(4 rows)

MATCH (n:c) RETURN n.name, labels(n)[1];
 name | labels 
------+--------
 "c"  | "a"
 "d"  | "b"
(2 rows)

MATCH (n:d) RETURN n.name, labels(n)[2], labels(n)[3];
 name | labels | labels 
------+--------+--------
 "d"  | "c"    | "a"
(1 row)

-- complex test 1
SET graph_path = vertex_labels_complex1;
--             a
--             |
--             b       c
--             |       |
-- +-- d --+   +-- e --+   f   +-- g
-- |   |   |       |       |   |   |
-- h   i   j       +------ k --+   |
--     |   |               |       |
--     +---+------ l ------+-------+
CREATE VLABEL a;
CREATE VLABEL b INHERITS (a);
CREATE VLABEL c;
CREATE VLABEL d;
CREATE VLABEL e INHERITS (b, c);
CREATE VLABEL f;
CREATE VLABEL g;
CREATE VLABEL h INHERITS (d);
CREATE VLABEL i INHERITS (d);
CREATE VLABEL j INHERITS (d);
CREATE VLABEL k INHERITS (e, f, g);
CREATE VLABEL l INHERITS (i, j, k, g);
CREATE (:a {name: 'a'});
CREATE (:b {name: 'b'});
CREATE (:c {name: 'c'});
CREATE (:d {name: 'd'});
CREATE (:e {name: 'e'});
CREATE (:f {name: 'f'});
CREATE (:g {name: 'g'});
CREATE (:h {name: 'h'});
CREATE (:i {name: 'i'});
CREATE (:j {name: 'j'});
CREATE (:k {name: 'k'});
CREATE (:l {name: 'l'});
MATCH (n) RETURN n.name, label(n), labels(n);
 name | label |                         labels                          
------+-------+---------------------------------------------------------
 "a"  | "a"   | ["a"]
 "c"  | "c"   | ["c"]
 "d"  | "d"   | ["d"]
 "f"  | "f"   | ["f"]
 "g"  | "g"   | ["g"]
 "b"  | "b"   | ["b", "a"]
 "e"  | "e"   | ["e", "b", "c", "a"]
 "h"  | "h"   | ["h", "d"]
 "i"  | "i"   | ["i", "d"]
 "j"  | "j"   | ["j", "d"]
 "k"  | "k"   | ["k", "e", "f", "g", "b", "c", "a"]
 "l"  | "l"   | ["l", "g", "i", "j", "k", "d", "e", "f", "b", "c", "a"]
(12 rows)

-- complex test 2
SET graph_path = vertex_labels_complex2;
-- +-- a ----------+
-- |   |       b   |
-- |   |       |   |
-- |   +-- d --+   |
-- |       |       |
-- |       e --+-- f
-- |           |
-- +-- c       g
--     |       |
--     +-- h --+-- i
--         |       |
--         +-- j --+
CREATE VLABEL a;
CREATE VLABEL b;
CREATE VLABEL c INHERITS (a);
CREATE VLABEL d INHERITS (a, b);
CREATE VLABEL e INHERITS (d);
CREATE VLABEL f INHERITS (a);
CREATE VLABEL g INHERITS (e, f);
CREATE VLABEL h INHERITS (c, g);
CREATE VLABEL i INHERITS (g);
CREATE VLABEL j INHERITS (h, i);
CREATE (:a {name: 'a'});
CREATE (:b {name: 'b'});
CREATE (:c {name: 'c'});
CREATE (:d {name: 'd'});
CREATE (:e {name: 'e'});
CREATE (:f {name: 'f'});
CREATE (:g {name: 'g'});
CREATE (:h {name: 'h'});
CREATE (:i {name: 'i'});
CREATE (:j {name: 'j'});
MATCH (n) RETURN n.name, label(n), labels(n);
 name | label |                       labels                       
------+-------+----------------------------------------------------
 "a"  | "a"   | ["a"]
 "b"  | "b"   | ["b"]
 "c"  | "c"   | ["c", "a"]
 "d"  | "d"   | ["d", "a", "b"]
 "f"  | "f"   | ["f", "a"]
 "h"  | "h"   | ["h", "c", "g", "a", "e", "f", "d", "b"]
 "e"  | "e"   | ["e", "d", "a", "b"]
 "g"  | "g"   | ["g", "e", "f", "d", "a", "b"]
 "j"  | "j"   | ["j", "h", "i", "c", "g", "a", "e", "f", "d", "b"]
 "i"  | "i"   | ["i", "g", "e", "f", "d", "a", "b"]
(10 rows)

-- cleanup
DROP GRAPH vertex_labels_complex2 CASCADE;
NOTICE:  drop cascades to 13 other objects
DETAIL:  drop cascades to sequence vertex_labels_complex2.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel a
drop cascades to vlabel b
drop cascades to vlabel c
drop cascades to vlabel d
drop cascades to vlabel e
drop cascades to vlabel f
drop cascades to vlabel g
drop cascades to vlabel h
drop cascades to vlabel i
drop cascades to vlabel j
DROP GRAPH vertex_labels_complex1 CASCADE;
NOTICE:  drop cascades to 15 other objects
DETAIL:  drop cascades to sequence vertex_labels_complex1.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel a
drop cascades to vlabel b
drop cascades to vlabel c
drop cascades to vlabel d
drop cascades to vlabel e
drop cascades to vlabel f
drop cascades to vlabel g
drop cascades to vlabel h
drop cascades to vlabel i
drop cascades to vlabel j
drop cascades to vlabel k
drop cascades to vlabel l
DROP GRAPH vertex_labels_simple CASCADE;
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to sequence vertex_labels_simple.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel a
drop cascades to vlabel b
drop cascades to vlabel c
drop cascades to vlabel d
-- Added test for AG249, use ln() for all log() calls
-- Create initial graph
CREATE GRAPH ag249_log_to_ln;
SET graph_path = ag249_log_to_ln;
CREATE VLABEL numbers;
CREATE (:numbers {string: '10', numeric: 10});
-- These should fail as there is no rule to cast from string to numeric
MATCH (u:numbers) RETURN log(u.string);
ERROR:  cannot cast "10" (jsonb type string) to numeric
MATCH (u:numbers) RETURN ln(u.string);
ERROR:  cannot cast "10" (jsonb type string) to numeric
MATCH (u:numbers) RETURN log10(u.string);
ERROR:  cannot cast "10" (jsonb type string) to numeric
-- Check that log() == ln() != log10
MATCH (u:numbers) RETURN log(u.numeric), ln(u.numeric), log10(u.numeric);
         ln         |         ln         |       log10        
--------------------+--------------------+--------------------
 2.3025850929940457 | 2.3025850929940457 | 1.0000000000000000
(1 row)

-- Check with a string constant
RETURN log('10'), ln('10'), log10('10');
        ln         |        ln         | log10 
-------------------+-------------------+-------
 2.302585092994046 | 2.302585092994046 | 1
(1 row)

-- Check with a numeric constant;
RETURN log(10), ln(10), log10(10);
        ln         |        ln         | log10 
-------------------+-------------------+-------
 2.302585092994046 | 2.302585092994046 | 1
(1 row)

-- Check hybrid query
return log10(10), (select log(10));
 log10 | log 
-------+-----
 1     | 1
(1 row)

-- cleanup
DROP GRAPH ag249_log_to_ln CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to sequence ag249_log_to_ln.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel numbers
-- Added tests for AG222. These tests test the new function
-- get_last_graph_write_stats(). Which is provided to allow
-- access to statistics on the last graph write operation.
CREATE GRAPH ag222;
SET graph_path = ag222;
CREATE VLABEL vertices;
CREATE ELABEL edges;
-- Should return only 2 inserted vertices and 1 inserted edge
create (:vertices {name: 'Boston'})-[:edges]->(:vertices {name: 'Miami'});
SELECT * FROM get_last_graph_write_stats();
 insertedvertices | insertededges | deletedvertices | deletededges | updatedproperties 
------------------+---------------+-----------------+--------------+-------------------
                2 |             1 |               0 |            0 |                 0
(1 row)

-- Should return only 2 updated properties
MATCH (u:vertices) SET u.property = true;
SELECT * FROM get_last_graph_write_stats();
 insertedvertices | insertededges | deletedvertices | deletededges | updatedproperties 
------------------+---------------+-----------------+--------------+-------------------
                0 |             0 |               0 |            0 |                 2
(1 row)

-- Should return only 1 deleted edge
match (u:vertices)-[e:edges]-() delete e;
SELECT * FROM get_last_graph_write_stats();
 insertedvertices | insertededges | deletedvertices | deletededges | updatedproperties 
------------------+---------------+-----------------+--------------+-------------------
                0 |             0 |               0 |            1 |                 0
(1 row)

-- Should return only 2 deleted vertices
match (u) delete u;
SELECT * FROM get_last_graph_write_stats();
 insertedvertices | insertededges | deletedvertices | deletededges | updatedproperties 
------------------+---------------+-----------------+--------------+-------------------
                0 |             0 |               2 |            0 |                 0
(1 row)

-- cleanup
DROP GRAPH ag222 CASCADE;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to sequence ag222.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel vertices
drop cascades to elabel edges
-- Added test for AG-283
CREATE GRAPH AG283;
CREATE ({name: 'arc 0', degree: 0});
MATCH (v) RETURN radians(v.degree);
 radians 
---------
 0
(1 row)

-- cleanup
DROP GRAPH AG283 CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to sequence ag283.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
-- fix: array_tail did not work with integer type
-- test 1: integer type
SELECT tail(ARRAY[12,13,14,15,16]);
     tail      
---------------
 {13,14,15,16}
(1 row)

-- test 2: null values
SELECT tail(ARRAY['hi',null,null,'bye']);
      tail       
-----------------
 {NULL,NULL,bye}
(1 row)

-- toFloatList (array)
-- test 1: text
select toFloatList(ARRAY['12.5','-14.788','-0.004']);
      tofloatlist      
-----------------------
 {12.5,-14.788,-0.004}
(1 row)

-- test 2: integer type
select toFloatList(ARRAY[12,13,14,15]);
  tofloatlist  
---------------
 {12,13,14,15}
(1 row)

-- test 3: null and float type
select toFloatList(ARRAY[14.15, null, -45.78, null, null, 0.02]);
            tofloatlist             
------------------------------------
 {14.15,NULL,-45.78,NULL,NULL,0.02}
(1 row)

-- test 4: null and boolean type
select toFloatList(ARRAY[true, true, null]);
 tofloatlist 
-------------
 {1,1,NULL}
(1 row)

-- toFloatList (jsonb)
-- test 1: text
return toFloatList(['12.5','-14.788','-0.004']);
         tofloatlist          
------------------------------
 [12.5000, -14.7880, -0.0040]
(1 row)

-- test 2: integer type
return toFloatList([12,13,14,15]);
   tofloatlist    
------------------
 [12, 13, 14, 15]
(1 row)

-- test 3: null and float type
return toFloatList([14.15, null, -45.78, null, null, 0.02]);
               tofloatlist               
-----------------------------------------
 [14.15, null, -45.78, null, null, 0.02]
(1 row)

-- test 4: null and boolean type
return toFloatList([true, true, null]);
 tofloatlist  
--------------
 [1, 1, null]
(1 row)

-- Tests for toBoolean()
-- test Case-1 (Integer - Accepted Input(1 or 0) ):
return toBoolean(1);
 toboolean 
-----------
 t
(1 row)

-- test Case-2(Integer - Unaccepted value):
return toBoolean(12);
ERROR:  Invalid input integer for toBoolean(): 12
-- test Case-3(Text - accepted input (‘true’ or ‘false’)):
return toBoolean('true');
 toboolean 
-----------
 t
(1 row)

-- test Case-4(Text - unaccepted values):
return str_size('agensgraph'), toBoolean('agensgraph');
 str_size | toboolean 
----------+-----------
 10       | 
(1 row)

-- test Case-5(Unaccepted types):
return toBoolean(1.0);
ERROR:  Invalid input type for toBoolean()
---
-- Tests for toBooleanOrNull()
-- test Case-1 (Integer - Accepted Input(1 or 0) ):
return toBooleanOrNull(1);
 tobooleanornull 
-----------------
 t
(1 row)

-- test Case-2(Integer - Unaccepted value):
return toBooleanOrNull(12);
 tobooleanornull 
-----------------
 
(1 row)

-- test Case-3(Text - accepted input (‘true’ or ‘false’)):
return toBooleanOrNull('true');
 tobooleanornull 
-----------------
 t
(1 row)

-- test Case-4(Text - unaccepted values):
return str_size('agensgraph'), toBooleanOrNull('agensgraph');
 str_size | tobooleanornull 
----------+-----------------
 10       | 
(1 row)

-- test Case-5(Unaccepted types):
return toBooleanOrNull(1.0);
 tobooleanornull 
-----------------
 
(1 row)

-- Tests for toStringOrNull()
-- test Case-1 (Integers):
return toStringOrNull(123) as strornull;
 strornull 
-----------
 "123"
(1 row)

-- test Case-2 (Float):
return toStringOrNull(123.5) as strornull;
 strornull 
-----------
 "123.5"
(1 row)

-- test Case-3(Timestamp):
return toStringOrNull(datetime(2020,5,26,10,45,56,0,0,'GMT')) as strornull;
         strornull          
----------------------------
 "Tue May 26 10:45:56 2020"
(1 row)

--Tests for toStringList()
-- test Case-1 (Integers and floats):
select reverse(toStringList(ARRAY[12,13.0,14.15,16,-17.0]));
         reverse          
--------------------------
 {-17.0,16,14.15,13.0,12}
(1 row)

-- test Case-2 (Bool and null):
select toStringList(ARRAY[true, null, null, false]);
  tostringlist   
-----------------
 {t,NULL,NULL,f}
(1 row)

-- test Case-3 (Timestamp):
select toStringList(ARRAY[datetime(2020,5,26,10,45,56,14,0,'GMT'),datetime(2017,2,13,10,52,10,87,10,'JST')]);
                           tostringlist                            
-------------------------------------------------------------------
 {"Tue May 26 10:45:56.014 2020","Mon Feb 13 19:52:10.08701 2017"}
(1 row)

-- Tests for range() and reverse()
-- test Case-1 (Without step, positive range):
return range(1,10);
              range              
---------------------------------
 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
(1 row)

-- test Case-2 (Without step, negative range):
return range(1,-10);
                      range                      
-------------------------------------------------
 [1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]
(1 row)

-- test Case-3 (positive range with step):
return range(1,10,3);
     range     
---------------
 [1, 4, 7, 10]
(1 row)

-- test Case-4 (negative range with step):
return range(-1,-10,-3), reverse(range(-10,-20,-4));
       range       |     reverse     
-------------------+-----------------
 [-1, -4, -7, -10] | [-18, -14, -10]
(1 row)

-- test Case-5(error cases):
return range(1,10,-3);
 range 
-------
 []
(1 row)

-- Tests for split()
--test Case-1:
return str_size('Hi/this/is/a/test/for/split'), split('Hi/this/is/a/test/for/split','/');
 str_size |                       split                       
----------+---------------------------------------------------
 27       | ["Hi", "this", "is", "a", "test", "for", "split"]
(1 row)

return str_size('Hope this works!'), reverse(split('Hope this works!',' '));
 str_size |          reverse           
----------+----------------------------
 16       | ["works!", "this", "Hope"]
(1 row)

-- test Case-2 (null string):
return split(null,'/');
 split 
-------
 
(1 row)

-- test Case-3 (null delimeter):
return split('Hi/this/is/a/test/for/split',null);
 split 
-------
 
(1 row)

-- Test for datetime() and localDatetime()
return datetime(2020,5,26,10,45,56,0,0,'GMT');
       datetime        
-----------------------
 "2020-05-26T10:45:56"
(1 row)

RETURN datetime() = (SELECT CAST(NOW() as timestamp)) AS equality;
 equality 
----------
 t
(1 row)

RETURN localDatetime() = (SELECT CAST(NOW() as timestamp)) AS equality;
 equality 
----------
 t
(1 row)

RETURN get_time() = (SELECT CAST(NOW() as time)) AS equality;
 equality 
----------
 t
(1 row)

-- Tests for toIntegerList()
-- test Case-1 (Text and null):
select toIntegerList(ARRAY['12','13.8','-4',null]);
  tointegerlist  
-----------------
 {12,13,-4,NULL}
(1 row)

-- test Case-2(Float):
select toIntegerList(ARRAY[12.5,14.7,-0.5]);
 tointegerlist 
---------------
 {12,14,0}
(1 row)

-- test Case-3(Boolean and null):
select toIntegerList(ARRAY[true, null, true]);
 tointegerlist 
---------------
 {1,NULL,1}
(1 row)

-- Tests for toFloatList()
-- test Case-1 (Text):
select toFloatList(ARRAY['12.5','-14.788','-0.004']);
      tofloatlist      
-----------------------
 {12.5,-14.788,-0.004}
(1 row)

-- test Case-2(Integer):
select toFloatList(ARRAY[12,13,14,15]);
  tofloatlist  
---------------
 {12,13,14,15}
(1 row)

-- test Case-3(null and float):
select toFloatList(ARRAY[14.15, null, -45.78, null, null, 0.02]);
            tofloatlist             
------------------------------------
 {14.15,NULL,-45.78,NULL,NULL,0.02}
(1 row)

-- test Case-4(Boolean and null):
select toFloatList(ARRAY[true, true, null]);
 tofloatlist 
-------------
 {1,1,NULL}
(1 row)

