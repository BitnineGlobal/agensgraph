--
-- AgensGraph catalog ag_graphmeta test
--
CREATE GRAPH graphmeta;
SET graph_path = graphmeta;
SET auto_gather_graphmeta = true;
-- create edge
CREATE (:human)-[:know]->(:human {age:1});
MERGE (:human)-[:know]->(:human {age:2});
MERGE (:human)-[:know]->(:human {age:3});
CREATE (:dog)-[:follow]->(:human);
CREATE (:dog)-[:likes]->(:dog);
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | dog   | likes  | dog   |         1
 graphmeta | human | know   | human |         3
(3 rows)

-- create multiple edges
CREATE (:human)-[:know]->(:human)-[:follow]->(:human)-[:hate]->(:human)-[:love]->(:human);
CREATE (:human)-[:know]->(:human)-[:follow]->(:human)-[:hate]->(:human)-[:love]->(:human);
CREATE (:human)-[:know]->(:human)-[:follow]->(:human)-[:hate]->(:human)-[:love]->(:human);
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | dog   | likes  | dog   |         1
 graphmeta | human | follow | human |         3
 graphmeta | human | hate   | human |         3
 graphmeta | human | know   | human |         6
 graphmeta | human | love   | human |         3
(6 rows)

-- create repeated edges;
CREATE (:human)-[:know]->(:human)-[:know]->(:human)-[:know]->(:human)-[:know]->(:human);
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | dog   | likes  | dog   |         1
 graphmeta | human | follow | human |         3
 graphmeta | human | hate   | human |         3
 graphmeta | human | know   | human |        10
 graphmeta | human | love   | human |         3
(6 rows)

-- delete edge
MATCH (a)-[r:love]->(b)
DELETE r;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | dog   | likes  | dog   |         1
 graphmeta | human | follow | human |         3
 graphmeta | human | hate   | human |         3
 graphmeta | human | know   | human |        10
(5 rows)

-- drop elabel
DROP ELABEL hate CASCADE;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | dog   | likes  | dog   |         1
 graphmeta | human | follow | human |         3
 graphmeta | human | know   | human |        10
(4 rows)

-- drop vlabel
DROP VLABEL human CASCADE;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start | edge  | end | edgecount 
-----------+-------+-------+-----+-----------
 graphmeta | dog   | likes | dog |         1
(1 row)

-- drop graph
DROP GRAPH graphmeta CASCADE;
NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to sequence graphmeta.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to elabel know
drop cascades to vlabel dog
drop cascades to elabel follow
drop cascades to elabel likes
drop cascades to elabel love
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start | edge | end | edgecount 
-----------+-------+------+-----+-----------
(0 rows)

-- Sub Transaction
CREATE GRAPH graphmeta;
-- Before Commit;
BEGIN;
	CREATE (:dog)-[:follow]->(:human);
	SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start | edge | end | edgecount 
-----------+-------+------+-----+-----------
(0 rows)

COMMIT;
-- Rollback
BEGIN;
	CREATE (:dog)-[:follow]->(:human);
	SAVEPOINT sv1;
	CREATE (:dog)-[:likes]->(:cat);
	ROLLBACK TO SAVEPOINT sv1;
	CREATE (:human)-[:love]->(:dog);
COMMIT;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         2
 graphmeta | human | love   | dog   |         1
(2 rows)

MATCH (a) DETACH DELETE a;
BEGIN;
	CREATE (:dog)-[:follow]->(:human);
	SAVEPOINT sv1;
	CREATE (:dog)-[:likes]->(:cat);
	SAVEPOINT sv2;
	CREATE (:dog)-[:likes]->(:ball);
	ROLLBACK TO SAVEPOINT sv1;
	CREATE (:human)-[:love]->(:dog);
COMMIT;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | human | love   | dog   |         1
(2 rows)

MATCH (a) DETACH DELETE a;
-- Release
BEGIN;
	CREATE (:dog)-[:follow]->(:human);
	SAVEPOINT sv1;
	CREATE (:dog)-[:likes]->(:cat);
	RELEASE SAVEPOINT sv1;
	CREATE (:human)-[:love]->(:dog);
COMMIT;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | dog   | likes  | cat   |         1
 graphmeta | human | love   | dog   |         1
(3 rows)

MATCH (a) DETACH DELETE a;
-- RELEASE and ROLLBACK
BEGIN;
	CREATE (:dog)-[:follow]->(:human);
	SAVEPOINT sv1;
	CREATE (:dog)-[:likes]->(:cat);
	SAVEPOINT sv2;
	CREATE (:dog)-[:likes]->(:ball);
	RELEASE SAVEPOINT sv2;
	ROLLBACK TO SAVEPOINT sv1;
COMMIT;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
(1 row)

MATCH (a) DETACH DELETE a;
-- ROLLBACK and RELEASE error
BEGIN;
	CREATE (:dog)-[:follow]->(:human);
	SAVEPOINT sv1;
	CREATE (:dog)-[:likes]->(:cat);
	SAVEPOINT sv2;
	CREATE (:dog)-[:likes]->(:ball);
	RELEASE SAVEPOINT sv1;
	ROLLBACK TO SAVEPOINT sv2;
ERROR:  no such savepoint
COMMIT;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start | edge | end | edgecount 
-----------+-------+------+-----+-----------
(0 rows)

-- If main transcantion was READ ONLY
BEGIN;
	SAVEPOINT sv1;
	CREATE (:dog)-[:likes]->(:cat);
	ROLLBACK TO SAVEPOINT sv1;
	CREATE (:human)-[:love]->(:dog);
COMMIT;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start | edge | end | edgecount 
-----------+-------+------+-----+-----------
 graphmeta | human | love | dog |         1
(1 row)

BEGIN;
	SAVEPOINT sv1;
	SAVEPOINT sv2;
	CREATE (:dog)-[:likes]->(:cat);
	RELEASE SAVEPOINT sv2;
	ROLLBACK TO SAVEPOINT sv1;
	CREATE (:human)-[:love]->(:dog);
COMMIT;
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start | edge | end | edgecount 
-----------+-------+------+-----+-----------
 graphmeta | human | love | dog |         2
(1 row)

-- regather_graphmeta()
MATCH (a) DETACH DELETE a;
SET auto_gather_graphmeta = false;
CREATE (:human)-[:know]->(:human {age:1});
MERGE (:human)-[:know]->(:human {age:2});
MERGE (:human)-[:know]->(:human {age:3});
CREATE (:dog)-[:follow]->(:human);
CREATE (:dog)-[:likes]->(:dog);
SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start | edge | end | edgecount 
-----------+-------+------+-----+-----------
(0 rows)

SELECT regather_graphmeta();
 regather_graphmeta 
--------------------
 t
(1 row)

SELECT * FROM ag_graphmeta_view ORDER BY start, edge, "end";
 graphname | start |  edge  |  end  | edgecount 
-----------+-------+--------+-------+-----------
 graphmeta | dog   | follow | human |         1
 graphmeta | dog   | likes  | dog   |         1
 graphmeta | human | know   | human |         3
(3 rows)

-- cleanup
DROP GRAPH graphmeta CASCADE;
NOTICE:  drop cascades to 10 other objects
DETAIL:  drop cascades to sequence graphmeta.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel dog
drop cascades to elabel follow
drop cascades to vlabel human
drop cascades to elabel love
drop cascades to elabel likes
drop cascades to vlabel cat
drop cascades to elabel know
