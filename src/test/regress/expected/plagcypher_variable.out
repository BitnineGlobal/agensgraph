--
-- PL/agCypher - Use Parameter
--
-- setup
drop graph if exists g3 cascade;
NOTICE:  graph "g3" does not exist, skipping
drop function if exists variable_vertex();
NOTICE:  function variable_vertex() does not exist, skipping
drop function if exists variable_edge();
NOTICE:  function variable_edge() does not exist, skipping
drop function if exists variable_graphpath();
NOTICE:  function variable_graphpath() does not exist, skipping
drop function if exists variable_graphid();
NOTICE:  function variable_graphid() does not exist, skipping
drop function if exists variable();
NOTICE:  function variable() does not exist, skipping
create graph g3;
set graph_path=g3;
create (:person{name : 'Anders'}), (:person{name : 'Dilshad'}), (:person{name : 'Cesar'}), (:person{name : 'Becky'}), (:person{name : 'Filipa'}), (:person{name : 'Emil'});
match (a), (b)
where a.name = 'Anders' and b.name = 'Dilshad'
create (a)-[e:knows{name:'friend1'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[4.1][3.1,3.2]{"name": "friend1"}
(1 row)

match (a), (b)
where a.name = 'Anders' and b.name = 'Cesar'
create (a)-[e:knows{name:'friend2'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[4.2][3.1,3.3]{"name": "friend2"}
(1 row)

match (a), (b)
where a.name = 'Anders' and b.name = 'Becky'
create (a)-[e:knows{name:'friend3'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[4.3][3.1,3.4]{"name": "friend3"}
(1 row)

match (a), (b)
where a.name = 'Dilshad' and b.name = 'Filipa'
create (a)-[e:knows{name:'friend4'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[4.4][3.2,3.5]{"name": "friend4"}
(1 row)

match (a), (b)
where a.name = 'Cesar' and b.name = 'Emil'
create (a)-[e:knows{name:'friend5'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[4.5][3.3,3.6]{"name": "friend5"}
(1 row)

match (a), (b)
where a.name = 'Becky' and b.name = 'Emil'
create (a)-[e:knows{name:'friend6'}]->(b)
return e;
                   e                    
----------------------------------------
 knows[4.6][3.4,3.6]{"name": "friend6"}
(1 row)

-- test variable( vertex )
create or replace function variable_vertex() returns vertex as $$
declare
var1 vertex;
begin
match (x)-[z]->(y) where z.name = 'friend2' and y.name = 'Cesar' return x into var1;
return var1;
end;
$$ language plagcypher;
select variable_vertex();
        variable_vertex        
-------------------------------
 person[3.1]{"name": "Anders"}
(1 row)

-- test variable( edge )
create or replace function variable_edge() returns edge as $$
declare
var1 edge;
begin
match (x)-[z]-(y) where x.name = 'Anders' and y.name = 'Becky' return z into var1;
return var1;
end;
$$ language plagcypher;
select variable_edge();
             variable_edge              
----------------------------------------
 knows[4.3][3.1,3.4]{"name": "friend3"}
(1 row)

-- test variable( graphpath )
create or replace function variable_graphpath() returns graphpath as $$
declare
var1 graphpath;
begin
match p=allshortestpaths( (n)-[*..4]-(m) ) where n.name = 'Filipa' and m.name = 'Becky' return p into var1;
return var1;
end;
$$ language plagcypher;
select variable_graphpath();
                                                                                                               variable_graphpath                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [person[3.5]{"name": "Filipa"},knows[4.4][3.2,3.5]{"name": "friend4"},person[3.2]{"name": "Dilshad"},knows[4.1][3.1,3.2]{"name": "friend1"},person[3.1]{"name": "Anders"},knows[4.3][3.1,3.4]{"name": "friend3"},person[3.4]{"name": "Becky"}]
(1 row)

-- test variable( graphid )
create or replace function variable_graphid() returns graphid as $$
declare
var1 graphid;
begin
match (a) where a.name = 'Dilshad' return id(a) into var1;
return var1;
end;
$$ language plagcypher;
select variable_graphid();
 variable_graphid 
------------------
 3.2
(1 row)

create or replace function variable() returns void as $$
declare
var1 vertex;
var2 edge;
var3 vertex;
begin
match (x)-[z]-(y) where x.name = 'Anders' and y.name = 'Becky' return x, z, y into var1, var2, var3;
raise notice 'var1 : %' , var1;
raise notice 'var2 : %' , var2;
raise notice 'var3 : %' , var3;
end;
$$ language plagcypher;
select variable();
NOTICE:  var1 : person[3.1]{"name": "Anders"}
NOTICE:  var2 : knows[4.3][3.1,3.4]{"name": "friend3"}
NOTICE:  var3 : person[3.4]{"name": "Becky"}
 variable 
----------
 
(1 row)

-- clean up
drop function if exists variable();
drop function if exists variable_graphid();
drop function if exists variable_graphpath();
drop function if exists variable_edge();
drop function if exists variable_vertex();
drop graph if exists g3 cascade;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to sequence g3.ag_label_seq
drop cascades to vlabel ag_vertex
drop cascades to elabel ag_edge
drop cascades to vlabel person
drop cascades to elabel knows
